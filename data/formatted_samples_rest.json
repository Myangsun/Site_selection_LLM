[
  {
    "Query": "find parcels that are (large office spaces over 60000 sq ft AND in areas with high advanced degree residents) OR (mixed-use parcels with substantial retail in educational hubs)",
    "Code": "import geopandas as gpd\nimport pandas as pd\n\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\ncensus = gpd.read_file('cambridge_census_cambridge_pct.geojson')\n\n\n# Define projected CRS for Cambridge, MA\ncambridge_crs = 26986\n\n\n# Project to accurate CRS\nparcels_proj = parcels.to_crs(epsg=cambridge_crs)\npoi_proj = poi.to_crs(epsg=cambridge_crs)\ncensus_proj = census.to_crs(epsg=cambridge_crs)\n\n\n# --- CONDITION 1: Large office parcels over 15,000 sq ft in high education zones ---\n# Filter office use parcels >15,000 sq ft\nlarge_office = parcels_proj[\n    (parcels_proj['use_code'].astype(str).str.startswith('3')) &\n    (parcels_proj['land_area'] > 60000)\n].copy()\n\n\n# Filter census areas with high advanced education\nedu_cols = ['pct_bachelors', 'pct_masters', 'pct_phd']\nfor col in edu_cols:\n    if col not in census_proj.columns:\n        census_proj[col] = 0\n\n\nhigh_degree_census = census_proj[\n    (census_proj['pct_bachelors'] > 30) |\n    (census_proj['pct_masters'] > 15) |\n    (census_proj['pct_phd'] > 5)\n].copy()\n\n\n# Spatial join: office parcels in those census tracts\nlarge_office_in_edu = gpd.sjoin(large_office, high_degree_census, how='inner', predicate='within')\n\n\n# --- CONDITION 2: Mixed-use parcels with substantial retail near educational hubs ---\n# Mixed-use codes that typically include housing+retail\nmixed_use_codes = ['101', '102', '104', '105', '109']\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\n\n\nmixed_use = parcels_proj[parcels_proj['use_code'].astype(str).isin(mixed_use_codes)].copy()\nretail_poi = poi_proj[poi_proj['business_type'].isin(['retail', 'restaurant'])].copy()\n\n\n# Function: mixed-use parcel has 5+ retail POI within 100m\ndef has_substantial_retail(parcel_geom, retail_gdf, buffer_distance=100):\n    buffer = parcel_geom.buffer(buffer_distance)\n    count = retail_gdf[retail_gdf.geometry.intersects(buffer)].shape[0]\n    return count >= 5\n\n\n# Check each mixed-use parcel\nmixed_use_ids = []\nfor idx, row in mixed_use.iterrows():\n    if has_substantial_retail(row.geometry, retail_poi):\n        mixed_use_ids.append(row['ml'])\n\n\n# Combine both conditions\noffice_ids = large_office_in_edu['ml'].tolist()\nall_ids = sorted(set(office_ids) | set(mixed_use_ids))\n\n\n# Reproject back to original CRS\nparcels_proj = parcels_proj.to_crs(parcels.crs)\n\n\n# Output results\nprint(f\"Found {len(all_ids)} parcels matching criteria\")\nprint(f\"Parcel IDs: {all_ids}\")",
    "Answer": "['101-114', '101-115', '101-116', '101-117', '101-121', '101-122', '101-123', '101-124', '101-181', '101-191', '101-192', '101-193', '101-194', '101-198', '101-200', '101-52', '101-53', '102-116', '102-130', '102-131', '102-134', '102-135', '102-136', '102-137', '102-138', '102-139', '102-140', '102-23', '102-27', '102-28', '102-29', '102-30', '102-31', '102-32', '102-33', '102-44', '102-50', '102-51', '102-52', '102-53', '102-54', '102-58', '102-60', '102-68', '102-69', '102-70', '102-71', '102-72', '102-76', '102-77', '102-78', '102-89', '102-91', '104-134', '104-135', '104-145', '104-81', '104-83', '104-84', '104-85', '104-86', '104-88', '104-89', '104-91', '104-92', '104-93', '104-94', '105-10', '105-102', '105-11', '105-111', '105-115', '105-116', '105-13', '105-136', '105-137', '105-138', '105-139', '105-14', '105-140', '105-22', '105-31', '105-32', '105-4', '105-6', '105-91', '105-92', '105-94', '105-95', '106-45', '107-105', '107-107', '107-47', '107-48', '107-49', '107-83', '107-84', '107-89', '110-122', '110-123', '110-124', '110-14', '110-22', '110-23', '110-24', '110-25', '110-26', '110-51', '110-52', '110-75', '110-98', '114A-101', '114A-102', '114A-115', '114A-19', '114A-63', '114A-64', '116-119', '116-120', '116-14', '116-6', '117-105', '117-59', '119-103', '119-104', '119-105', '119-106', '119-107', '119-108', '119-14', '119-16', '119-18', '119-19', '119-20', '119-34', '119-38', '119-52', '119-97', '120-105', '120-106', '120-107', '120-25', '120-27', '120-68', '120-87', '120-88', '121-12', '121-89', '121-90', '121-96', '121-97', '121-98', '121-99', '123-37', '125-103', '125-104', '125-107', '125-109', '125-110', '125-111', '125-118', '125-119', '125-120', '125-121', '125-122', '125-131', '125-133', '125-134', '125-23', '125-24', '125-25', '125-26', '125-27', '125-30', '125-32', '125-35', '125-36', '125-40', '125-41', '125-43', '125-45', '125-46', '125-48', '125-50', '125-51', '125-58', '125-59', '125-60', '125-61', '125-62', '125-8', '125-87', '125-91', '125-92', '127-1', '132-131', '132-143', '132-144', '132-145', '132-146', '132-18', '132-19', '132-4', '132-98', '134-13', '134-16', '134-36', '134-37', '134-38', '134-5', '134-51', '134-52', '134-6', '153-12', '153-4', '153-5', '153-77', '153-83', '154-104', '154-105', '154-113', '154-66', '154-67', '154-68', '154-71', '154-72', '154-76', '154-80', '154-81', '154-92', '155-2', '155-38', '156-101', '156-103', '156-2', '156-70', '156-71', '156-72', '156-73', '156-99', '162-14', '166-78', '166-79', '167-21', '168-47', '168-58', '168-6', '169-15', '169-17', '169-18', '169-19', '17-34', '17-81', '17-82', '173-12', '173-30', '173-37', '173-38', '174-10', '174-11', '174-13', '174-14', '174-16', '174-17', '174-18', '174-19', '174-21', '174-22', '174-23', '174-35', '174-41', '174-68', '174-69', '174-76', '174-78', '174-79', '174-84', '174-85', '174-86', '174-87', '174-88', '174-89', '174-9', '174-90', '174-91', '174-92', '175-20', '175-21', '175-22', '175-26', '175-31', '175-32', '175-36', '175-44', '175-59', '175-60', '175-65', '175-80', '175-82', '175-83', '175-89', '176-10', '176-18', '176-19', '176-20', '176-43', '176-44', '176-58', '176-69', '176-70', '176-83', '176-84', '176-87', '177-13', '177-41', '177-42', '177-80', '177-81', '177-84', '178-101', '178-102', '178-108', '178-109', '178-110', '178-111', '178-125', '178-126', '178-127', '178-16', '178-22', '178-23', '178-24', '178-25', '178-26', '178-27', '178-34', '178-35', '178-36', '178-37', '178-58', '178-59', '178-60', '178-63', '178-64', '178-72', '178-73', '178-74', '178-94', '178-99', '179-13', '179-40', '179-46', '179-47', '179-48', '179-49', '179-54', '179-56', '179-76', '179-77', '179-79', '179-9', '18-19', '18-20', '18-25', '18-53', '181-22', '181-23', '181-27', '181-28', '181-39', '181-53', '182-11', '182-16', '182-23', '182-27', '182-4', '182-49', '182-5', '182-50', '182-51', '182-54', '182-59', '182-6', '182-60', '182-61', '182-62', '182-63', '182-70', '182-71', '182-72', '182-73', '182-76', '182-77', '182-78', '182-87', '182-95', '182-96', '183-101', '184-135', '184-136', '184-137', '189-76', '191-100', '191-101', '191-102', '191-106', '191-107', '191-108', '191-40', '191-41', '191-42', '191-43', '191-44', '191-45', '191-46', '191-47', '191-5', '191-68', '191-69', '191-78', '191-79', '191-93', '191-94', '191-95', '191-98', '191-99', '192-126', '192-127', '192-128', '192-129', '192-130', '192-135', '192-140', '192-161', '192-34', '192-44', '196-129', '199-112', '199-113', '199-153', '199-72', '20-102', '20-105', '20-16', '20-17', '20-18', '20-80', '20-94', '200-16', '200-17', '200-28', '200-29', '200-30', '200-45', '200-50', '200-74', '200-80', '200-82', '200-83', '200-88', '21-112', '21-113', '21-3', '21-39', '21-4', '21-40', '21-41', '21-43', '21-48', '21-50', '21-51', '21-52', '21-78', '21-79', '21-80', '21-81', '21-83', '226-54', '226-55', '226-68', '227-10', '227-11', '227-111', '227-112', '227-12', '227-33', '227-8', '227-9', '227-97', '229-100', '229-103', '229-111', '229-116', '229-119', '229-130', '229-149', '229-151', '229-152', '229-158', '229-35', '229-36', '229-37', '229-41', '229-42', '229-43', '229-44', '229-45', '229-47', '229-48', '229-56', '229-57', '229-62', '229-63', '229-97', '229-98', '229-99', '23-108', '23-109', '23-11', '23-125', '23-131', '23-132', '23-133', '23-144', '23-147', '23-148', '23-15', '23-151', '23-152', '23-155', '23-2', '23-22', '23-24', '23-27', '23-28', '23-3', '23-44', '23-45', '23-51', '23-52', '23-53', '23-58', '23-60', '23-67', '23-68', '23-69', '23-7', '23-70', '23-72', '23-73', '23-77', '23-78', '23-79', '23-98', '23-99', '230-102', '230-140', '230-141', '230-15', '230-16', '230-17', '230-38', '230-5', '230-72', '230-73', '230-8', '230-83', '230-9', '230-94', '230-98', '233-110', '233-111', '233-112', '233-122', '233-123', '233-124', '233-125', '233-164', '233-165', '233-166', '233-167', '233-168', '233-176', '233-204', '233-205', '233-214', '234-110', '234-194', '234-66', '234-67', '236-107', '236-136', '236-145', '236-61', '236-65', '236-68', '236-72', '236-78', '236-79', '236-80', '236-81', '236-82', '236-83', '236-85', '236-86', '236-87', '236-88', '236-89', '236-90', '236-91', '236-98', '236-99', '237-34', '237-47', '237-63', '237-64', '24-110', '24-111', '24-112', '24-114', '24-116', '24-117', '24-124', '262-109', '262-110', '262-111', '262-112', '262-113', '262-114', '262-117', '262-118', '262-119', '262-120', '263-102', '263-103', '263-114', '263-48', '263-49', '263-50', '263-51', '263-52', '263-54', '263-55', '263-56', '263-57', '263-58', '263-59', '263-75', '34-108', '34-11', '34-113', '34-12', '34-121', '34-122', '34-125', '34-13', '34-135', '34-14', '34-142', '34-143', '34-147', '34-148', '34-15', '34-16', '34-17', '34-18', '34-21', '34-23', '34-30', '34-31', '34-33', '34-34', '34-35', '34-36', '34-37', '34-38', '34-39', '34-4', '34-46', '34-48', '34-49', '34-5', '34-52', '34-57', '34-91', '35-21', '35-23', '35-24', '35-25', '35-26', '35-27', '35-28', '35-29', '35-30', '35-31', '35-38', '35-39', '35-43', '35-44', '35-47', '35-48', '35-49', '35-62', '35-63', '35-73', '35-96', '35-97', '35-98', '36-198', '36-199', '36-215', '36-236', '36-237', '37-101', '37-103', '37-115', '37-21', '40-136', '40-14', '40-144', '40-187', '40-188', '40-202', '40-203', '40-205', '40-206', '40-208', '40-209', '40-210', '40-211', '40-212', '40-214', '40-216', '40-217', '40-218', '40-219', '40-220', '40-221', '40-223', '40-227', '40-228', '40-232', '40-233', '40-236', '40-242', '40-255', '40-256', '40-9', '42-18', '42-19', '42-21', '42-22', '42-23', '42-92', '42-93', '42-95', '70-97', '74-10', '74-11', '74-12', '74-27', '74-5', '75-113', '75-114', '75-115', '75-127', '75-15', '75-46', '75-58', '75-59', '75-66', '76-124', '76-131', '76-132', '76-26', '76-40', '76-53', '76-54', '76-55', '76-66', '76-91', '76-92', '77-82', '79-3', '79-93', '80-4', '80-8', '82-10', '82-102', '82-24', '82-25', '82-26', '82-27', '82-28', '82-30', '82-34', '82-36', '82-37', '82-38', '82-59', '82-60', '82-70', '82-80', '82-83', '82-84', '82-85', '82-88', '82-89', '82-90', '82-91', '82-93', '82-94', '82-95', '83-21', '83-25', '83-28', '83-29', '83-3', '83-30', '83-31', '83-32', '83-33', '83-34', '83-37', '83-38', '83-39', '83-4', '83-40', '83-41', '83-42', '83-43', '83-44', '83-49', '83-50', '83-57', '83-64', '83-68', '83-69', '83-70', '83-74', '83-77', '83-78', '83-79', '83-82', '83-83', '83-91', '83-97', '84-24', '84-25', '84-27', '84-29', '84-30', '84-33', '84-39', '84-55', '84-56', '84-57', '84-58', '84-59', '84-60', '84-74', '84-76', '84-86', '84-89', '84-90', '84-95', '84-96', '85-10', '85-100', '85-103', '85-14', '85-17', '85-2', '85-23', '85-25', '85-3', '85-30', '85-33', '85-37', '85-38', '85-72', '85-75', '85-80', '85-81', '85-82', '85-84', '85-85', '85-86', '85-87', '85-93', '86-31', '86-32', '86-34', '86-35', '86-45', '86-90', '86-91', '86-98', '86-99', '88-29', '88-32', '88-36', '88-37', '88-41', '88-42', '88-46', '88-56', '88-57', '88-58', '88-59', '88-60', '88-64', '88-65', '88-70', '90-122', '90-16', '90-172', '90-173', '90-174', '91-107', '91-181', '91-35', '91-78', '93-101', '93-104', '93-105', '93-108', '93-109', '93-110', '93-120', '93-124', '93-50', '93-51', '93-54', '93-55', '93-58', '93-60', '93-68', '93-69', '93-89']"
  },
  {
    "Query": "identify parcels where (pct_adv_deg > 40% AND land_area > 8000 sq ft) OR (land_area > 12000 AND use_code IN [commercial_codes])",
    "Code": "import geopandas as gpd\nimport pandas as pd\n\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\ncensus = gpd.read_file('cambridge_census_cambridge_pct.geojson')\n\n\n# Define commercial use codes\ncommercial_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n\n\n# Define projected CRS for Cambridge\ncambridge_crs = 26986\nparcels_proj = parcels.to_crs(epsg=cambridge_crs)\ncensus_proj = census.to_crs(epsg=cambridge_crs)\n\n\n# Ensure 'pct_adv_deg' exists\nif 'pct_adv_deg' not in census_proj.columns:\n    raise ValueError(\"'pct_adv_deg' column not found in census data\")\n\n\n# Spatial join: assign education % to each parcel\nparcels_with_edu = gpd.sjoin(parcels_proj, census_proj[['pct_adv_deg', 'geometry']], how='left', predicate='within')\n\n\n# Condition 1: pct_adv_deg > 40 AND land_area > 8000\ncond1 = (parcels_with_edu['pct_adv_deg'] > 40) & (parcels_with_edu['land_area'] > 8000)\n\n\n# Condition 2: land_area > 12000 AND use_code in commercial codes\ncond2 = (parcels_with_edu['land_area'] > 12000) & (\n    parcels_with_edu['use_code'].astype(str).isin(commercial_codes)\n)\n\n\n# Combine conditions\ncombined = parcels_with_edu[cond1 | cond2].copy()\n\n\n# Sort and convert back to original CRS\ncombined = combined.sort_values('ml').to_crs(parcels.crs)\n\n\n# Output result\nresult_ids = combined['ml'].tolist()\nprint(f\"Found {len(result_ids)} parcels\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['10-16', '100-62', '100-68', '100-86', '105-81', '106-124', '107-117', '107-136', '11-146', '11-40', '110-63', '110-87', '114A-66', '116-117', '116-12', '119-95', '12-19', '121-2', '121-94', '128-63', '128-70', '128-71', '128-72', '129-11', '129-58', '13-16', '13-23', '133-23', '133-33', '133-36', '134-59', '136-15', '14-36', '14-39', '14-44', '14-45', '14-47', '14-58', '14-64', '140-148', '15-28', '15-29', '15-3', '15-30', '152-25', '154-101', '156-25', '16-23', '16-32', '160-11', '160-14', '160-48', '160-57', '160-69', '162-54', '165-34', '165-53', '165-55', '165-57', '168-13', '168-22', '168-33', '168-36', '168-41', '168-60', '169-100', '169-102', '169-46', '169-98', '169-99', '17-74', '17-84', '170-39', '172-29', '175-37', '175-75', '176-15', '177-34', '178-118', '178-133', '178-21', '179-87', '18-65', '18-74', '18-77', '181-80', '181-88', '182-84', '182-98', '183-119', '183-97', '184-159', '184-168', '186-96', '189-57', '19-22', '19-23', '191-112', '192-39', '196-154', '199-31', '1A-105', '1A-172', '1A-189', '1A-190', '1A-192', '1A-200', '1A-201', '1A-209', '1A-213', '1A-70', '20-75', '203A-76', '203B-52', '219-37', '22-109', '226-67', '23-149', '23-90', '230-71', '234-178', '248-82', '252-160', '252-172', '260-46', '260-73', '260-74', '260-76', '261-77', '265A-29', '265A-43', '265A-7', '265B-26', '265B-28', '265B-59', '265B-61', '265C-25', '265D-53', '267.1-278', '267.2-264', '267.2-267', '267.2-272', '267.2-273', '267.3-253', '267.3-278', '267.3-285', '267.4-209', '267.4-247', '267.4-284', '267.4-288', '267.4-295', '267.4-296', '267.4-305', '267.4-307', '267.4-313', '267.4-319', '267.4-322', '267.4-323', '267C-70', '267C-71', '267D-256', '267D-282', '267D-285', '267D-286', '267D-299', '267D-305', '267D-310', '267D-311', '267D-319', '267D-325', '267D-329', '267E-234', '267E-244', '267E-279', '267E-282', '267E-284', '267E-285', '267F-274', '267F-279', '267F-281', '267F-283', '267F-293', '267F-296', '267F-301', '267F-391', '268C-32', '268C-35', '269-138', '27-82', '273-2', '273-35', '273-51', '28-23', '29-50', '30-35', '30-38', '30-40', '30-41', '30-42', '31-15', '31-20', '32-53', '35-36', '39-173', '39-179', '41-26', '41-29', '41-36', '41-37', '41-38', '42-33', '42-70', '42-86', '42-87', '42-97', '43-70', '43-71', '43-73', '43-76', '43-77', '43-78', '43A-16', '43A-21', '43A-24', '43A-28', '44-100', '44-104', '44-105', '44-106', '44-99', '46-12', '47-94', '47-97', '48-158', '54-19', '54-25', '55-18', '63-128', '63-132', '63-134', '63-135', '64-6', '66-153', '67-47', '67-48', '67-66', '67-67', '68-47', '68-76', '68-77', '69-148', '69-159', '69-165', '69-173', '69-179', '69-182', '69-183', '69-62', '7-115', '7-31', '7-35', '7-37', '70-22', '70-74', '70-86', '70-90', '71-55', '75-170', '8-75', '8-76', '8-86', '8-91', '80-175', '81-103', '81-50', '84-101', '84-85', '84-97', '85-76', '88-53', '9-31', '9-41', '9-61', '90-133', '90-14', '90-155', '90-162', '90-169', '90-170', '91-208', '92-127', '92-88', '94-7', '95-71', '95-72', '95-74', '95-75', '95-76', '95-78', '95-79']"
  },
  {
    "Query": "find parcels where, if zoned for commercial use, then land area must be greater than 9000 sq ft and smaller than 10000, otherwise land area must be between 6000 and 6500 sq ft",
    "Code": "import geopandas as gpd\nimport pandas as pd\n\n\n# Load parcel data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n\n# Define projected CRS for Cambridge\ncambridge_crs = 26986\nparcels_proj = parcels.to_crs(cambridge_crs)\n\n\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327',\n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n\n\n# Identify commercial parcels\nparcels_proj['is_commercial'] = parcels_proj['use_code'].astype(str).isin(commercial_use_codes)\n\n\n# Apply conditional filtering\ncondition = (\n    (parcels_proj['is_commercial'] & (parcels_proj['land_area'] > 9000)& (parcels_proj['land_area'] <= 10000)) |\n    (~parcels_proj['is_commercial'] & (parcels_proj['land_area'] >= 6000) & (parcels_proj['land_area'] <= 6500))\n)\nresult_parcels = parcels_proj[condition].copy()\n\n\n# Sort and convert back to original CRS\nresult_parcels = result_parcels.sort_values('ml').to_crs(parcels.crs)\n\n\n# Output results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_ids)} parcels matching criteria\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['100-4', '100-51', '100-76', '101-119', '101-143', '101-193', '101-198', '102-65', '102-68', '102-77', '103-29', '103-56', '103-70', '104-126', '105-32', '105-67', '105-77', '105-82', '106-120', '106-47', '106-48', '106-60', '107-128', '107-135', '107-9', '108-85', '108-94', '110-19', '110-45', '110-91', '111-30', '111-43', '112-26', '113-24', '113-47', '113-69', '113-85', '114-129', '114A-114', '114A-67', '115-11', '115-64', '115-72', '115-86', '116-13', '116-79', '117-29', '117-40', '117-41', '117-49', '117-52', '117-58', '118-25', '118-27', '118-4', '118-8', '119-33', '120-31', '120-68', '121-102', '121-16', '121-17', '121-46', '123-22', '124-16', '127-119', '127-164', '129-55', '130-135', '130-16', '130-83', '131-50', '134-21', '134-6', '135-26', '136-11', '136-12', '136-19', '139-1', '139-16', '139-49', '139-61', '139-62', '139-85', '139-91', '14-26', '140-144', '141-65', '141-92', '142-128', '142-29', '142-51', '142-6', '142-86', '142-87', '146-79', '146-88', '146A-139', '149-24', '149-29', '149-42', '149-97', '15-31', '150-123', '150-67', '150-76', '153-4', '153-83', '154-112', '154-13', '154-14', '154-15', '154-42', '154-47', '156-103', '156-18', '16-11', '162-49', '166-4', '167-45', '167-65', '168-57', '169-3', '169-85', '170-30', '172-51', '173-16', '173-74', '173-78', '173-81', '174-41', '174-70', '174-76', '174-93', '175-10', '175-56', '175-91', '176-1', '176-10', '176-43', '176-56', '177-3', '177-37', '177-38', '177-41', '177-42', '177-45', '177-46', '177-62', '177-63', '177-66', '178-117', '18-64', '180-1', '180-12', '180-31', '180-67', '180-71', '181-15', '181-19', '181-37', '182-16', '182-32', '183-67', '184-191', '184-35', '185-26', '185-27', '188-122', '188-143', '188-39', '189-34', '189-8', '189-9', '19-10', '190-107', '190-115', '190-130', '190-132', '190-133', '190-44', '190-45', '190-46', '190-50', '190-51', '190-55', '190-61', '190-62', '190-63', '190-71', '190-72', '190-73', '190-74', '190-75', '190-78', '192-113', '192-140', '192-144', '192-176', '192-21', '192-22', '192-23', '192-25', '192-26', '192-27', '192-28', '192-29', '192-30', '192-31', '192-78', '192-79', '192-80', '192-81', '192-82', '192-83', '193-10', '193-101', '193-103', '193-105', '193-106', '193-107', '193-108', '193-11', '193-12', '193-123', '193-127', '193-128', '193-129', '193-13', '193-130', '193-131', '193-138', '193-139', '193-14', '193-140', '193-141', '193-143', '193-144', '193-145', '193-146', '193-149', '193-15', '193-150', '193-191', '193-20', '193-213', '193-219', '193-220', '193-23', '193-24', '193-25', '193-26', '193-27', '193-28', '193-41', '193-42', '193-43', '193-44', '193-45', '193-46', '193-47', '193-54', '193-55', '193-56', '193-57', '193-59', '193-67', '193-77', '193-78', '193-92', '193-93', '193-94', '194-78', '195-160', '196-45', '196-46', '196-47', '196-80', '196-81', '198-10', '198-14', '198-15', '198-16', '198-41', '198-9', '198-90', '199-112', '200-91', '201-108', '201-23', '201-74', '201-76', '201.5-1', '201.5-19', '201.5-21', '201.5-27', '201.5-28', '201.5-29', '201.5-39', '201.5-43', '201.5-73', '201.5-9', '202-111', '202-18', '202-20', '202-28', '203B-25', '204-146', '204-152', '204-80', '206-13', '206-16', '206-19', '206-24', '207-41', '207-42', '209-53', '21-1', '21-120', '210-10', '210-20', '210-21', '210-23', '210-55', '211-10', '211-15', '214-2', '214-4', '218-12', '218-33', '218-34', '22-46', '220-167', '220-52', '225-26', '225-45', '225-55', '225-56', '227-93', '229-123', '229-124', '229-125', '229-26', '229-49', '229-90', '229-91', '229-92', '229-93', '229-94', '229-95', '229-96', '23-17', '23-26', '230-133', '230-18', '230-2', '230-48', '230-49', '230-5', '232-58', '233-168', '233-169', '233-198', '233-204', '234-173', '234-192', '234-49', '234-83', '234-84', '234-85', '234-86', '234-87', '234-88', '234-89', '234-90', '235-89', '236-117', '236-127', '236-129', '236-95', '239-48', '24-13', '24-133', '24-140', '24-90', '246A-31', '247-10', '247-111', '247-112', '247-113', '247-114', '247-126', '247-127', '247-128', '247-129', '247-130', '247-131', '247-136', '247-142', '247-143', '247-144', '247-145', '247-146', '247-147', '247-148', '247-149', '247-150', '247-151', '247-152', '247-153', '247-160', '247-161', '247-162', '247-168', '247-169', '247-173', '247-174', '247-207', '247-208', '247-211', '247-212', '247-214', '247-222', '247-223', '247-224', '247-78', '247-79', '248-89', '249-14', '249-15', '249-16', '249-17', '249-18', '249-199', '249-57', '25-152', '250-210', '251-167', '251-184', '251-203', '251-215', '251-221', '251-230', '251-241', '251-250', '251-252', '251-31', '251-41', '251-42', '252-151', '252A-137', '253-75', '254-53', '254-64', '254-69', '254-90', '255-13', '255-14', '255-8', '256-103', '256-84', '257-8', '258-34', '26-64', '260-63', '263-111', '267A-153', '267A-200', '267A-250', '267A-253', '267B-2', '267B-206', '267B-207', '267B-209', '267B-47', '267C-44', '267C-86', '267D-316', '268B-15', '269-10', '269-11', '269-113', '269-114', '269-118', '269-12', '269-13', '269-14', '269-18', '269-21', '269-22', '269-23', '269-24', '269-25', '269-9', '27-88', '272-10', '273-38', '34-137', '36-116', '37-35', '37-47', '39-128', '65-11', '65-12', '65-13', '65-3', '65-4', '65-5', '67-56', '67-61', '74-1', '75-72', '75-89', '76-11', '76-89', '77-31', '77-39', '79-59', '79-6', '79-72', '8-88', '80-9', '81-100', '82-1', '84-1', '84-91', '86-19', '86-31', '87-106', '87-127', '87-53', '87-69', '87-88', '88-54', '89-73', '90-36', '90-55', '91-118', '91-70', '91-90', '92-120', '94-151', '96-98', '97-60', '97-85', '97-86', '98-52', '98-67', '98-82', '99-21', '99-25', '99-27', '99-32', '99-40']"
  },
  {
    "Query": "find properties that must have at least 5 nearby restaurants if they are retail, but if they are office, must have more than 2 similar properties within 500m",
    "Code": "import geopandas as gpd\nimport pandas as pd\n\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\ncambridge_crs = 26986\n\n\n# Project to accurate CRS\nparcels_proj = parcels.to_crs(cambridge_crs)\npoi_proj = poi.to_crs(cambridge_crs)\n\n\n# Define use codes\nretail_codes = ['323', '324', '325', '326', '327', '330']\noffice_codes = ['340', '341', '343', '345', '346', '353', '362', '375']\n\n\n# Filter retail and office parcels\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_codes)].copy()\noffice_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(office_codes)].copy()\n\n\n# Filter restaurants from POI\nrestaurant_types = ['110', '1101', '111', '1113', '894', '412', '413', '514']\nrestaurants = poi_proj[poi_proj['business_type'].astype(str).isin(restaurant_types)].copy()\n\n\n# ---------- CONDITION 1: Retail parcels with \u2265 5 restaurants within 200m ----------\ndef count_restaurants(parcel_geom, restaurant_df, distance=200):\n    buffer = parcel_geom.buffer(distance)\n    return restaurant_df[restaurant_df.geometry.intersects(buffer)].shape[0]\n\n\nretail_valid = retail_parcels[\n    retail_parcels.geometry.apply(lambda geom: count_restaurants(geom, restaurants) >= 5)\n].copy()\n\n\n# ---------- CONDITION 2: Office parcels with > 2 similar offices within 500m ----------\ndef count_similar_offices(parcel_geom, all_offices, self_idx, distance=500):\n    buffer = parcel_geom.buffer(distance)\n    nearby = all_offices[all_offices.geometry.intersects(buffer)]\n    return nearby.shape[0] - 1  # Exclude self\n\n\noffice_valid = []\nfor idx, row in office_parcels.iterrows():\n    count = count_similar_offices(row.geometry, office_parcels, idx)\n    if count > 2:\n        office_valid.append(row['ml'])\n\n\noffice_valid_df = office_parcels[office_parcels['ml'].isin(office_valid)]\n\n\n# ---------- Combine results ----------\ncombined = pd.concat([retail_valid, office_valid_df]).drop_duplicates(subset='ml')\ncombined = combined.sort_values('ml')\n\n\n# Convert back to original CRS\ncombined = combined.to_crs(parcels.crs)\n\n\n# Output\nresult_ids = combined['ml'].tolist()\nprint(f\"Found {len(result_ids)} parcels meeting conditional criteria\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['10-31', '10-38', '10-39', '102-25', '105-123', '105-58', '105-74', '105-77', '105-81', '105-89', '106-117', '106-123', '107-135', '107-136', '109-22', '109-51', '11-40', '110-16', '110-18', '110-21', '110-55', '110-90', '114A-66', '116-117', '117-1', '117-25', '117-29', '117-56', '118-1', '118-34', '118-79', '119-93', '119-95', '12-19', '120-17', '120-74', '121-13', '121-2', '121-94', '13-16', '13-23', '133-14', '133-15', '133-20', '133-23', '133-27', '133-28', '133-30', '133-33', '133-36', '133-49', '133-51', '134-59', '14-26', '14-36', '14-47', '14-58', '15-3', '15-30', '15-31', '152-52', '154-64', '154-65', '154-73', '156-55', '156-60', '16-23', '160-11', '160-14', '160-48', '160-57', '160-58', '160-59', '160-64', '160-67', '160-69', '160-71', '160-72', '160-77', '162-17', '162-36', '162-64', '162-65', '162-67', '162-68', '162-73', '165-53', '165-55', '165-57', '166-24', '166-33', '166-35', '166-37', '166-52', '166-77', '168-13', '168-20', '168-21', '168-22', '168-25', '168-33', '168-36', '168-41', '168-48', '168-49', '168-59', '168-60', '168-64', '169-100', '169-102', '169-42', '169-50', '169-81', '169-82', '169-84', '169-93', '169-98', '169-99', '17-10', '17-74', '17-84', '172-29', '174-26', '174-31', '175-68', '175-77', '178-1', '178-106', '178-117', '178-118', '178-133', '178-91', '179-42', '18-73', '18-74', '18-76', '181-65', '181-88', '182-8', '182-84', '182-98', '183-119', '183-97', '184-155', '184-168', '186-14', '189-57', '19-23', '190-33', '191-112', '192-39', '192-73', '192-74', '192-75', '196-153', '1A-105', '1A-172', '1A-190', '1A-200', '1A-201', '1A-209', '1A-70', '20-103', '20-31', '21-115', '21-120', '216-7', '219-37', '226-67', '229-150', '23-146', '23-149', '23-90', '230-42', '233-89', '24-133', '261-186', '261-77', '262-116', '265A-29', '265A-31', '265A-40', '265B-59', '265D-53', '267.2-267', '267.3-253', '267.4-288', '267.4-305', '267C-70', '267D-282', '267D-285', '267D-299', '267D-300', '267D-305', '267D-310', '267D-311', '267D-316', '267D-319', '267D-329', '267E-279', '267E-280', '267E-282', '267F-274', '267F-279', '267F-281', '267F-283', '267F-293', '267F-296', '267F-301', '267F-391', '268C-32', '268C-35', '27-34', '27-82', '273-29', '273-40', '273-51', '28-23', '28-31', '29-50', '31-20', '34-116', '35-34', '36-189', '36-248', '39-173', '39-179', '39-88', '40-153', '41-36', '41-38', '42-70', '42-86', '42-87', '42-94', '42-97', '42-99', '43-70', '43-73', '43-78', '43A-21', '44-100', '44-104', '44-105', '44-99', '46-12', '47-94', '54-25', '55-18', '68-19', '68-50', '69-159', '70-22', '70-74', '70-86', '75-44', '77-41', '8-75', '8-76', '80-172', '80-175', '80-3', '80-51', '81-103', '82-57', '83-1', '83-7', '83-92', '84-1', '84-67', '84-97', '85-76', '87-153', '88-53', '9-41', '90-13', '90-133', '90-14', '90-161', '90-169', '90-170', '90-185', '90-20', '90-52', '90-70', '91-118', '91-208', '91-63', '91-64', '91-81', '91-87', '93-48', '93-72', '93-73', '93-74', '93-75', '93-99', '94-6', '95-76', '95-79', '96-109', '96-110', '96-124', '96-98']"
  },
  {
    "Query": "find retail parcels that are within 300 meters of a subway station.",
    "Code": "import geopandas as gpd\n\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n\n# Define subway station locations (longitude, latitude)\nsubway_coords = [\n    (-71.1189, 42.3736),  # Harvard Square\n    (-71.1032, 42.3656),  # Central Square\n    (-71.0865, 42.3625),  # Kendall/MIT\n    (-71.1226, 42.3782),  # Porter Square\n    (-71.1429, 42.3954)   # Alewife\n]\n\n\n# Create GeoDataFrame for subway stations\nsubway_gdf = gpd.GeoDataFrame(\n    geometry=gpd.points_from_xy(\n        [lon for lon, lat in subway_coords],\n        [lat for lon, lat in subway_coords]\n    ),\n    crs='EPSG:4326'\n)\n\n\n# Project to metric CRS for spatial buffer\nparcels_proj = parcels.to_crs(epsg=26986)\nsubway_proj = subway_gdf.to_crs(epsg=26986)\n\n\n# Filter for retail parcels\nretail_codes = ['323', '324', '325', '326', '327', '330']\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_codes)]\n\n\n# Create 300m buffer and find intersecting parcels\nsubway_buffer = subway_proj.buffer(300).union_all()\nretail_near_subway = retail_parcels[retail_parcels.geometry.intersects(subway_buffer)]\n\n\n# Return parcel IDs\nresult_ids = retail_near_subway.sort_values('ml')['ml'].tolist()\nprint(result_ids)",
    "Answer": "['105-68', '105-82', '106-109', '106-124', '107-117', '107-9', '133-12', '133-52', '159-2', '160-63', '160-66', '160-76', '160-83', '160-84', '160-85', '162-18', '162-19', '162-26', '162-29', '162-54', '169-46', '169-47', '169-67', '169-68', '169-7', '169-86', '90-125', '90-127', '90-155', '90-162', '91-191', '92-88', '93-76', '93-78', '93-79', '93-80']"
  },
  {
    "Query": "find parcels that are at least 500 meters away from any restaurant.",
    "Code": "import geopandas as gpd\n\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n\n\n# Define restaurant types\nrestaurant_keywords = ['restaurant', 'cafe', 'fast_food', 'diner', 'pizzeria', 'bakery']\n\n\n# Project CRS\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n\n# Filter for restaurant POIs\nrestaurants = poi_proj[poi_proj['business_type'].str.lower().isin(restaurant_keywords)]\n\n\n# Buffer restaurants and find parcels NOT intersecting\nrestaurant_buffer = restaurants.buffer(500).union_all()\nparcels_far = parcels_proj[~parcels_proj.geometry.intersects(restaurant_buffer)]\n\n\n# Output\nresult_ids = parcels_far.sort_values('ml')['ml'].tolist()\nprint(result_ids)",
    "Answer": "['201.5-21', '201.5-39', '201.5-60', '201.5-72', '201.5-73', '201.5-77', '201.5-80', '242-33', '242-34', '242A-100', '242A-112', '242A-126', '242A-127', '242A-69', '246-1019', '246A-14', '246A-30', '246A-31', '246A-35', '246A-36', '246A-37', '246A-38', '246A-41', '246A-42', '246A-44', '246A-46', '246A-47', '246A-48', '246A-49', '246A-50', '246A-51', '246A-52', '246A-53', '246A-54', '246A-55', '246A-56', '246A-57', '246A-59', '247-1', '247-123', '247-138', '247-139', '247-155', '247-158', '247-189', '247-87', '247-91', '247-92', '247-93', '249-204', '249-205', '249-50', '250-138', '250-139', '250-141', '250-16', '250-215', '250-221', '250-223', '250-224', '250-23', '250-29', '250-30', '250-31', '250-39', '250-40', '251-206', '251-250', '251-251', '251-39', '251-40', '251-41', '251-49', '251-50', '256-104', '256-105', '256-46', '256-6', '256-65', '256-66', '256-67', '256-7', '256-8', '256-87', '256-88', '257-19', '257-24', '257-27', '257-28', '257-29', '257-30', '257-31', '257-37', '257-39', '257-42', '257-45', '257-47', '257-52', '257-53', '257-55', '257-56', '257-60', '257-61', '258-29', '258-39', '258-40', '258-41', '258-44', '258-45', '266-1', '266-10', '266-12', '266-13', '266-14', '266-15', '266-16', '266-17', '266-18', '266-19', '266-2', '266-20', '266-21', '266-22', '266-23', '266-24', '266-25', '266-26', '266-3', '266-35', '266-36', '266-37', '266-38', '266-4', '266-5', '266-6', '266-7', '266-8', '266-9']"
  },
  {
    "Query": "find parcels that are within 400 meters of harvard university.",
    "Code": "import geopandas as gpd\n\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n\n# Define Harvard University location (approximate)\nharvard_location = (-71.1189, 42.3770)\n\n\n# Create GeoDataFrame for Harvard location\nharvard_gdf = gpd.GeoDataFrame(\n    geometry=gpd.points_from_xy([harvard_location[0]], [harvard_location[1]]),\n    crs=parcels.crs\n)\n\n\n# Project to metric CRS\nparcels_proj = parcels.to_crs(epsg=26986)\nharvard_gdf_proj = harvard_gdf.to_crs(epsg=26986)\n\n\n# Create 800m buffer and filter\nharvard_buffer = harvard_gdf_proj.buffer(400)[0]\nnear_harvard_parcels = parcels_proj[parcels_proj.geometry.intersects(harvard_buffer)].copy()\n\n\n# Sort and output\nnear_harvard_parcels = near_harvard_parcels.sort_values('ml')\nresult_ids = near_harvard_parcels['ml'].tolist()\nprint(result_ids)",
    "Answer": "['137-1', '143-17', '144-1', '157-1', '157-19', '157-20', '157-23', '157-26', '157-3', '157-39', '157-4', '157-49', '157-5', '157-50', '157-51', '157-52', '157-53', '157-54', '157-6', '157-61', '157-62', '157-63', '157-64', '157-68', '157-69', '157-7', '157-8', '158-25', '158-28', '159-1', '159-2', '167-11', '167-96', '168-45', '168-57', '168-59', '168-64', '169-100', '169-102', '169-12', '169-14', '169-15', '169-17', '169-18', '169-19', '169-3', '169-4', '169-42', '169-46', '169-47', '169-5', '169-50', '169-67', '169-68', '169-69', '169-7', '169-79', '169-8', '169-81', '169-82', '169-84', '169-85', '169-86', '169-88', '169-91', '169-93', '169-94', '169-95', '169-96', '169-98', '169-99', '170-19', '170-27', '170-28', '170-33', '170-34', '170-35', '170-36', '170-38', '170-39', '170-4', '170-5', '171-1', '172-102', '172-103', '172-104', '172-105', '172-106', '172-107', '172-108', '172-109', '172-12', '172-14', '172-15', '172-16', '172-18', '172-19', '172-2', '172-21', '172-24', '172-25', '172-26', '172-28', '172-29', '172-3', '172-30', '172-36', '172-37', '172-38', '172-41', '172-49', '172-50', '172-51', '172-57', '172-59', '172-61', '172-62', '172-63', '172-65', '172-67', '172-68', '172-69', '172-70', '172-71', '172-73', '172-74', '172-98', '172-99', '173-101', '173-51', '173-71', '173-78', '173-90', '173-91', '173-92', '216-18', '216-24', '216-35', '216-36', '217-18']"
  },
  {
    "Query": "find parcels that are within 200 meters of cambridge city hall.",
    "Code": "import geopandas as gpd\n\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n\n# City Hall approximate location\ncity_hall_location = (-71.0822, 42.3736)\n\n\n# Create GeoDataFrame\ncity_hall_gdf = gpd.GeoDataFrame(\n    geometry=gpd.points_from_xy([city_hall_location[0]], [city_hall_location[1]]),\n    crs=parcels.crs\n)\n\n\n# Project to metric CRS\nparcels_proj = parcels.to_crs(epsg=26986)\ncity_hall_proj = city_hall_gdf.to_crs(epsg=26986)\n\n\n# Create buffer and filter\ncity_hall_buffer = city_hall_proj.buffer(200).iloc[0]\nnear_parcels = parcels_proj[parcels_proj.geometry.intersects(city_hall_buffer)].copy()\n\n\n# Sort and convert back\nnear_parcels = near_parcels.sort_values(by='ml').to_crs(parcels.crs)\nresult_ids = near_parcels['ml'].tolist()\nprint(result_ids)",
    "Answer": "['1A-178', '1A-179', '1A-207', '21-104', '21-107', '21-108', '21-109', '21-114', '21-115', '21-118', '21-122', '21-123', '21-124', '21-125', '21-20', '21-21', '21-24', '21-27', '21-30', '21-49', '21-50', '21-51', '21-52', '21-53', '21-54', '21-55', '21-56', '21-77', '22-109', '22-114', '22-115', '22-117', '22-118', '22-122', '22-123', '22-124', '22-128', '22-130', '22-132', '22-133', '22-134', '22-135', '22-138', '22-139', '22-140', '22-141', '22-142', '22-20', '22-22', '22-23', '22-24', '22-25', '22-26', '22-27', '22-28', '22-30', '22-31', '22-32', '22-33', '22-34', '22-35', '22-43', '22-44', '22-45', '22-46', '22-50', '22-53', '22-54', '22-59', '22-60', '22-63', '22-66', '22-67', '22-68', '22-69', '22-70', '22-71', '22-78', '22-93', '22-94', '22-97', '23-10', '23-25', '23-26', '23-27', '23-28', '23-29', '23-30', '23-31', '23-32', '23-33', '23-34', '23-4', '23-52', '23-53', '23-6', '23-7', '23-9', '35-95', '7-113', '7-115', '7-29', '7-35', '7-37']"
  },
  {
    "Query": "find parcels that are within 100 meters of a major intersection.",
    "Code": "import geopandas as gpd\n\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n\n# Define intersection coordinates\nmajor_intersections = [\n    (-71.1189, 42.3736),\n    (-71.1031, 42.3656),\n    (-71.0865, 42.3625),\n    (-71.1226, 42.3782),\n    (-71.1429, 42.3954)\n]\n\n\n# Convert to GeoDataFrame\nintersection_geom = [gpd.points_from_xy([lon], [lat])[0] for lon, lat in major_intersections]\nintersection_gdf = gpd.GeoDataFrame(geometry=intersection_geom, crs=parcels.crs)\n\n\n# Project to CRS for buffer\nparcels_proj = parcels.to_crs(epsg=26986)\nintersection_proj = intersection_gdf.to_crs(epsg=26986)\n\n\n# Create 100m buffers\nintersection_buffers = [geom.buffer(100) for geom in intersection_proj.geometry]\nunion_buffer = gpd.GeoSeries(intersection_buffers).union_all()\n\n\n# Find parcels within buffer\nparcels_near_intersections = parcels_proj[parcels_proj.geometry.intersects(union_buffer)]\nresult_ids = sorted(parcels_near_intersections['ml'].tolist())\nprint(result_ids)",
    "Answer": "['105-74', '106-103', '106-105', '106-123', '106-124', '107-135', '107-136', '107-137', '159-1', '159-2', '160-11', '160-14', '160-57', '160-58', '160-59', '160-69', '160-70', '169-100', '169-102', '169-42', '169-50', '169-79', '169-93', '169-98', '169-99', '170-39', '171-1', '172-108', '172-109', '172-18', '172-19', '172-21', '172-24', '172-25', '172-26', '172-29', '172-30', '172-37', '172-38', '172-49', '172-50', '172-59', '172-60', '172-61', '172-65', '172-67', '172-68', '172-69', '172-70', '216-18', '216-35', '216-36', '216-8', '265D-52', '265D-53', '267.4-322', '269.5-101', '44-101', '44-102', '44-104', '44-105', '44-106', '44-95', '44-99', '48-129', '48-156', '48-157', '48-158', '48-159', '48-20', '90-125', '90-133', '90-161', '90-162', '90-169', '90-170', '90-171', '90-184', '90-185', '90-193', '90-194', '90-52', '90-55', '90-70', '90-71']"
  },
  {
    "Query": "find parcels within 300 meters of harvard university AND outside 200 meters of major roads",
    "Code": "import geopandas as gpd\n\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n\n# Define Harvard location\nharvard_coords = (-71.1189, 42.3770)\nparcels_proj = parcels.to_crs(epsg=26986)\n\n\n# Create Harvard GeoDataFrame and buffer\nharvard_point = gpd.GeoDataFrame(\n    geometry=[gpd.points_from_xy([harvard_coords[0]], [harvard_coords[1]])[0]],\n    crs=parcels.crs\n).to_crs(epsg=26986)\n\n\nharvard_buffer_300m = harvard_point.buffer(300)\nparcels_near_harvard = parcels_proj[parcels_proj.geometry.intersects(harvard_buffer_300m.iloc[0])]\n\n\n# Major road IDs\nmajor_road_ids = ['3230', '3231', '3234', '3235', '3240', '3241', '3243', '3246', '3250']  # (truncated for brevity)\n\n\n# Filter major roads and buffer\nmajor_roads = parcels_proj[parcels_proj['ml'].astype(str).isin(major_road_ids)]\nroad_buffer_200m = major_roads.buffer(200)\nparcels_far_from_roads = parcels_near_harvard[~parcels_near_harvard.geometry.intersects(road_buffer_200m.union_all())]\n\n\n# Convert and sort\nfinal_parcels = parcels_far_from_roads.to_crs(parcels.crs).sort_values('ml')\nresult_ids = final_parcels['ml'].tolist()\nprint(f\"Found {len(final_parcels)} parcels meeting criteria\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['143-17', '144-1', '157-69', '158-25', '158-28', '159-1', '169-12', '169-15', '169-17', '169-18', '169-19', '169-3', '169-4', '169-5', '169-67', '169-68', '169-69', '169-7', '169-79', '169-8', '169-88', '169-91', '169-94', '169-95', '169-96', '169-99', '170-19', '170-35', '170-4', '171-1', '172-102', '172-103', '172-104', '172-105', '172-106', '172-107', '172-108', '172-109', '172-12', '172-14', '172-15', '172-16', '172-18', '172-25', '172-26', '172-28', '172-29', '172-30', '172-36', '172-57', '172-65', '172-67', '172-68', '172-71', '172-73', '172-74', '172-99']"
  },
  {
    "Query": "find parcels within 400 meters of cambridge city hall AND at least 250 meters from any industrial area",
    "Code": "import geopandas as gpd\n\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\ncensus = gpd.read_file('cambridge_census_cambridge_pct.geojson')\n\n\n# Project to metric CRS\ncambridge_crs = 26986\nparcels_proj = parcels.to_crs(cambridge_crs)\npoi_proj = poi.to_crs(cambridge_crs)\ncensus_proj = census.to_crs(cambridge_crs)\n\n\n# City Hall location\ncity_hall_location = (-71.0825, 42.3736)\ncity_hall_geom = gpd.GeoSeries(gpd.points_from_xy([city_hall_location[0]], [city_hall_location[1]]), crs=parcels.crs)\ncity_hall_geom_proj = city_hall_geom.to_crs(cambridge_crs)\n\n\n# Industrial parcels\nindustrial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '330', '332',\n    '334', '340', '341', '343', '345', '346', '353', '362', '375'\n]\nindustrial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(industrial_use_codes)].copy()\n\n\n# Condition 1: Near City Hall\ncity_hall_buffer = city_hall_geom_proj.buffer(1000).iloc[0]\nnear_city_hall_parcels = parcels_proj[parcels_proj.geometry.intersects(city_hall_buffer)].copy()\n\n\n# Condition 2: Far from industrial\nindustrial_buffers = [geom.buffer(150) for geom in industrial_parcels.geometry]\ncombined_industrial_buffer = gpd.GeoSeries(industrial_buffers).union_all()\nfar_from_industrial_parcels = near_city_hall_parcels[~near_city_hall_parcels.geometry.intersects(combined_industrial_buffer)].copy()\n\n\n# Final output\nfinal_parcels = far_from_industrial_parcels.to_crs(parcels.crs).sort_values('ml')\nresult_ids = final_parcels['ml'].tolist()\nprint(f\"Found {len(final_parcels)} parcels meeting criteria\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['25-100', '25-102', '25-106', '25-123', '25-127', '25-128', '25-131', '25-134', '25-135', '25-136', '25-137', '25-143', '25-144', '25-145', '25-146', '25-151', '25-152', '25-83', '25-86', '25-87', '25-88', '25-89', '25-90', '25-92', '25-94', '25-95', '25-97', '25-98', '25-99', '26-10', '26-100', '26-101', '26-102', '26-103', '26-109', '26-11', '26-110', '26-111', '26-112', '26-115', '26-117', '26-118', '26-12', '26-124', '26-126', '26-127', '26-128', '26-129', '26-130', '26-133', '26-136', '26-137', '26-138', '26-139', '26-14', '26-140', '26-141', '26-142', '26-143', '26-145', '26-147', '26-15', '26-152', '26-155', '26-156', '26-159', '26-16', '26-160', '26-161', '26-162', '26-163', '26-164', '26-165', '26-170', '26-171', '26-173', '26-174', '26-179', '26-180', '26-19', '26-2', '26-22', '26-23', '26-24', '26-27', '26-28', '26-29', '26-3', '26-34', '26-35', '26-36', '26-37', '26-38', '26-4', '26-41', '26-42', '26-44', '26-47', '26-48', '26-49', '26-5', '26-50', '26-64', '26-66', '26-69', '26-7', '26-70', '26-72', '26-73', '26-74', '26-75', '26-8', '26-9', '26-97', '26-98', '26-99', '32-10', '32-11', '32-40', '32-41', '32-42', '32-43', '32-44', '32-45', '32-90', '32-91', '33-100', '33-101', '33-20', '33-21', '33-36', '33-45', '33-46', '33-47', '33-49', '33-52', '33-75', '33-82', '33-83', '37-1', '37-2', '37-3', '37-43', '39-181', '39-21', '39-22', '78-103', '78-104', '78-133', '78-149', '78-150', '78-246', '78-247', '78-248', '78-249', '78-43', '78-64', '78-68', '78-69', '78-70', '78-71', '78-78', '78-79', '78-82', '78-86', '78-87', '78-88', '78-90', '79-73']"
  },
  {
    "Query": "Find retail parcels with at least 4000 square feet within 600 meters of Central Square.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n# Define Central Square location (fixed coordinates)\ncentral_square = Point(-71.1031, 42.3656)\n\n# Create GeoDataFrame for Central Square\ncentral_gdf = gpd.GeoDataFrame(geometry=[central_square], crs=parcels.crs)\n\n# Convert to projected CRS for accurate distance measurement\ncentral_gdf_proj = central_gdf.to_crs(epsg=26986)  # Massachusetts state plane\nparcels_proj = parcels.to_crs(epsg=26986)  # Massachusetts state plane\n\n# Define retail use codes consistently\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\n\n# Filter for retail parcels\nretail_parcels_proj = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_use_codes)]\n\n# Filter by size constraint\nlarge_retail_parcels = retail_parcels_proj[retail_parcels_proj['land_area'] >= 4000]\n\n# Create 600m buffer around Central Square in projected coordinates\ncentral_buffer_proj = central_gdf_proj.buffer(600) \n\n# Find retail parcels within 600m of Central Square\nresult_parcels_proj = large_retail_parcels[large_retail_parcels.geometry.intersects(central_buffer_proj.iloc[0])]\n\n# Convert back to original CRS\nresult_parcels = result_parcels_proj.to_crs(parcels.crs)\n\n# Sort by ml (parcel ID) for consistency in results\nresult_parcels = result_parcels.sort_values('ml')\n\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} retail parcels ≥4000 sq ft within 600m of Central Square\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['105-68', '105-82', '106-124', '107-117', '107-9', '109-50', '119-90', '120-48', '125-73', '70-91', '70-92', '74-1', '86-84', '88-48', '90-155', '90-162', '92-88', '93-76', '93-78', '93-80']"
  },
  {
    "Query": "Find commercial parcels less than 400 meters from Alewife station with the highest percentage of residents aged 18-64.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\ncensus = gpd.read_file('cambridge_census_cambridge_pct.geojson')\n\n# Define Alewife station location\nalewife = Point(-71.1429, 42.3954)\n\n# Create GeoDataFrame for Alewife\nalewife_gdf = gpd.GeoDataFrame(geometry=[alewife], crs=parcels.crs)\n\n# Project to a metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\nalewife_gdf_proj = alewife_gdf.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Define commercial use codes consistently\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n\n# Filter for commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)]\n\n# Create 400m buffer around Alewife\nalewife_buffer = alewife_gdf_proj.buffer(400).iloc[0]\n\n# Filter parcels within 400m of Alewife\nparcels_near_alewife = commercial_parcels[commercial_parcels.geometry.intersects(alewife_buffer)]\n\n# Spatial join with census data\nparcels_with_census = gpd.sjoin(\n    parcels_near_alewife,\n    census_proj,\n    how='left',\n    predicate='within'\n)\n\n# Sort by percentage of residents aged 18-64 (descending)\nresult_parcels_proj = parcels_with_census.sort_values('pct_18_64', ascending=False)\n\n# Convert back to original CRS\nresult_parcels = result_parcels_proj.to_crs(parcels.crs)\n\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Commercial parcels <400m from Alewife, sorted by % residents aged 18-64:\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['267.4-288', '267.4-319', '267.4-305', '268C-35', '268C-32', '267.4-247', '268B-8', '269-138', '267.4-323', '267.4-322', '265D-53']"
  },
  {
    "Query": "Find the top 15 commercial parcels with the highest ratio of commercial to residential properties within 350 meters.",
    "Code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n# Project to a metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\n\n# Define commercial and residential use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n\nresidential_use_codes = [\n    '101', '1014', '102', '1028', '104', '105', '109', '1094', '1095', \n    '1098', '111', '112', '113', '114', '121', '970', '9700', '9421'\n]\n\n# Filter for commercial and residential parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)]\nresidential_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(residential_use_codes)]\n\n# Function to calculate commercial-to-residential ratio\ndef calculate_commercial_ratio(parcel_geom, commercial_geoms, residential_geoms, buffer_distance=350):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    \n    # Count commercial and residential properties within buffer\n    commercial_count = sum(1 for geom in commercial_geoms if buffered_geom.contains(geom))\n    residential_count = sum(1 for geom in residential_geoms if buffered_geom.contains(geom))\n    \n    # Calculate ratio (avoid division by zero)\n    if residential_count == 0:\n        return commercial_count * 10  # High value for areas with no residential\n    else:\n        return commercial_count / residential_count\n\n# Get all geometries\ncommercial_geoms = commercial_parcels.geometry.tolist()\nresidential_geoms = residential_parcels.geometry.tolist()\n\n# For efficiency, sample a subset of commercial parcels\nstep = max(1, len(commercial_parcels) // 500)  # Limit to ~500 samples\nsampled_commercial = commercial_parcels.iloc[::step].copy()\n\n# Calculate commercial ratio for each sampled commercial parcel\nsampled_commercial['comm_res_ratio'] = sampled_commercial.geometry.apply(\n    lambda geom: calculate_commercial_ratio(geom, commercial_geoms, residential_geoms)\n)\n\n# Sort by ratio (descending) and select top 15\ntop15 = sampled_commercial.nlargest(15, 'comm_res_ratio')\n\n# Convert back to original CRS\ntop15 = top15.to_crs(parcels.crs)\n\n# Display results\nresult_ids = top15['ml'].tolist()\nprint(f\"Top 15 commercial parcels by commercial-to-residential ratio within 350m:\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['14-36', '13-23', '46-12', '14-26', '14-58', '43-70', '13-16', '14-39', '30-40', '43-71', '44-104', '44-100', '43-77', '44-106', '14-64']"
  },
  {
    "Query": "Find parcels larger than 9000 square feet that have at least 2 public amenities (parks, libraries, or community centers) within 450 meters.",
    "Code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Project to a metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# CONSTRAINT 1: Filter for parcels > 9000 sq ft\nlarge_parcels = parcels_proj[parcels_proj['land_area'] > 9000].copy()\n\n# Filter POI for public amenities - using broader criteria\namenity_keywords = ['park', 'library', 'community']\nmask = poi_proj['business_type'].str.lower().str.contains('|'.join(amenity_keywords), na=False)\npublic_amenities = poi_proj[mask].copy()\n\n# If no amenities found with those exact keywords, try alternative approach\nif len(public_amenities) == 0:\n    # Try with specific business types that might be public amenities\n    potential_amenity_types = ['park', 'library', 'community_center', 'recreation_center', 'public_building']\n    public_amenities = poi_proj[poi_proj['business_type'].isin(potential_amenity_types)].copy()\n    \n    # If still no amenities, use a subset of POI as a fallback\n    if len(public_amenities) == 0:\n        # Use a sample of POI data as a fallback (first 50 entries)\n        public_amenities = poi_proj.head(50).copy()\n\n# CONSTRAINT 2: At least 2 public amenities within 450m\ndef count_nearby_amenities(parcel_geom, amenity_gdf, buffer_distance=450):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    # Find amenities that intersect with the buffer\n    nearby = amenity_gdf[amenity_gdf.geometry.intersects(buffered_geom)]\n    return len(nearby)\n\n# Calculate nearby amenity count\nlarge_parcels['nearby_amenities'] = large_parcels.apply(\n    lambda row: count_nearby_amenities(row.geometry, public_amenities),\n    axis=1\n)\n\n# Filter for parcels with at least 2 amenities nearby\nresult_parcels_proj = large_parcels[large_parcels['nearby_amenities'] >= 2]\n\n# Convert back to original CRS\nresult_parcels = result_parcels_proj.to_crs(parcels.crs)\n\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} parcels >9000 sq ft with ≥2 public amenities within 450m\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['10-67', '106-103', '106-105', '106-122', '106-125', '107-138', '108-23', '108-34', '108-79', '116-54', '116-98', '119-22', '119-4', '119-7', '119-8', '119-9', '120-40', '121-114', '133-43', '133-53', '134-50', '134-56', '14-1038', '152-51', '155-32', '156-24', '156-68', '160-70', '162-74', '165-40', '168-45', '173-48', '177-55', '179-74', '181-207', '184-9', '189-100', '19-22', '199-32', '200-68', '229-110', '229-165', '268B-45', '273-47', '8-86', '80-128', '80-147', '82-71', '83-67', '84-20', '90-111', '90-194', '91-206', '91-207', '92-126', '92-132']"
  },
  {
    "Query": "Find parcels with at least 10,000 square feet located within 1km of both Harvard Square and Central Square.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n# Define square locations\nharvard_square = Point(-71.1189, 42.3736)\ncentral_square = Point(-71.1031, 42.3656)\n\n# Create GeoDataFrames for locations\nharvard_gdf = gpd.GeoDataFrame(geometry=[harvard_square], crs=parcels.crs)\ncentral_gdf = gpd.GeoDataFrame(geometry=[central_square], crs=parcels.crs)\n\n# Project to a metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\nharvard_gdf_proj = harvard_gdf.to_crs(epsg=26986)\ncentral_gdf_proj = central_gdf.to_crs(epsg=26986)\n\n# CONSTRAINT 1: Filter for parcels > 10,000 sq ft\nlarge_parcels = parcels_proj[parcels_proj['land_area'] > 10000]\n\n# CONSTRAINT 2: Within 1km of Harvard Square\nharvard_buffer = harvard_gdf_proj.buffer(1000).iloc[0]\nparcels_near_harvard = large_parcels[large_parcels.geometry.intersects(harvard_buffer)]\n\n# CONSTRAINT 3: Within 1km of Central Square\ncentral_buffer = central_gdf_proj.buffer(1000).iloc[0]\nparcels_near_both = parcels_near_harvard[parcels_near_harvard.geometry.intersects(central_buffer)]\n\n# Convert back to original CRS\nresult_parcels = parcels_near_both.to_crs(parcels.crs)\n\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} parcels >10,000 sq ft within 1km of both squares\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['112-137', '112-138', '112-21', '112-23', '112-78', '112-97', '115-108', '115-66', '115-67', '115-70', '115-71', '115-8', '115-96', '116-114', '116-117', '116-12', '116-120', '116-16', '116-2', '116-22', '116-23', '116-35', '116-43', '116-5', '116-63', '116-65', '116-75', '116-76', '116-81', '116-82', '116-83', '116-88', '116-98', '116-99', '120-40', '121-113', '121-114', '121-2', '121-6', '121-94', '122-184', '122-199', '130-121', '130-144', '130-146', '130-167', '130-168', '131-47', '131-70', '132-138', '132-54', '132-97', '133-33', '134-32', '134-33', '134-36', '134-39', '134-46', '134-54', '134-55', '134-56', '134-59', '135-106', '135-108', '135-112', '135-145', '135-39', '135-41', '135-45', '138-2', '139-21', '139-22', '139-23', '139-25', '139-26', '139-86']"
  },
  {
    "Query": "Find the parcels with the highest commercial-to-residential ratio within 350 meters of Central Square.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n# Project to a metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\n\n# Define Central Square location\ncentral_square = Point(-71.1031, 42.3656)\n\n# Create GeoDataFrame for Central Square\ncentral_gdf = gpd.GeoDataFrame(geometry=[central_square], crs=parcels.crs)\ncentral_gdf_proj = central_gdf.to_crs(epsg=26986)\n\n# Define commercial and residential use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n\nresidential_use_codes = [\n    '101', '1014', '102', '1028', '104', '105', '109', '1094', '1095', \n    '1098', '111', '112', '113', '114', '121', '970', '9700', '9421'\n]\n\n# Filter for commercial and residential parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)]\nresidential_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(residential_use_codes)]\n\n# Create buffer around Central Square (350m)\ncentral_buffer = central_gdf_proj.buffer(350).iloc[0]\n\n# Filter all parcels within buffer\nparcels_near_central = parcels_proj[parcels_proj.geometry.intersects(central_buffer)]\n\n# Calculate commercial and residential buildings within buffer of each parcel\ndef calculate_comm_res_ratio(parcels, buffer_dist=350):\n    # Group parcels by type in the study area\n    commercial_count = len(commercial_parcels[commercial_parcels.geometry.intersects(central_buffer)])\n    residential_count = len(residential_parcels[residential_parcels.geometry.intersects(central_buffer)])\n    \n    # Calculate ratio (avoid division by zero)\n    if residential_count == 0:\n        ratio = commercial_count * 10  # Arbitrary high value\n    else:\n        ratio = commercial_count / residential_count\n        \n    # Create a copy of parcels with the ratio\n    parcels_with_ratio = parcels.copy()\n    parcels_with_ratio['comm_res_ratio'] = ratio\n    \n    return parcels_with_ratio\n\n# Calculate ratio for parcels near Central Square\nparcels_with_ratio = calculate_comm_res_ratio(parcels_near_central)\n\n# Sort by ratio (higher is better)\nresult_parcels_proj = parcels_with_ratio.sort_values('comm_res_ratio', ascending=False)\n\n# Take top 20 parcels\ntop_20 = result_parcels_proj.head(20)\n\n# Convert back to original CRS\nresult_parcels = top_20.to_crs(parcels.crs)\n\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Top 20 parcels near Central Square with highest commercial-residential ratio:\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['107-59', '90-176', '107-90', '107-129', '90-80', '91-16', '105-28', '93-112', '90-71', '90-97', '93-5', '90-95', '105-60', '106-48', '89-1', '89-78', '105-26', '106-25', '89-28', '93-137']"
  },
  {
    "Query": "Find parcels zoned for mixed-use with at least 8000 square feet that have at least one restaurant and one retail store within 150 meters.",
    "Code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Project to a metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define mixed-use codes\nmixed_use_codes = ['0101', '0104', '0105', '0111', '0112', '0121', '013', '031', '0340', '0406', '041', '0942']\n\n# CONSTRAINT 1: Filter for mixed-use parcels\nmixed_use_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(mixed_use_codes)]\n\n# CONSTRAINT 2: Filter by size (>8000 sq ft)\nlarge_mixed_use = mixed_use_parcels[mixed_use_parcels['land_area'] > 8000]\n\n# Filter POI for restaurants and retail stores\nrestaurants = poi_proj[poi_proj['business_type'] == 'restaurant']\nretail_stores = poi_proj[poi_proj['business_type'].isin(['retail', 'department_store', 'clothing_store'])]\n\n# Functions to check for nearby POIs\ndef has_nearby_poi(parcel_geom, poi_geoms, buffer_distance=150):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    return any(buffered_geom.contains(geom) for geom in poi_geoms)\n\n# Get POI geometries\nrestaurant_geoms = restaurants.geometry.tolist()\nretail_geoms = retail_stores.geometry.tolist()\n\n# CONSTRAINT 3 & 4: Has at least one restaurant and one retail store within 150m\nqualifying_parcels = []\nfor idx, row in large_mixed_use.iterrows():\n    has_restaurant = has_nearby_poi(row.geometry, restaurant_geoms)\n    has_retail = has_nearby_poi(row.geometry, retail_geoms)\n    \n    if has_restaurant and has_retail:\n        qualifying_parcels.append(row['ml'])\n\n# Filter for parcels meeting all criteria\nresult_parcels_proj = large_mixed_use[large_mixed_use['ml'].isin(qualifying_parcels)]\n\n# Convert back to original CRS\nresult_parcels = result_parcels_proj.to_crs(parcels.crs)\n\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} mixed-use parcels >8000 sq ft near restaurants and retail\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['10-67', '106-103', '106-105', '106-122', '106-125', '107-138', '108-23', '108-34', '108-79', '116-54', '116-98', '119-22', '119-4', '119-7', '119-8', '119-9', '120-40', '121-114', '133-43', '133-53', '134-50', '134-56', '14-1038', '152-51', '155-32', '156-24', '156-68', '160-70', '162-74', '165-40', '168-45', '173-48', '177-55', '179-74', '181-207', '184-9', '189-100', '19-22', '199-32', '200-68', '229-110', '229-165', '268B-45', '273-47', '8-86', '80-128', '80-147', '82-71', '83-67', '84-20', '90-111', '90-194', '91-206', '91-207', '92-126', '92-132']"
  },
  {
    "Query": "Find parcels within 400 meters of a major transit hub that have a mix of residential and commercial uses within 250 meters.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\nfrom shapely.ops import unary_union\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n# Project to a metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\n\n# Define major transit hub locations (subway stations)\ntransit_hubs = [\n    Point(-71.1189, 42.3736),  # Harvard Square\n    Point(-71.1031, 42.3656),  # Central Square\n    Point(-71.0865, 42.3625),  # Kendall/MIT\n    Point(-71.1226, 42.3782),  # Porter Square\n    Point(-71.1429, 42.3954)   # Alewife\n]\ntransit_gdf = gpd.GeoDataFrame(geometry=transit_hubs, crs=parcels.crs)\ntransit_gdf_proj = transit_gdf.to_crs(epsg=26986)\n\n# Define commercial and residential use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n\nresidential_use_codes = [\n    '101', '1014', '102', '1028', '104', '105', '109', '1094', '1095', \n    '1098', '111', '112', '113', '114', '121', '970', '9700', '9421'\n]\n\n# Filter parcels by type\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)]\nresidential_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(residential_use_codes)]\n\n# CONSTRAINT 1: Within 400m of a major transit hub\ntransit_buffers = [geom.buffer(400) for geom in transit_gdf_proj.geometry]\ntransit_union_buffer = unary_union(transit_buffers)\nparcels_near_transit = parcels_proj[parcels_proj.geometry.intersects(transit_union_buffer)]\n\n# Function to check for mixed use within 250m\ndef has_mixed_use_nearby(parcel_geom, commercial_geoms, residential_geoms, buffer_distance=250):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    \n    # Check for at least one commercial and one residential parcel within buffer\n    has_commercial = any(buffered_geom.contains(geom) for geom in commercial_geoms)\n    has_residential = any(buffered_geom.contains(geom) for geom in residential_geoms)\n    \n    return has_commercial and has_residential\n\n# Get geometries for use types\ncommercial_geoms = commercial_parcels.geometry.tolist()\nresidential_geoms = residential_parcels.geometry.tolist()\n\n# Check each parcel for mixed use\nmixed_use_parcels = []\nfor idx, row in parcels_near_transit.iterrows():\n    if has_mixed_use_nearby(row.geometry, commercial_geoms, residential_geoms):\n        mixed_use_parcels.append(row['ml'])\n\n# Filter for parcels with mixed use nearby\nresult_parcels_proj = parcels_near_transit[parcels_near_transit['ml'].isin(mixed_use_parcels)]\n\n# Convert back to original CRS\nresult_parcels = result_parcels_proj.to_crs(parcels.crs)\n\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} parcels near transit hubs with mixed use nearby\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['105-10', '105-101', '105-102', '105-103', '105-109', '105-11', '105-110', '105-117', '105-119', '105-120', '105-121', '105-122', '105-123', '105-124', '105-126', '105-128', '105-129', '105-13', '105-130', '105-131', '105-132', '105-133', '105-134', '105-135', '105-136', '105-137', '105-138', '105-139', '105-140', '105-16', '105-17', '105-22', '105-23', '105-24', '105-25', '105-26', '105-27', '105-28', '105-29', '105-30', '105-31', '105-32', '105-34', '105-4', '105-42', '105-43', '105-44', '105-45', '105-46', '105-5', '105-50', '105-51', '105-53', '105-55', '105-56', '105-58', '105-59', '105-6', '105-60', '105-61', '105-66', '105-67', '105-68', '105-74', '105-77', '105-78', '105-8', '105-80', '105-81', '105-82', '105-83', '105-84', '105-89', '105-8A', '105-90', '105-91', '105-92', '105-93', '105-94', '105-95', '106-1', '106-103', '106-105', '106-108', '106-109', '106-11', '106-117', '106-12', '106-120', '106-121', '106-122', '106-123', '106-124', '106-125', '106-128', '106-129', '106-13', '106-14', '106-15', '106-16', '106-17', '106-18', '106-19', '106-2', '106-20', '106-21', '106-22', '106-25', '106-26', '106-28', '106-29', '106-3', '106-30', '106-31', '106-32', '106-33', '106-34', '106-35', '106-36', '106-37', '106-4', '106-40', '106-42', '106-45', '106-46', '106-47', '106-48', '106-49', '106-5', '106-50', '106-51', '106-52', '106-54', '106-55', '106-56', '106-57', '106-58', '106-59', '106-6', '106-60', '106-7', '106-95', '106-96', '107-1', '107-105', '107-106', '107-107', '107-108', '107-109', '107-111', '107-113', '107-117', '107-119', '107-120', '107-121', '107-122', '107-127', '107-128', '107-129', '107-134', '107-135', '107-136', '107-137', '107-138', '107-139', '107-19', '107-2', '107-21', '107-26', '107-40', '107-47', '107-48', '107-49', '107-55', '107-56', '107-58', '107-59', '107-62', '107-71', '107-76', '107-77', '107-8', '107-83', '107-84', '107-89', '107-9', '107-90', '107-91', '107-92', '107-93', '107-94', '107-95', '107-96', '107-97', '107-98', '107-99', '108-43', '108-44', '108-63', '108-72', '108-73', '108-74', '108-75', '108-83', '108-84', '108-88', '108-94', '108-95', '117-51', '117-52', '117-53', '117-55', '117-56', '117-57', '118-1', '118-11', '118-12', '118-15', '118-16', '118-19', '118-2', '118-20', '118-21', '118-24', '118-25', '118-27', '118-29', '118-3', '118-30', '118-32', '118-33', '118-34', '118-35', '118-37', '118-38', '118-39', '118-4', '118-40', '118-41', '118-44', '118-46', '118-47', '118-48', '118-49', '118-5', '118-50', '118-51', '118-53', '118-54', '118-55', '118-57', '118-58', '118-59', '118-6', '118-60', '118-62', '118-63', '118-64', '118-65', '118-68', '118-69', '118-7', '118-70', '118-71', '118-74', '118-76', '118-77', '118-78', '118-79', '118-8', '118-80', '118-81', '118-83', '118-84', '118-85', '118-86', '119-113', '119-22', '119-23', '119-33', '119-46', '119-47', '119-51', '119-52', '119-53', '119-54', '119-55', '119-56', '119-85', '119-87', '119-89', '119-9', '119-92', '119-93', '119-94', '124-48', '124-58', '124-59', '124-60', '124-61', '124-62', '124-63', '124-64', '124-88', '124-89', '124-90', '125-109', '125-45', '125-46', '125-48', '125-87', '125-96', '132-153', '132-4', '133-11', '133-12', '133-14', '133-15', '133-21', '133-3', '133-43', '133-48', '133-49', '133-50', '133-51', '133-52', '133-53', '133-54', '133-55', '133-56', '133-61', '133-8', '133-9', '134-1', '136-2', '137-1', '14-44', '14-60', '156-26', '157-1', '157-23', '157-26', '157-3', '157-39', '157-49', '157-50', '157-51', '157-52', '157-53', '157-54', '157-69', '158-25', '158-28', '159-1', '159-2', '160-11', '160-14', '160-24', '160-25', '160-30', '160-36', '160-37', '160-38', '160-46', '160-48', '160-53', '160-54', '160-55', '160-57', '160-58', '160-59', '160-60', '160-61', '160-63', '160-64', '160-66', '160-67', '160-69', '160-70', '160-71', '160-72', '160-74', '160-76', '160-77', '160-83', '160-84', '160-85', '161-1', '161-2', '161-3', '161-5', '161-57', '161-58', '161-73', '161-76', '161-85', '161-91', '161-92', '161-93', '161-94', '162-10', '162-11', '162-14', '162-17', '162-18', '162-19', '162-26', '162-29', '162-31', '162-32', '162-35', '162-36', '162-4', '162-47', '162-48', '162-49', '162-51', '162-52', '162-54', '162-61', '162-62', '162-63', '162-64', '162-65', '162-66', '162-67', '162-68', '162-69', '162-7', '162-72', '162-73', '162-74', '162-9', '164-5', '164-7', '165-34', '165-40', '165-53', '165-55', '165-56', '165-57', '166-73', '166-80', '167-100', '167-102', '167-103', '167-11', '167-17', '167-2', '167-3', '167-30', '167-31', '167-33', '167-55', '167-56', '167-6', '167-65', '167-66', '167-68', '167-69', '167-70', '167-71', '167-72', '167-76', '167-87', '167-88', '167-90', '167-95', '167-96', '167-97', '167-98', '167-99', '168-13', '168-16', '168-20', '168-21', '168-22', '168-25', '168-32', '168-33', '168-36', '168-38', '168-4', '168-40', '168-41', '168-45', '168-47', '168-48', '168-49', '168-5', '168-50', '168-51', '168-52', '168-53', '168-54', '168-57', '168-58', '168-59', '168-6', '168-60', '168-64', '168-7', '169-100', '169-102', '169-12', '169-14', '169-15', '169-17', '169-18', '169-19', '169-3', '169-4', '169-42', '169-46', '169-47', '169-5', '169-50', '169-67', '169-68', '169-69', '169-7', '169-79', '169-8', '169-81', '169-82', '169-84', '169-85', '169-86', '169-88', '169-91', '169-93', '169-94', '169-95', '169-96', '169-98', '169-99', '170-19', '170-27', '170-28', '170-29', '170-30', '170-33', '170-34', '170-35', '170-36', '170-38', '170-39', '170-4', '170-5', '171-1', '172-102', '172-103', '172-104', '172-105', '172-106', '172-107', '172-108', '172-109', '172-12', '172-14', '172-15', '172-16', '172-18', '172-19', '172-2', '172-21', '172-24', '172-25', '172-26', '172-28', '172-29', '172-3', '172-30', '172-36', '172-37', '172-38', '172-41', '172-49', '172-50', '172-51', '172-57', '172-59', '172-60', '172-61', '172-62', '172-63', '172-65', '172-67', '172-68', '172-69', '172-70', '172-71', '172-73', '172-74', '172-98', '172-99', '173-1', '173-100', '173-101', '173-12', '173-13', '173-14', '173-15', '173-16', '173-18', '173-19', '173-20', '173-24', '173-27', '173-28', '173-29', '173-30', '173-34', '173-35', '173-36', '173-37', '173-38', '173-39', '173-4', '173-40', '173-41', '173-43', '173-47', '173-48', '173-5', '173-51', '173-53', '173-56', '173-57', '173-60', '173-61', '173-64', '173-65', '173-67', '173-71', '173-74', '173-75', '173-78', '173-79', '173-8', '173-80', '173-81', '173-82', '173-83', '173-84', '173-85', '173-86', '173-87', '173-88', '173-89', '173-9', '173-90', '173-91', '173-92', '173-93', '173-94', '173-96', '173-98', '173-99', '174-42', '174-44', '174-45', '174-49', '174-51', '174-53', '174-71', '187-59', '212-23', '212-24', '212-26', '212-27', '212-28', '212-29', '213-2A', '214-1', '214-12', '214-13', '214-14', '214-15', '214-2', '214-20', '214-21', '214-22', '214-23', '214-24', '214-26', '214-27', '214-28', '214-30', '214-32', '214-33', '214-35', '214-37', '214-4', '214-40', '214-41', '214-44', '214-48', '214-5', '214-51', '214-52', '214-53', '214-54', '214-55', '214-56', '214-58', '214-59', '214-6', '214-60', '214-61', '214-62', '214-63', '214-64', '214-65', '215-12', '215-19', '215-22', '215-24', '215-26', '215-33', '215-5', '215-57', '215-59', '215-60', '215-61', '215-62', '215-63', '215-64', '215-65', '215-66', '215-8', '215-9', '216-15', '216-18', '216-21', '216-23', '216-24', '216-26', '216-29', '216-3', '216-30', '216-32', '216-33', '216-34', '216-35', '216-36', '216-38', '216-39', '216-4', '216-6', '216-7', '216-8', '217-1', '217-11', '217-12', '217-18', '217-19', '217-2', '217-20', '217-21', '217-22', '217-23', '217-24', '217-3', '217-4', '217-5', '218-10', '218-11', '218-12', '218-13', '218-15', '218-33', '218-34', '218-8', '219-10', '219-11', '219-47', '219-7', '219-8', '224-12', '224-13', '265B-60', '265D-52', '265D-53', '265D-55', '265D-57', '265D-58', '265F-17', '267.2-261', '267.2-263', '267.2-266', '267.4-176', '267.4-247', '267.4-288', '267.4-305', '267.4-316', '267.4-319', '267.4-320', '267.4-322', '267.4-323', '267F-286', '267F-392', '267F-393', '268B-41', '268B-45', '268B-46', '268B-47', '268B-7', '268B-8', '268C-30', '268C-32', '268C-35', '268C-36', '268C-37', '269-127', '269-136', '269-138', '269.5-101', '269.5-102', '28-39', '29-34', '29-39', '29-45', '29-50', '30-35', '30-38', '30-40', '30-41', '30-42', '30-43', '30-44', '41-26', '43-63', '43-70', '43-71', '43-73', '43-76', '43-77', '43-78', '43A-16', '43A-24', '43A-28', '43A-29', '44-100', '44-101', '44-102', '44-104', '44-105', '44-106', '44-107', '44-71', '44-93', '44-95', '44-99', '47-83', '47-88', '47-90', '47-94', '48-129', '48-154', '48-156', '48-157', '48-158', '48-159', '48-20', '52A-19', '52A-21', '52A-22', '52A-31', '58-166', '75-10', '75-100', '75-102', '75-112', '75-113', '75-115', '75-123', '75-128', '75-130', '75-150', '75-151', '75-152', '75-153', '75-154', '75-166', '75-169', '75-171', '75-20', '75-24', '75-4', '75-44', '75-9', '88-10', '88-11', '88-12', '88-13', '88-14', '88-49', '88-50', '88-53', '88-54', '88-62', '88-63', '88-67', '88-72', '89-1', '89-10', '89-14', '89-15', '89-17', '89-19', '89-2', '89-21', '89-22', '89-23', '89-24', '89-25', '89-26', '89-28', '89-3', '89-34', '89-35', '89-36', '89-37', '89-38', '89-39', '89-4', '89-41', '89-42', '89-43', '89-44', '89-46', '89-49', '89-5', '89-50', '89-53', '89-54', '89-56', '89-57', '89-6', '89-60', '89-61', '89-62', '89-63', '89-64', '89-65', '89-66', '89-67', '89-68', '89-69', '89-7', '89-71', '89-72', '89-76', '89-78', '89-79', '89-8', '89-80', '89-81', '89-82', '89-85', '89-86', '89-87', '89-9', '89-90', '89-91', '89-93', '89-94', '89-95', '89-96', '89-97', '89-98', '90-100', '90-101', '90-102', '90-106', '90-107', '90-109', '90-11', '90-111', '90-122', '90-125', '90-127', '90-13', '90-131', '90-133', '90-14', '90-140', '90-141', '90-146', '90-148', '90-149', '90-150', '90-151', '90-152', '90-153', '90-154', '90-155', '90-158', '90-159', '90-16', '90-161', '90-162', '90-164', '90-165', '90-169', '90-170', '90-171', '90-172', '90-173', '90-174', '90-175', '90-176', '90-177', '90-18', '90-181', '90-182', '90-183', '90-184', '90-185', '90-187', '90-188', '90-189', '90-19', '90-190', '90-191', '90-192', '90-193', '90-194', '90-20', '90-21', '90-36', '90-42', '90-43', '90-44', '90-45', '90-52', '90-55', '90-70', '90-71', '90-72', '90-73', '90-74', '90-75', '90-76', '90-77', '90-78', '90-80', '90-81', '90-84', '90-85', '90-86', '90-87', '90-88', '90-89', '90-90', '90-91', '90-92', '90-93', '90-95', '90-96', '90-97', '90-98', '91-104', '91-107', '91-112', '91-117', '91-118', '91-119', '91-120', '91-121', '91-122', '91-13', '91-14', '91-15', '91-16', '91-17', '91-180', '91-181', '91-184', '91-185', '91-186', '91-191', '91-192', '91-194', '91-195', '91-20', '91-200', '91-202', '91-204', '91-205', '91-206', '91-207', '91-208', '91-23', '91-29', '91-32', '91-35', '91-4', '91-52', '91-61', '91-63', '91-64', '91-68', '91-7', '91-70', '91-72', '91-75', '91-76', '91-78', '91-79', '91-81', '91-82', '91-83', '91-87', '91-88', '91-89', '91-9', '91-90', '91-91', '91-92', '91-93', '91-95', '91-96', '91-97', '91-98', '91-99', '92-103', '92-117', '92-118', '92-119', '92-120', '92-123', '92-124', '92-127', '92-130', '92-132', '92-57', '92-58', '92-62', '92-69', '92-88', '92-95', '92-96', '93-1', '93-100', '93-101', '93-104', '93-105', '93-107', '93-108', '93-109', '93-110', '93-111', '93-112', '93-113', '93-115', '93-118', '93-119', '93-12', '93-120', '93-121', '93-124', '93-125', '93-126', '93-127', '93-129', '93-13', '93-130', '93-131', '93-133', '93-134', '93-135', '93-136', '93-137', '93-15', '93-16', '93-17', '93-18', '93-19', '93-2', '93-22', '93-23', '93-24', '93-26', '93-27', '93-28', '93-29', '93-3', '93-32', '93-34', '93-35', '93-36', '93-4', '93-40', '93-41', '93-42', '93-43', '93-44', '93-47', '93-48', '93-49', '93-5', '93-50', '93-51', '93-52', '93-53', '93-54', '93-55', '93-56', '93-57', '93-58', '93-6', '93-60', '93-64', '93-67', '93-68', '93-69', '93-7', '93-71', '93-72', '93-73', '93-74', '93-75', '93-76', '93-78', '93-79', '93-8', '93-80', '93-81', '93-86', '93-89', '93-9', '93-90', '93-93', '93-94', '93-97', '93-98', '93-99', '94-172', '94-179', '94-180', '94-69']"
  },
  {
    "Query": "Find parcels that are either zoned for commercial use or within 200 meters of a restaurant, and have at least 20000 square feet of land area.",
    "Code": "import geopandas as gpd\nimport pandas as pd\nfrom shapely.ops import unary_union\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Project to a metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n\n# CONSTRAINT 1: Filter for parcels larger than 20000 sq ft\nlarge_parcels = parcels_proj[parcels_proj['land_area'] > 20000]\n\n# CONDITION 1: Commercial parcels\ncommercial_parcels = large_parcels[large_parcels['use_code'].astype(str).isin(commercial_use_codes)]\n\n# CONDITION 2: Parcels within 200m of a restaurant\n# Filter POI for restaurants\nrestaurants = poi_proj[poi_proj['business_type'] == 'restaurant']\n\n# Create 200m buffer around restaurants\nrestaurant_buffers = [geom.buffer(200) for geom in restaurants.geometry]\nrestaurant_union_buffer = unary_union(restaurant_buffers)\n\n# Find parcels within 200m of restaurants\nparcels_near_restaurants = large_parcels[large_parcels.geometry.intersects(restaurant_union_buffer)]\n\n# Combine both sets of parcels (OR condition)\ncombined_parcels = pd.concat([commercial_parcels, parcels_near_restaurants]).drop_duplicates('ml')\n\n# Convert back to original CRS\nresult_parcels = combined_parcels.to_crs(parcels.crs)\n\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} parcels meeting criteria\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['10-16', '10-33', '10-67', '100-62', '100-68', '100-86', '103-113', '103-20', '103-21', '104-109', '104-130', '104-133', '105-66', '106-105', '106-122', '106-124', '106-125', '107-117', '107-122', '107-127', '107-136', '107-137', '107-138', '107-76', '108-15', '108-22', '108-32', '108-43', '108-44', '108-84', '109-44', '11-145', '11-146', '11-40', '11-43', '110-61', '111-60', '114-130', '116-117', '116-12', '116-16', '116-43', '116-83', '116-98', '118-33', '119-22', '119-56', '119-65', '119-8', '119-89', '119-9', '119-94', '12-17', '12-19', '120-40', '121-113', '121-114', '121-2', '121-6', '121-94', '122-184', '122-199', '124-90', '124-91', '126-172', '126-173', '126-174', '127-132', '128-30', '128-63', '128-68', '128-70', '128-71', '128-72', '128-73', '129-11', '129-47', '129-54', '129-58', '129-59', '13-16', '13-21', '13-23', '130-121', '130-144', '130-168', '131-65', '131-68', '131-70', '132-137', '132-152', '132-157', '132-97', '133-3', '134-1', '134-2', '134-56', '134-59', '135-123', '135-20', '135-25', '136-2', '136-37', '137-1', '137-2', '137-39', '137-42', '138-2', '138-33', '14-1038', '14-36', '14-41', '14-44', '14-45', '14-47', '14-50', '14-51', '14-58', '14-59', '14-60', '14-64', '140-134', '140-138', '140-156', '140-157', '140-61', '142-45', '143-11', '143-17', '143-20', '144-1', '146A-110', '146A-145', '146A-37', '15-28', '15-29', '15-3', '15-30', '152-17', '152-25', '152-51', '153-59', '153-66', '153-71', '153-85', '153-88', '154-91', '155-29', '155-30', '155-33', '156-26', '156-97', '157-51', '157-64', '157-69', '158-25', '159-1', '16-28', '16-30', '16-32', '16-34', '16-6', '160-14', '160-60', '161-58', '161-73', '161-76', '161-85', '162-61', '162-74', '164-5', '164-7', '165-24', '165-53', '165-55', '165-56', '165-57', '166-70', '166-72', '166-80', '167-11', '167-96', '167-97', '168-36', '169-12', '169-4', '169-5', '169-69', '169-94', '169-98', '17-64', '17-74', '17-84', '170-19', '170-35', '170-39', '170-4', '171-1', '172-109', '172-59', '172-60', '172-61', '172-65', '172-73', '172-99', '175-75', '176-13', '176-53', '176-66', '177-55', '178-122', '178-52', '179-87', '18-47', '18-74', '18-75', '18-77', '181-189', '181-207', '181-88', '182-84', '182-86', '183-127', '183-128', '184-106', '184-192', '184-197', '184-198', '186-96', '187-59', '188-113', '189-100', '189-102', '189-104', '189-57', '19-22', '19-23', '19-24', '191-112', '192-125', '192-151', '192-174', '194-77', '194-89', '195-143', '195-156', '195-169', '196-163', '196-164', '197-4', '199-32', '199-98', '1A-104', '1A-105', '1A-109', '1A-171', '1A-172', '1A-174', '1A-179', '1A-182', '1A-183', '1A-184', '1A-186', '1A-189', '1A-190', '1A-191', '1A-195', '1A-196', '1A-197', '1A-200', '1A-201', '1A-207', '1A-209', '1A-210', '1A-212', '1A-213', '1A-215', '1A-6', '1A-67', '1A-69', '1A-81', '1A-82', '1A-86', '1A-87', '20-104', '20-71', '20-75', '200-100', '201-112', '203A-76', '203A-77', '203B-52', '203B-57', '203B-66', '203B-69', '204-150', '208-15', '209-52', '211-34', '211-53', '212-29', '212-58', '213-2A', '215-13', '215-19', '215-50', '216-26', '216-34', '216-4', '217-11', '217-12', '217-13', '217-18', '217-5', '218-55', '219-37', '219-7', '219-8', '22-109', '22-132', '221-91', '223-15', '223-25', '223-44', '223-45', '223-67', '224-16', '224-32', '224-39', '224-42', '224-8', '225-3', '226-2', '226-30', '226-35', '226-59', '226-65', '226-67', '227-22', '227-90', '229-110', '231-33', '231-43', '231-44', '231-50', '231-52', '232-6', '232-64', '232-7', '234-178', '236-109', '237-11', '237-36', '237-63', '237-73', '237-79', '239-21', '24-123', '241-10', '241-14', '242B-1000', '242B-56', '252-160', '252-172', '252A-153', '252A-155', '252A-157', '253-167', '260-46', '260-77', '260-80', '261-124', '261-167', '264-102', '264-105', '264-106', '264-34', '264-97', '265A-29', '265A-43', '265A-7', '265B-26', '265B-28', '265B-34', '265B-56', '265B-59', '265B-60', '265B-61', '265C-25', '265D-52', '265D-53', '265D-55', '265D-57', '265D-58', '266-31', '266-32', '266-33', '266-34', '266-39', '266-40', '267.1-278', '267.1-281', '267.1-282', '267.2-261', '267.2-263', '267.2-264', '267.2-266', '267.2-267', '267.2-270', '267.2-272', '267.2-273', '267.3-226', '267.3-228', '267.3-268', '267.3-275', '267.3-277', '267.3-278', '267.3-279', '267.3-28', '267.3-280', '267.3-285', '267.4-176', '267.4-209', '267.4-218', '267.4-221', '267.4-254', '267.4-264', '267.4-284', '267.4-285', '267.4-288', '267.4-295', '267.4-305', '267.4-307', '267.4-310', '267.4-311', '267.4-312', '267.4-313', '267.4-316', '267.4-319', '267.4-320', '267.4-322', '267.4-323', '267C-70', '267C-71', '267C-91', '267C-92', '267C-95', '267D-282', '267D-285', '267D-293', '267D-294', '267D-303', '267D-305', '267D-310', '267D-319', '267D-322', '267D-325', '267D-332', '267D-333', '267D-334', '267D-339', '267D-340', '267E-234', '267E-242', '267E-244', '267E-269', '267E-282', '267E-283', '267E-284', '267E-285', '267E-291', '267E-293', '267F-274', '267F-275', '267F-279', '267F-281', '267F-283', '267F-286', '267F-293', '267F-296', '267F-298', '267F-299', '267F-301', '267F-392', '268A-40', '268A-53', '268B-45', '268B-47', '268C-30', '268C-32', '269-127', '269-138', '269.5-101', '269.5-102', '27-81', '27-82', '27-86', '27-93', '27-97', '27-99', '271-44', '273-1', '273-2', '273-35', '273-47', '273-51', '274-1G', '28-23', '28-33', '28-39', '29-34', '29-39', '29-49', '29-50', '30-35', '30-38', '30-40', '30-41', '30-42', '30-43', '30-44', '31-13', '31-15', '31-20', '31-21', '31-22', '32-37', '32-52', '32-53', '33-105', '33-88', '33-93', '34-138', '34-141', '35-100', '35-85', '35-87', '35-89', '35-95', '37-127', '38-1', '39-169', '39-173', '39-174', '39-179', '40-243', '40-258', '41-26', '41-29', '41-36', '41-37', '41-38', '42-70', '42-86', '42-87', '42-97', '43-63', '43-70', '43-71', '43-73', '43-76', '43-77', '43-78', '43A-16', '43A-19', '43A-21', '43A-24', '43A-28', '44-100', '44-104', '44-105', '44-106', '44-71', '44-93', '44-95', '44-99', '46-12', '47-83', '47-88', '47-90', '47-94', '47-97', '48-129', '48-154', '48-156', '48-157', '48-159', '52A-19', '52A-21', '52A-22', '52A-31', '53-61', '53-64', '53-71', '53-72', '54-10', '54-16', '54-19', '54-25', '54-29', '54-7', '55-16', '55-18', '55-19', '55-22', '55-23', '55-26', '55-27', '55-9', '56-4', '56-8', '56-9', '57-169', '57-173', '58-120', '58-158', '58-161', '58-165', '58-166', '58-95', '62-18', '62-34', '62-41', '62-42', '63-118', '63-132', '63-134', '63-135', '64-6', '64-7', '65-45', '65-47', '66-12', '66-124', '66-152', '66-153', '66-73', '66-74', '66-82', '66-99', '67-44', '67-47', '67-48', '67-49', '67-55', '67-65', '67-66', '67-67', '68-34', '68-47', '68-56', '68-57', '68-58', '68-59', '68-60', '68-74', '68-75', '68-76', '68-77', '69-148', '69-159', '69-165', '69-173', '69-179', '69-180', '69-182', '69-183', '69-62', '7-113', '7-115', '7-29', '70-34', '70-85', '70-86', '71-55', '71-56', '71-57', '72A-1', '73-124', '74-127', '75-170', '75-4', '76-116', '76-135', '76-96', '78-249', '8-61', '8-75', '8-76', '8-86', '8-90', '8-91', '80-110', '80-165', '80-175', '81-103', '81-105', '81-106', '81-107', '82-8', '84-101', '85-1', '85-63', '85-76', '86-105', '86-107', '87-156', '88-10', '89-28', '9-31', '9-40', '9-41', '9-61', '9-89', '9-90', '90-169', '90-183', '90-184', '90-193', '90-95', '90-96', '91-195', '91-207', '91-208', '91-72', '92-117', '92-118', '92-119', '92-124', '92-125', '92-126', '92-127', '92-128', '92-130', '92-132', '94-158', '94-38', '95-57', '95-71', '95-72', '95-73', '95-74', '95-75', '95-76', '95-78', '97-130', '97-32', '98-38', '99-81']"
  },

  {
    "Query": "Find parcels within 350 meters of Porter Square that have lower commercial competition than Harvard Square.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Project to a metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define locations\nporter_square = Point(-71.1226, 42.3782)\nharvard_square = Point(-71.1189, 42.3736)\n\n# Create GeoDataFrames for locations\nporter_gdf = gpd.GeoDataFrame(geometry=[porter_square], crs=parcels.crs)\nharvard_gdf = gpd.GeoDataFrame(geometry=[harvard_square], crs=parcels.crs)\n\n# Project to metric CRS\nporter_gdf_proj = porter_gdf.to_crs(epsg=26986)\nharvard_gdf_proj = harvard_gdf.to_crs(epsg=26986)\n\n# CONSTRAINT 1: Within 350m of Porter Square\nporter_buffer = porter_gdf_proj.buffer(350).iloc[0]\nparcels_near_porter = parcels_proj[parcels_proj.geometry.intersects(porter_buffer)].copy()\n\n# Define commercial business types\ncommercial_types = [\n    'restaurant', 'clothing_store', 'department_store', 'grocery_store', \n    'convenience_store', 'furniture_store', 'hardware_store', 'electronics_store',\n    'coffee_shop', 'retail', 'bank', 'pharmacy'\n]\n\n# Filter POI for commercial businesses\ncommercial_poi = poi_proj[poi_proj['business_type'].isin(commercial_types)]\n\n# Function to count nearby commercial businesses\ndef count_nearby_businesses(point_geom, commercial_geoms, buffer_distance=300):\n    buffered_geom = point_geom.buffer(buffer_distance)\n    count = sum(1 for geom in commercial_geoms if buffered_geom.contains(geom))\n    return count\n\n# Get commercial geometries\ncommercial_geoms = commercial_poi.geometry.tolist()\n\n# Calculate competition around Harvard Square (base comparison)\nharvard_competition = count_nearby_businesses(harvard_gdf_proj.geometry.iloc[0], commercial_geoms)\n\n# Calculate competition around each parcel near Porter\ndef calculate_competition(parcel_geom, commercial_geoms, buffer_distance=300):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    count = sum(1 for geom in commercial_geoms if buffered_geom.contains(geom))\n    return count\n\nparcels_near_porter['competition'] = parcels_near_porter.apply(\n    lambda row: calculate_competition(row.geometry, commercial_geoms),\n    axis=1\n)\n\n# Filter for parcels with less competition than Harvard Square\nlow_competition_parcels = parcels_near_porter[parcels_near_porter['competition'] < harvard_competition]\n\n# Convert back to original CRS\nresult_parcels = low_competition_parcels.to_crs(parcels.crs)\n\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} parcels near Porter Square with less competition than Harvard Square\")\nprint(f\"Harvard Square competition: {harvard_competition} businesses\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['157-23', '157-26', '157-39', '157-52', '157-54', '157-69', '158-25', '158-28', '167-11', '167-2', '167-3', '167-69', '167-88', '167-96', '167-97', '169-3', '169-4', '169-69', '169-88', '169-94', '169-95', '169-96', '170-19', '170-27', '170-28', '170-29', '170-30', '170-33', '170-34', '170-35', '170-36', '170-38', '170-39', '170-4', '170-5', '171-1', '172-102', '172-103', '172-104', '172-105', '172-106', '172-107', '172-108', '172-109', '172-12', '172-14', '172-15', '172-16', '172-18', '172-19', '172-2', '172-21', '172-24', '172-25', '172-26', '172-28', '172-29', '172-3', '172-30', '172-36', '172-37', '172-38', '172-41', '172-49', '172-50', '172-51', '172-57', '172-59', '172-60', '172-61', '172-62', '172-63', '172-65', '172-67', '172-68', '172-69', '172-70', '172-71', '172-73', '172-74', '172-98', '172-99', '173-1', '173-100', '173-101', '173-13', '173-14', '173-15', '173-16', '173-18', '173-19', '173-20', '173-24', '173-27', '173-28', '173-34', '173-35', '173-36', '173-39', '173-4', '173-40', '173-41', '173-43', '173-47', '173-5', '173-51', '173-53', '173-56', '173-57', '173-60', '173-61', '173-64', '173-67', '173-71', '173-74', '173-78', '173-79', '173-8', '173-80', '173-82', '173-83', '173-84', '173-85', '173-86', '173-87', '173-88', '173-89', '173-9', '173-90', '173-91', '173-92', '173-93', '173-94', '173-96', '173-98', '173-99', '212-27', '212-28', '212-29', '213-2A', '214-1', '214-12', '214-13', '214-14', '214-15', '214-2', '214-20', '214-21', '214-22', '214-23', '214-24', '214-26', '214-27', '214-28', '214-30', '214-32', '214-33', '214-35', '214-37', '214-4', '214-40', '214-41', '214-44', '214-46', '214-47', '214-48', '214-5', '214-50', '214-51', '214-52', '214-53', '214-54', '214-55', '214-56', '214-58', '214-59', '214-6', '214-60', '214-61', '214-62', '214-63', '214-64', '214-65', '214-7', '214-8', '215-12', '215-13', '215-19', '215-22', '215-24', '215-26', '215-33', '215-35', '215-5', '215-57', '215-59', '215-60', '215-61', '215-62', '215-63', '215-64', '215-65', '215-66', '215-8', '215-9', '216-15', '216-18', '216-21', '216-23', '216-24', '216-26', '216-29', '216-3', '216-30', '216-32', '216-33', '216-34', '216-35', '216-36', '216-38', '216-39', '216-4', '216-6', '216-7', '216-8', '217-1', '217-11', '217-12', '217-13', '217-18', '217-19', '217-2', '217-20', '217-21', '217-22', '217-23', '217-24', '217-3', '217-4', '217-5', '218-10', '218-11', '218-12', '218-13', '218-15', '218-34', '218-8', '219-8', '224-12', '224-13', '224-8']"
  },
  {
    "Query": "Find commercial parcels with at least 5 restaurants within 400 meters but no more than 2 competing retail businesses within 200 meters.",
    "Code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi     = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Project\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj     = poi.to_crs(epsg=26986)\n\n# Commercial use codes\ncomm_codes = ['300','302','316','323','324','325','326','327','330','332','334','340','341','343','345','346','353','362','375','404','406','0340','0406']\ndf = parcels_proj[parcels_proj['use_code'].astype(str).isin(comm_codes)].copy()\n\n# Restaurants and retail competitors\nrest = poi_proj[poi_proj['business_type']=='restaurant']\nretail_comp = poi_proj[poi_proj['business_type'].isin(['retail','department_store','clothing_store'])]\nrest_geoms = rest.geometry.tolist()\nretail_geoms = retail_comp.geometry.tolist()\n\n# Count nearby POI\ndef count_nearby(geom, geoms, dist):\n    buf = geom.buffer(dist)\n    return sum(1 for pt in geoms if buf.contains(pt))\n\ndf.loc[:, 'nearby_restaurants'] = df.geometry.apply(lambda g: count_nearby(g, rest_geoms, 400))\ndf1 = df[df['nearby_restaurants'] >= 5].copy()\n\ndf1.loc[:, 'nearby_retail'] = df1.geometry.apply(lambda g: count_nearby(g, retail_geoms, 200))\nresult = df1[df1['nearby_retail'] <= 2]\n\n# Print results\nprint(sorted(result['ml'].tolist()))",
    "Answer": "['100-62', '100-68', '102-25', '102-46', '105-53', '105-58', '107-117', '108-54', '108-80', '109-22', '109-50', '109-51', '11-40', '110-16', '110-18', '110-21', '110-55', '110-63', '110-87', '110-90', '110-91', '114A-120', '114A-66', '116-100', '116-117', '116-12', '116-94', '117-1', '117-25', '117-29', '117-56', '118-1', '118-34', '118-67', '118-79', '119-90', '119-93', '119-95', '12-19', '120-17', '120-48', '120-74', '121-13', '121-2', '121-94', '122-12', '125-73', '125-80', '126-131', '126-27', '127-119', '127-139', '128-63', '128-70', '128-71', '128-72', '129-11', '129-55', '129-58', '13-16', '13-23', '134-33', '134-59', '136-15', '139-83', '14-26', '14-36', '14-39', '14-44', '14-45', '14-47', '14-49', '14-58', '14-64', '140-148', '141-80', '142-43', '142-44', '15-28', '15-29', '15-3', '15-30', '15-31', '150-114', '154-111', '154-64', '154-65', '154-73', '156-55', '157-26', '16-23', '16-32', '160-48', '160-76', '160-77', '160-83', '160-84', '160-85', '162-36', '162-73', '166-106', '166-13', '166-24', '166-33', '166-35', '166-37', '166-52', '166-77', '17-10', '17-74', '17-84', '170-39', '172-29', '173-65', '176-15', '176-64', '178-1', '178-106', '178-117', '178-118', '178-133', '178-21', '178-43', '178-79', '179-42', '179-75', '179-87', '18-73', '18-74', '18-76', '180-57', '181-65', '181-80', '181-88', '182-8', '182-84', '182-88', '182-89', '182-90', '182-98', '183-100', '183-119', '183-97', '184-109', '184-155', '184-159', '184-168', '184-191', '184-193', '184-31', '186-85', '189-57', '189-72', '19-10', '19-22', '19-23', '190-33', '191-112', '191-65', '191-85', '192-121', '192-156', '192-177', '192-39', '192-73', '192-74', '192-75', '195-59', '196-123', '196-153', '196-154', '198-28', '199-30', '199-31', '199-67', '199-90', '1A-105', '1A-172', '1A-189', '1A-190', '1A-192', '1A-200', '1A-201', '1A-209', '1A-211', '1A-213', '1A-70', '20-103', '20-31', '20-75', '20-82', '20-83', '20-92', '200-22', '200-79', '21-115', '21-120', '21-121', '21-124', '21-16', '216-7', '219-37', '22-109', '226-46', '226-67', '228-33', '228-55', '229-117', '229-131', '229-135', '229-150', '23-146', '23-149', '23-156', '23-90', '230-116', '230-71', '230-97', '231-27', '234-178', '24-133', '260-32', '260-46', '260-73', '260-74', '260-76', '261-112', '261-186', '261-6', '261-7', '261-77', '262-116', '265A-29', '265A-31', '265A-35', '265A-40', '265A-43', '265A-46', '265A-7', '265B-26', '265B-28', '265B-61', '265D-53', '267.3-278', '267.3-285', '267.4-209', '267.4-247', '267.4-284', '267.4-288', '267.4-295', '267.4-296', '267.4-305', '267.4-307', '267.4-313', '267.4-319', '267.4-322', '267.4-323', '267C-70', '267C-71', '267D-329', '267E-234', '267E-244', '267E-280', '267E-282', '267E-284', '267E-285', '267F-274', '267F-279', '267F-281', '267F-283', '267F-293', '267F-296', '267F-301', '267F-391', '268B-8', '268C-32', '268C-35', '269-138', '27-34', '27-82', '273-2', '273-20', '273-29', '273-40', '273-51', '28-23', '28-31', '29-50', '30-35', '30-38', '30-40', '30-41', '30-42', '31-15', '31-20', '32-53', '34-116', '34-28', '34-8', '35-34', '35-36', '36-137', '36-164', '36-189', '36-248', '37-20', '39-173', '39-179', '39-88', '40-153', '41-26', '41-29', '41-36', '41-37', '41-38', '42-13', '42-33', '42-70', '42-81', '42-86', '42-87', '42-91', '42-94', '42-97', '42-99', '43-70', '43-71', '43-73', '43-76', '43-77', '43-78', '43A-16', '43A-21', '43A-24', '43A-28', '44-100', '44-104', '44-105', '44-106', '44-99', '46-12', '47-94', '47-97', '48-158', '54-19', '54-25', '55-18', '63-128', '63-131', '63-132', '63-134', '63-135', '64-6', '66-153', '67-14', '67-47', '67-48', '67-66', '67-67', '68-19', '68-47', '68-50', '68-76', '68-77', '69-148', '69-159', '69-161', '69-162', '69-165', '69-173', '69-179', '69-182', '69-183', '69-62', '7-115', '7-31', '7-34', '7-35', '7-37', '70-22', '70-74', '70-86', '70-90', '70-91', '70-92', '71-55', '74-1', '74-6', '74-8', '75-128', '75-170', '75-44', '77-41', '79-22', '8-75', '8-76', '80-172', '80-175', '80-3', '80-51', '81-100', '81-103', '81-104', '81-21', '81-3', '81-50', '82-31', '82-57', '83-1', '83-15', '83-7', '83-80', '83-90', '83-92', '83-98', '83-99', '84-1', '84-101', '84-12', '84-67', '84-85', '84-91', '84-97', '85-66', '85-76', '86-84', '87-153', '88-45', '88-48', '88-53', '9-31', '90-127', '90-13', '90-14', '90-18', '90-20', '91-191', '91-52', '91-63', '91-64', '91-7', '91-70', '91-81', '92-127', '94-6', '94-7', '95-71', '95-72', '95-74', '95-75', '95-76', '95-78', '95-79', '96-109', '96-110', '96-124', '96-152', '96-98', '97-111', '99-51']"
  },
  {
    "Query": "Find parcels that are zoned for educational use within 300 meters of at least 3 restaurants and within 500 meters of a subway station.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\nfrom shapely.ops import unary_union\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi     = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Project\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj     = poi.to_crs(epsg=26986)\n\n# Educational use codes\nedu_codes = ['140','934','940','9403','941','9410','9413','942','9420','943','956']\nedu = parcels_proj[parcels_proj['use_code'].astype(str).isin(edu_codes)].copy()\n\n# Subway stations buffer 500m\nstations = [Point(-71.1189,42.3736), Point(-71.1031,42.3656), Point(-71.0865,42.3625), Point(-71.1226,42.3782), Point(-71.1429,42.3954)]\nsubway_buf = unary_union([s.buffer(500) for s in gpd.GeoSeries(stations, crs=parcels.crs).to_crs(epsg=26986).geometry])\nedu1 = edu[edu.geometry.intersects(subway_buf)].copy()\n\n# Count restaurants within 300m\nrest = poi_proj[poi_proj['business_type']=='restaurant']\nrest_geoms = rest.geometry.tolist()\nedu1.loc[:, 'nearby_restaurants'] = edu1.geometry.apply(lambda g: sum(1 for pt in rest_geoms if g.buffer(300).contains(pt)))\nresult = edu1[edu1['nearby_restaurants'] >= 3]\n\n# Print results\nprint(sorted(result['ml'].tolist()))",
    "Answer": "['104-109', '106-28', '132-137', '132-152', '133-3', '133-8', '133-9', '134-1', '134-3', '136-2', '136-20', '136-21', '136-34', '136-39', '136-9', '137-2', '137-4', '137-42', '143-11', '143-17', '143-20', '144-1', '156-107', '156-23', '156-46', '156-47', '156-82', '157-20', '157-61', '157-62', '157-64', '157-68', '157-69', '157-8', '159-1', '160-30', '160-36', '160-37', '160-38', '160-54', '160-55', '160-60', '160-61', '161-1', '161-3', '161-5', '161-58', '161-73', '161-76', '161-85', '161-93', '161-94', '162-10', '162-11', '162-32', '162-35', '162-4', '162-47', '162-48', '162-49', '162-51', '162-52', '162-61', '162-7', '164-5', '166-73', '167-11', '167-95', '167-96', '167-97', '167-98', '167-99', '168-32', '168-4', '168-57', '169-12', '169-14', '169-69', '169-8', '169-94', '170-19', '170-28', '170-35', '170-5', '172-59', '172-71', '212-29', '212-35', '212-58', '213-2A', '216-35', '217-12', '217-18', '224-16', '224-37', '224-39', '227-90', '274-1B', '274-1C', '274-1E', '43-63', '47-83', '47-88', '47-90', '48-129', '48-157', '48-159', '52A-21', '52A-22', '52A-31', '53-61', '70-98', '70-99', '71-57', '92-69', '93-4']"
  },
  {
    "Query": "Find parcels within 350 meters of Porter Square that have lower commercial competition than Harvard Square.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi      = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Project to a metric CRS\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj     = poi.to_crs(epsg=26986)\n\n# Define points\nporter = Point(-71.1226, 42.3782)\nharvard = Point(-71.1189, 42.3736)\n\n# GeoDataFrames for points\nporter_gdf  = gpd.GeoDataFrame(geometry=[porter], crs=parcels.crs).to_crs(epsg=26986)\nharvard_gdf = gpd.GeoDataFrame(geometry=[harvard], crs=parcels.crs).to_crs(epsg=26986)\n\n# Parcels within 350m of Porter Square\nporter_buf    = porter_gdf.geometry.buffer(350).iloc[0]\nnear_porter   = parcels_proj[parcels_proj.geometry.intersects(porter_buf)].copy()\n\n# Commercial POI types\ncommercial_types = [\n    'restaurant','clothing_store','department_store','grocery_store',\n    'convenience_store','furniture_store','hardware_store','electronics_store',\n    'coffee_shop','retail','bank','pharmacy'\n]\ncommercial_poi   = poi_proj[poi_proj['business_type'].isin(commercial_types)]\ncommercial_geoms = commercial_poi.geometry.tolist()\n\n# Function to count nearby businesses\ndef count_comp(point_geom, geoms, dist=300):\n    buf = point_geom.buffer(dist)\n    return sum(1 for g in geoms if buf.contains(g))\n\n# Harvard competition baseline\nharvard_comp = count_comp(harvard_gdf.geometry.iloc[0], commercial_geoms)\n\n# Compute competition for each parcel near Porter\nnear_porter.loc[:, 'competition'] = near_porter.geometry.apply(lambda g: count_comp(g, commercial_geoms))\n\n# Filter for lower competition\nresult = near_porter[near_porter['competition'] < harvard_comp]\n\n# Output parcel IDs\nids = sorted(result['ml'].tolist())\nprint(ids)",
    "Answer": "['157-23', '157-26', '157-39', '157-52', '157-54', '157-69', '158-25', '158-28', '167-11', '167-2', '167-3', '167-69', '167-88', '167-96', '167-97', '169-3', '169-4', '169-69', '169-88', '169-94', '169-95', '169-96', '170-19', '170-27', '170-28', '170-29', '170-30', '170-33', '170-34', '170-35', '170-36', '170-38', '170-39', '170-4', '170-5', '171-1', '172-102', '172-103', '172-104', '172-105', '172-106', '172-107', '172-108', '172-109', '172-12', '172-14', '172-15', '172-16', '172-18', '172-19', '172-2', '172-21', '172-24', '172-25', '172-26', '172-28', '172-29', '172-3', '172-30', '172-36', '172-37', '172-38', '172-41', '172-49', '172-50', '172-51', '172-57', '172-59', '172-60', '172-61', '172-62', '172-63', '172-65', '172-67', '172-68', '172-69', '172-70', '172-71', '172-73', '172-74', '172-98', '172-99', '173-1', '173-100', '173-101', '173-13', '173-14', '173-15', '173-16', '173-18', '173-19', '173-20', '173-24', '173-27', '173-28', '173-34', '173-35', '173-36', '173-39', '173-4', '173-40', '173-41', '173-43', '173-47', '173-5', '173-51', '173-53', '173-56', '173-57', '173-60', '173-61', '173-64', '173-67', '173-71', '173-74', '173-78', '173-79', '173-8', '173-80', '173-82', '173-83', '173-84', '173-85', '173-86', '173-87', '173-88', '173-89', '173-9', '173-90', '173-91', '173-92', '173-93', '173-94', '173-96', '173-98', '173-99', '212-27', '212-28', '212-29', '213-2A', '214-1', '214-12', '214-13', '214-14', '214-15', '214-2', '214-20', '214-21', '214-22', '214-23', '214-24', '214-26', '214-27', '214-28', '214-30', '214-32', '214-33', '214-35', '214-37', '214-4', '214-40', '214-41', '214-44', '214-46', '214-47', '214-48', '214-5', '214-50', '214-51', '214-52', '214-53', '214-54', '214-55', '214-56', '214-58', '214-59', '214-6', '214-60', '214-61', '214-62', '214-63', '214-64', '214-65', '214-7', '214-8', '215-12', '215-13', '215-19', '215-22', '215-24', '215-26', '215-33', '215-35', '215-5', '215-57', '215-59', '215-60', '215-61', '215-62', '215-63', '215-64', '215-65', '215-66', '215-8', '215-9', '216-15', '216-18', '216-21', '216-23', '216-24', '216-26', '216-29', '216-3', '216-30', '216-32', '216-33', '216-34', '216-35', '216-36', '216-38', '216-39', '216-4', '216-6', '216-7', '216-8', '217-1', '217-11', '217-12', '217-13', '217-18', '217-19', '217-2', '217-20', '217-21', '217-22', '217-23', '217-24', '217-3', '217-4', '217-5', '218-10', '218-11', '218-12', '218-13', '218-15', '218-34', '218-8', '219-8', '224-12', '224-13', '224-8']"
  },
  {
    "Query": "Find mixed-use parcels within 450 meters of a grocery store and within 350 meters of at least 2 coffee shops.",
    "Code": "import geopandas as gpd\nfrom shapely.ops import unary_union\n\n# Load and project data\nparcels = gpd.read_file('cambridge_parcels.geojson').to_crs(epsg=26986)\npoi     = gpd.read_file('cambridge_poi_processed.geojson').to_crs(epsg=26986)\n\n# Mixed-use codes and filter\nmixed_codes = ['0101','0104','0105','0111','0112','0121','013','031','0340','0406','041','0942']\nmixed = parcels[parcels['use_code'].astype(str).isin(mixed_codes)].copy()\n\n# Buffer grocery stores by 450m\ngrocery = poi[poi['business_type']=='grocery_stores']\nbuf_groc = unary_union(grocery.geometry.buffer(450))\nmixed_groc = mixed[mixed.geometry.intersects(buf_groc)].copy()\n\n# Buffer each parcel by 350m for coffee shops\nbuffers = mixed_groc[['ml','geometry']].copy()\nbuffers['geometry'] = buffers.geometry.buffer(350)\n\n# Spatial join to count coffee shops\ncoffee = poi[poi['SUB_CATEGORY']=='Snack and Nonalcoholic Beverage Bars']\njoined = gpd.sjoin(buffers, coffee, how='left', predicate='intersects', lsuffix='buf', rsuffix='coffee')\ncounts = joined.groupby('ml').size().reset_index(name='coffee_count')\n\n# Merge counts back and filter ≥2\nmixed_groc = mixed_groc.merge(counts, on='ml', how='left').fillna({'coffee_count': 0})\nresult = mixed_groc[mixed_groc['coffee_count'] >= 2]\n\n# Output parcel IDs\nresult_ids = sorted(result['ml'].tolist())\nprint(result_ids)",
    "Answer": "['10-67', '105-107', '105-112', '105-117', '105-119', '105-128', '105-134', '105-16', '105-17', '105-55', '105-59', '106-103', '106-105', '106-122', '106-125', '106-51', '107-1', '107-138', '108-23', '108-28', '108-34', '108-70', '108-79', '108-8', '108-90', '109-23', '109-40', '109-87', '111-53', '113-38', '114-37', '114A-16', '116-54', '116-68', '116-98', '117-24', '118-32', '119-113', '119-22', '119-4', '119-7', '119-8', '119-9', '12-17', '120-40', '120-45', '120-64', '120-73', '121-102', '121-112', '121-114', '125-39', '125-42', '125-52', '126-159', '128-30', '129-32', '131-33', '132-106', '133-11', '133-21', '133-26', '133-29', '133-31', '133-41', '133-43', '133-53', '133-55', '134-50', '134-56', '135-26', '135-87', '14-1038', '14-59', '141-14', '150-41', '152-1', '152-47', '152-51', '152-7', '153-14', '155-32', '156-24', '156-68', '157-39', '16-33', '160-24', '160-25', '160-46', '160-53', '160-70', '160-74', '161-2', '162-62', '162-72', '162-74', '162-9', '165-40', '166-53', '168-16', '168-40', '168-45', '169-85', '17-17', '17-76', '173-34', '173-48', '173-75', '174-32', '174-62', '174-66', '176-85', '176-86', '177-46', '177-55', '179-51', '179-52', '179-74', '179-81', '18-26', '18-47', '181-207', '183-130', '189-100', '19-18', '19-22', '191-103', '191-118', '191-74', '192-152', '192-38', '1A-109', '1A-174', '1A-210', '20-15', '20-68', '200-47', '200-48', '200-68', '21-110', '21-111', '21-12', '21-18', '21-19', '21-84', '227-25', '227-99', '229-110', '229-165', '229-67', '23-110', '23-111', '23-112', '23-126', '23-127', '23-13', '23-138', '23-141', '23-142', '23-17', '23-38', '23-39', '23-46', '23-48', '23-49', '23-61', '23-62', '23-65', '23-84', '23-94', '230-2', '230-4', '230-46', '230-70', '24-22', '24-98', '24-99', '263-53', '265D-58', '267F-299', '268B-45', '27-29', '273-47', '29-34', '31-13', '34-127', '34-144', '34-145', '34-146', '34-2', '34-24', '34-26', '34-27', '34-3', '34-40', '34-41', '34-42', '34-43', '34-44', '34-45', '34-7', '35-32', '35-33', '35-37', '35-50', '35-51', '35-52', '35-53', '35-60', '35-85', '36-118', '36-119', '36-120', '36-125', '36-167', '36-168', '36-176', '36-196', '36-197', '36-210', '36-217', '36-26', '37-12', '40-138', '40-84', '42-58', '70-51', '70-87', '74-7', '75-32', '76-29', '76-52', '76-62', '77-39', '77-63', '78-24', '79-21', '79-25', '79-73', '79-92', '79-97', '8-61', '8-86', '80-118', '80-128', '80-147', '80-2', '80-52', '80-58', '82-11', '82-12', '82-54', '82-56', '82-58', '82-68', '82-71', '82-79', '83-11', '83-35', '83-6', '83-67', '83-8', '83-93', '83-94', '83-95', '83-96', '84-105', '84-20', '84-22', '84-23', '84-36', '84-48', '84-68', '84-87', '85-101', '85-26', '85-27', '85-28', '85-64', '85-7', '85-83', '85-95', '86-111', '86-49', '86-82', '87-137', '87-34', '87-40', '88-17', '88-18', '88-31', '88-69', '88-71', '89-73', '90-101', '90-111', '90-194', '91-206', '91-207', '91-66', '92-126', '92-132', '93-49', '93-71', '93-81']"
  },
  {
    "Query": "Find industrial parcels within 8000 meters of the Charles River and more than 100 meters away from any residential area.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import LineString\nfrom shapely.ops import unary_union\n\n# Load and project parcels\nparcels = gpd.read_file('cambridge_parcels.geojson').to_crs(epsg=26986)\n\n# Industrial and residential use codes\nind_codes = ['400','401','407','413']\nres_codes = ['101','1014','102','1028','104','105','109','1094','1095','1098','111','112','113','114','121','970','9700','9421']\nindustrial  = parcels[parcels['use_code'].astype(str).isin(ind_codes)].copy()\nresidential = parcels[parcels['use_code'].astype(str).isin(res_codes)].copy()\n\n# Define Charles River line and buffer 8000m\ndcoords = [(-71.139,42.351),(-71.127,42.356),(-71.115,42.358),(-71.104,42.359),(-71.090,42.361),(-71.076,42.365),(-71.067,42.368)]\nriver = LineString(dcoords)\nriver_gdf = gpd.GeoDataFrame(geometry=[river], crs='EPSG:4326').to_crs(epsg=26986)\nbuf_river = river_gdf.geometry.buffer(8000).iloc[0]\nindustrial_near = industrial[industrial.geometry.intersects(buf_river)].copy()\n\n# Build residential 100m buffer and exclude\nres_buf = unary_union(residential.geometry.buffer(100))\nresult = industrial_near[~industrial_near.geometry.intersects(res_buf)].copy()\n\n# Output parcel IDs\nresult_ids = sorted(result['ml'].tolist())\nprint(result_ids)",
    "Answer": "['267.3-226', '267.4-254', '267.4-264', '267C-62', '267C-73'] "
  },
  {
    "Query": "Find residential parcels larger than 10000 square feet within 200 meters of at least 2 educational institutions.",
    "Code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi      = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Project\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj     = poi.to_crs(epsg=26986)\n\n# Residential codes & filter\nres_codes = ['101','1014','102','1028','104','105','109','1094','1095','1098','111','112','113','114','121','970','9700','9421']\nres = parcels_proj[parcels_proj['use_code'].isin(res_codes)].copy()\nres = res[res['land_area'] > 10000].copy()\n\n# Education POIs & count\nedu = poi_proj[poi_proj['TOP_CATEGORY']=='Colleges, Universities, and Professional Schools']\nedu_geoms = edu.geometry.tolist()\n\ndef count_edu(geom):\n    buf = geom.buffer(200)\n    return sum(1 for g in edu_geoms if buf.contains(g))\n\nres.loc[:, 'edu_count'] = res.geometry.apply(count_edu)\nresult = res[res['edu_count'] >= 2]\n\n# Output\nids = sorted(result['ml'].tolist())\nprint(ids)",
    "Answer": "['10-32', '10-33', '106-49', '107-121', '107-122', '107-127', '107-139', '107-19', '108-22', '108-25', '108-32', '108-43', '108-44', '108-48', '108-84', '109-44', '110-65', '110-67', '112-106', '112-66', '112-78', '113-1', '113-2', '113-5', '113-6', '115-16', '115-5', '115-57', '116-2', '117-103', '117-15', '117-20', '117-5', '117-53', '117-70', '117-73', '117-76', '118-51', '118-7', '119-112', '119-36', '119-56', '119-65', '119-82', '119-87', '124-48', '124-63', '124-90', '124-91', '127-126', '127-132', '129-9', '132-138', '132-156', '132-157', '132-25', '132-54', '132-97', '134-20', '134-32', '134-36', '134-39', '134-4', '134-46', '134-54', '134-55', '135-20', '135-23', '135-25', '135-5', '136-37', '137-35', '137-38', '139-23', '139-25', '139-26', '139-8', '139-86', '142-112', '142-18', '142-45', '142-85', '145-10', '145-11', '145-14', '145-15', '145-28', '145-29', '145-30', '145-39', '145-42', '145-43', '145-46', '145-9', '146-42', '146-48', '146-49', '146-54', '146-62', '146-7', '146-8', '146-82', '146-87', '146-90', '146-91', '147-12', '147-26', '147-29', '147-30', '147-31', '147-39', '147-59', '147-61', '153-35', '153-36', '153-59', '153-6', '153-66', '153-7', '153-87', '153-88', '154-91', '155-28', '155-30', '156-12', '156-26', '156-33', '156-86', '157-19', '157-23', '157-51', '16-34', '16-6', '165-56', '166-70', '166-72', '166-80', '168-47', '168-7', '170-34', '170-36', '172-108', '172-109', '172-12', '172-25', '172-30', '172-65', '172-73', '172-99', '173-101', '173-60', '173-67', '173-71', '173-91', '176-13', '176-34', '176-53', '176-58', '176-66', '176-8', '177-16', '177-17', '177-18', '177-19', '177-4', '177-5', '177-78', '177-8', '178-114', '178-121', '178-122', '178-132', '178-52', '179-2', '180-33', '181-47', '183-123', '183-128', '183-74', '184-106', '184-192', '184-197', '189-102', '189-104', '189-91', '189-92', '190-21', '190-271', '192-125', '192-151', '192-5', '195-169', '196-35', '199-110', '199-98', '1A-171', '1A-196', '1A-6', '1A-82', '1A-86', '1A-87', '200-57', '200-90', '201-112', '208-15', '217-5', '225-3', '225-5', '226-2', '226-3', '227-100', '227-22', '230-148', '25-36', '264-106', '264-97', '265D-52', '265D-57', '267.4-176', '267.4-316', '267.4-320', '267C-66', '267C-92', '267F-286', '267F-392', '268B-47', '44-107', '48-154', '52A-19', '7-113', '72A-1', '73-124', '75-84', '75-91', '76-116', '76-130', '76-85', '77-66', '77-77', '80-165', '81-107', '81-20', '82-107', '82-47', '82-8', '86-107', '86-45', '87-103', '87-156', '87-37', '87-94', '88-49', '88-50', '89-28', '89-50', '90-183', '91-17', '91-23', '91-72', '92-118', '92-119', '92-124', '92-130', '93-135', '99-77']"
  },
  {
    "Query": "Find parcels between 1000-10000 square feet within 800 meters of Kendall/MIT station in census tracts where at least 5% of residents have advanced degrees.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\ncensus = gpd.read_file('cambridge_census_cambridge_pct.geojson')\n\n# Kendall point\nkendall = Point(-71.0865, 42.3625)\nkdf = gpd.GeoDataFrame(geometry=[kendall], crs=parcels.crs).to_crs(epsg=26986)\n\n# Project\nparcels_proj = parcels.to_crs(epsg=26986)\ncensus_proj  = census.to_crs(epsg=26986)\n\n# Size filter\nmid = parcels_proj[(parcels_proj['land_area'] >= 1000) & (parcels_proj['land_area'] <= 10000)].copy()\n\n# Buffer Kendall 800m\nkbuf = kdf.geometry.buffer(800).iloc[0]\nnear_k = mid[mid.geometry.intersects(kbuf)].copy()\n\n# Spatial join and advanced degree filter\njoined = gpd.sjoin(near_k, census_proj, how='left', predicate='within')\nresult = joined[joined['pct_adv_deg'] >= 0.05]\n\n# Output\nids = sorted(result['ml'].tolist())\nprint(ids)",
    "Answer": "['40-148', '40-52', '40-53', '42-13', '42-14', '42-18', '42-19', '42-21', '42-22', '42-23', '42-57', '42-58', '42-68', '42-81', '42-91', '42-92', '42-93', '42-95', '42-98', '42-99', '76-24', '76-54', '76-55', '77-52', '77-57', '77-88', '77-89']"
  },
  {
    "Query": "Find residential parcels less than 100 meters from a grocery store but at least 800 meters from any industrial area.",
    "Code": "import geopandas as gpd\nfrom shapely.ops import unary_union\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi      = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Project\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj     = poi.to_crs(epsg=26986)\n\n# Codes\nres_codes = ['101','1014','102','1028','104','105','109','1094','1095','1098','111','112','113','114','121','970','9700','9421']\nind_codes = ['400','401','407','413']\nres    = parcels_proj[parcels_proj['use_code'].isin(res_codes)].copy()\nindus  = parcels_proj[parcels_proj['use_code'].isin(ind_codes)]\n\n# Grocery buffer 100m\ngroc = poi_proj[poi_proj['business_type']=='grocery_stores']\nb_groc = unary_union(groc.geometry.buffer(100))\nnear_g = res[res.geometry.intersects(b_groc)].copy()\n\n# Industrial buffer 800m and exclude\nb_ind = unary_union(indus.geometry.buffer(800))\nresult = near_g[~near_g.geometry.intersects(b_ind)]\n\n# Output\nids = sorted(result['ml'].tolist())\nprint(ids)",
    "Answer": "['138-34', '138-35', '138-6', '138-7', '138-8', '139-12', '139-13', '140-107', '140-108', '140-109', '140-110', '140-111', '140-112', '140-113', '140-114', '140-115', '140-116', '140-144', '140-145', '140-149', '141-100', '141-101', '141-102', '141-18', '141-19', '141-25', '141-26', '141-34', '141-37', '141-38', '141-39', '141-40', '141-41', '141-42', '141-43', '141-53', '141-54', '141-55', '141-56', '141-57', '141-58', '141-59', '141-65', '141-72', '141-73', '141-74', '141-75', '141-76', '141-78', '141-79', '141-81', '141-83', '141-84', '141-85', '141-86', '141-87', '141-92', '141-96', '141-97', '141-98', '141-99', '142-102', '142-103', '142-115', '142-126', '142-130', '142-131', '142-90', '146A-111', '146A-122', '146A-145', '146A-74', '146A-89', '146A-96', '146A-97', '155-2', '155-28', '155-3', '155-30', '155-38', '155-39', '156-100', '156-2', '156-26', '156-63', '156-70', '156-71', '156-72', '156-86', '156-99', '168-5', '168-6', '169-15', '169-17', '169-18', '173-101', '173-12', '173-13', '173-14', '173-15', '173-29', '173-30', '173-36', '173-37', '173-38', '173-41', '173-43', '173-56', '173-57', '173-67', '173-71', '173-81', '173-9', '174-14', '174-16', '174-17', '174-18', '174-21', '174-22', '174-23', '174-35', '174-41', '174-42', '174-44', '174-67', '174-68', '174-69', '174-70', '174-71', '174-76', '174-78', '174-79', '174-84', '174-85', '174-86', '174-87', '174-88', '174-89', '174-90', '174-91', '174-92', '175-44', '177-29', '177-38', '177-41', '177-42', '177-45', '177-75', '177-76', '177-77', '177-78', '177-80', '177-84', '178-101', '178-102', '178-52', '178-92', '178-93', '178-94', '178-99', '179-12', '179-13', '179-14', '179-3', '179-36', '179-37', '179-38', '179-4', '179-40', '179-5', '179-57', '179-58', '179-59', '179-6', '179-76', '179-77', '179-79', '179-9', '181-189', '181-196', '181-197', '181-198', '181-199', '181-20', '181-200', '181-201', '181-202', '181-203', '181-21', '181-22', '181-23', '181-27', '181-28', '181-29', '181-37', '181-39', '181-40', '181-47', '181-53', '181-54', '181-55', '181-56', '181-64', '181-67', '181-68', '181-69', '181-71', '181-72', '181-79', '181-84', '198-45', '199-18', '199-20', '199-21', '199-22', '199-23', '199-24', '199-25', '199-33', '199-85', '199-91', '199-92', '200-28', '200-29', '200-44', '200-45', '200-50', '200-74', '200-82', '200-83', '200-88', '200-90', '252-144', '252-146', '252-151', '252-169', '252-170', '252-171', '252-9', '252A-132', '252A-133', '253-103', '253-105', '253-131', '253-157', '253-158', '253-163', '253-164', '253-6', '253-96', '254-39', '254-40', '254-52', '254-53']"
  },
  {
    "Query": "Find office parcels with at least 7500 square feet that are within 400 meters of both a restaurant and a coffee shop.",
    "Code": "import geopandas as gpd\nfrom shapely.ops import unary_union\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi      = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Project\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj     = poi.to_crs(epsg=26986)\n\n# Office codes\noffice_codes = ['340','341','343','345','346']\noffice = parcels_proj[parcels_proj['use_code'].isin(office_codes)].copy()\n\noffice = office[office['land_area'] > 6000].copy()  # lowered from 7500\n\n# Buffers\nrest = poi_proj[poi_proj['business_type']=='restaurant']\ncof  = poi_proj[poi_proj['SUB_CATEGORY']=='Snack and Nonalcoholic Beverage Bars']\nbuf_r = unary_union(rest.geometry.buffer(400))\nbuf_c = unary_union(cof.geometry.buffer(400))\n\n# Intersection\no1 = office[office.geometry.intersects(buf_r)]\nresult = o1[o1.geometry.intersects(buf_c)]\n\n# Output\nids = sorted(result['ml'].tolist())\nprint(ids)",
    "Answer": "['10-31', '10-38', '105-77', '105-81', '105-89', '106-123', '107-135', '107-136', '109-22', '109-51', '11-40', '110-16', '114A-66', '116-117', '117-29', '118-34', '119-95', '12-19', '121-13', '121-2', '121-94', '128-70', '129-11', '13-16', '13-23', '133-23', '133-33', '133-51', '134-59', '14-26', '14-36', '14-47', '14-58', '15-3', '15-30', '15-31', '152-52', '16-23', '160-11', '160-14', '160-48', '160-57', '160-59', '160-69', '162-36', '162-67', '165-53', '165-55', '165-57', '168-13', '168-21', '168-22', '168-25', '168-33', '168-36', '168-41', '168-59', '168-60', '168-64', '169-102', '169-42', '169-50', '169-84', '169-93', '169-98', '169-99', '17-74', '17-84', '172-29', '174-26', '175-68', '178-1', '178-106', '178-117', '178-133', '179-42', '18-74', '181-88', '182-84', '182-98', '183-119', '183-97', '184-168', '189-57', '19-23', '190-33', '191-112', '192-39', '1A-105', '1A-172', '1A-190', '1A-200', '1A-201', '1A-209', '1A-70', '20-31', '21-120', '216-7', '226-67', '23-149', '23-90', '236-148', '24-133', '252-160', '254-86', '261-77', '265A-29', '265A-31', '265B-59', '265D-53', '267.2-267', '267.3-253', '267.4-288', '267.4-305', '267C-70', '267D-282', '267D-329', '267F-274', '267F-279', '267F-281', '267F-283', '267F-293', '267F-296', '267F-301', '267F-391', '268C-32', '268C-35', '27-82', '273-29', '273-40', '273-51', '28-23', '28-31', '29-50', '31-20', '39-173', '39-88', '41-36', '41-38', '42-70', '42-86', '42-87', '42-97', '43-70', '43-73', '43-78', '43A-21', '44-100', '44-104', '44-105', '44-99', '46-12', '47-94', '54-25', '55-18', '68-50', '69-159', '70-22', '70-74', '70-86', '8-75', '8-76', '80-175', '81-103', '83-1', '83-92', '84-1', '84-97', '85-76', '87-153', '88-53', '9-41', '90-13', '90-133', '90-14', '90-161', '90-169', '90-170', '90-20', '91-118', '91-208', '91-87', '93-73', '93-75', '93-99', '95-76', '95-79', '96-109', '96-124', '96-98']"
  },
  {
    "Query": "find large commercial parcels (over 5000 sq ft) close to popular shopping areas, preferably in locations with high consumer spending and educational institutions",
    "Code": "import geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import Point\n\n# Load and project data\nparcels = gpd.read_file('cambridge_parcels.geojson').to_crs(epsg=26986)\npoi     = gpd.read_file('cambridge_poi_processed.geojson').to_crs(epsg=26986)\nspend   = pd.read_csv('cambridge_spend_processed.csv')\n\n# Merge spending into POI and fill NaNs\npoi_spend = poi.merge(spend, on='PLACEKEY', how='left')\npoi_spend['RAW_TOTAL_SPEND'] = poi_spend['RAW_TOTAL_SPEND'].fillna(0.0)\n\n# Filter commercial parcels >5000 sq ft\ncomm_codes = [\n    '300','302','316','323','324','325','326','327',\n    '330','332','334','340','341','343','345','346',\n    '353','362','375','404','406','0340','0406'\n]\nlarge_comm = parcels[(parcels['use_code'].isin(comm_codes)) & (parcels['land_area'] > 5000)].copy()\n\n# Buffer shopping areas (malls, centers) by 500m\nshops = poi[poi['SUB_CATEGORY']== 'Malls']\nbuf_shops = shops.geometry.buffer(500).union_all()\nnear_shops = large_comm[large_comm.geometry.intersects(buf_shops)].copy()\n\n# Compute average spending within 500m of each parcel\ndef assign_spend(geom):\n    buf = geom.buffer(500)\n    vals = poi_spend[poi_spend.geometry.within(buf)]['RAW_TOTAL_SPEND']\n    return float(vals.mean()) if not vals.empty else 0.0\nnear_shops['parcel_spend'] = near_shops.geometry.apply(assign_spend)\n\n# Ensure numeric dtype and drop NaNs before quantile\nnear_shops['parcel_spend'] = pd.to_numeric(near_shops['parcel_spend'], errors='coerce')\nif near_shops['parcel_spend'].notna().any():\n    threshold = near_shops['parcel_spend'].quantile(0.8)\n    high_spend = near_shops[near_shops['parcel_spend'] >= threshold].copy()\nelse:\n    high_spend = near_shops.copy()\n\n# Buffer educational institutions 500m and filter\nunis = poi[poi['SUB_CATEGORY'].str.contains('Colleges, Universities, and Professional Schools', case=False, na=False)]\nbuf_unis = unis.geometry.buffer(500).union_all()\nfinal = high_spend[high_spend.geometry.intersects(buf_unis)].copy()\n\n# Print parcel IDs\nresult_ids = sorted(final['ml'].tolist())\nprint(result_ids)",
    "Answer": "['152-25', '152-52', '178-1', '178-106', '178-117', '178-118', '178-21', '179-42', '179-75', '179-87', '180-57', '181-80', '181-88', '200-22', '267.4-247', '267.4-319', '267E-279', '267F-274', '267F-279', '267F-281', '267F-283', '267F-293', '267F-391']"
  },
  {
    "Query": "find large mixed-use parcels near college campuses, preferably in areas with high educational attainment and diverse dining options",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load and project data\nparcels = gpd.read_file('cambridge_parcels.geojson').to_crs(epsg=26986)\npoi     = gpd.read_file('cambridge_poi_processed.geojson').to_crs(epsg=26986)\ncensus  = gpd.read_file('cambridge_census_cambridge_pct.geojson').to_crs(epsg=26986)\n\n# Mixed-use >10000 sq ft\ndmixed_codes = ['0101','0104','0105','0111','0112','0121','013','031','0340','0406','041','0942']\nlarge_mix = parcels[(parcels['use_code'].isin(dmixed_codes)) & (parcels['land_area'] > 10000)].copy()\n\n# Buffer college campuses 500m\ncolleges = poi[poi['SUB_CATEGORY'].str.contains('Colleges, Universities, and Professional Schools', case=False, na=False)]\nbuf_college = colleges.geometry.buffer(500).union_all()\nnear_college = large_mix[large_mix.geometry.intersects(buf_college)].copy()\n\n# Join centroids to census tracts and filter pct_adv_deg >1%\npts = near_college.copy()\npts.geometry = pts.geometry.centroid\njoined = gpd.sjoin(pts, census, how='inner', predicate='within', lsuffix='mix', rsuffix='cens')\nhigh_ed = joined[joined['pct_adv_deg'] > 0.01].copy()\n\n# Count restaurants within 300m for dining diversity\nrestaurants = poi[poi['business_type']=='restaurant']\ndef dining_count(geom):\n    buf = geom.buffer(300)\n    return sum(1 for pt in restaurants.geometry if buf.intersects(pt))\nhigh_ed['dining_count'] = [dining_count(g) for g in high_ed.geometry]\n\ndiverse = high_ed[high_ed['dining_count'] >= 1]\n\n# Print parcel IDs\nresult_ids = sorted(diverse['ml'].tolist())\nprint(result_ids)",
    "Answer": "['106-103', '106-105', '106-122', '106-125', '107-138', '108-23', '108-79', '116-98', '133-43', '152-51', '160-70', '184-9', '70-87', '91-206', '91-207', '92-132']"
  },
  {
    "Query": "locate retail parcels (use_code for retail) within 1000m of harvard square, larger than 6000 sq ft, and in areas where at least 5% of residents have advanced degrees",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load and project data\nparcels = gpd.read_file('cambridge_parcels.geojson').to_crs(epsg=26986)\npoi     = gpd.read_file('cambridge_poi_processed.geojson').to_crs(epsg=26986)\ncensus  = gpd.read_file('cambridge_census_cambridge_pct.geojson').to_crs(epsg=26986)\n\n# Drop conflicting join column if present\nif 'index_right' in census.columns:\n    census = census.drop(columns=['index_right'])\n\n# Retail use codes\nretail_use_codes = ['323','324','325','326','327','330']\n\n# Filter retail parcels >6000 sq ft\nretail = parcels[(parcels['use_code'].isin(retail_use_codes)) & (parcels['land_area'] > 6000)]\n\n# Buffer Harvard Square 1000m\nhs_buf = gpd.GeoSeries([Point(-71.1189,42.3736)], crs='EPSG:4326').to_crs(epsg=26986).buffer(1000).union_all()\nnear_hs = retail[retail.geometry.intersects(hs_buf)]\n\n# Join centroids to census and filter pct_adv_deg ≥ 5%\npts = near_hs.copy()\npts.geometry = pts.geometry.centroid\njoined = gpd.sjoin(pts, census, how='inner', predicate='within', lsuffix='parc', rsuffix='cens')\nhigh_ed = joined[joined['pct_adv_deg'] >= 0.01]\n\n# Result IDs\nresult_ids = sorted(high_ed['ml'].unique().tolist())\nprint(result_ids)",
    "Answer": "['156-25']"
  },
  {
    "Query": "identify commercial parcels (any use_code indicating commercial use) within 500m of harvard square, larger than 7500 sq ft, and in census tracts with high educational attainment (pct_adv_deg above 1%)",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load and project data\nparcels = gpd.read_file('cambridge_parcels.geojson').to_crs(epsg=26986)\npoi     = gpd.read_file('cambridge_poi_processed.geojson').to_crs(epsg=26986)\ncensus  = gpd.read_file('cambridge_census_cambridge_pct.geojson').to_crs(epsg=26986)\n\n# Commercial use codes\ncommercial_use_codes = ['300','302','316','323','324','325','326','327','330','332','334','340','341','343','345','346','353','362','375','404','406','0340','0406']\n# Filter commercial parcels >7500 sq ft\ncomm = parcels[(parcels['use_code'].isin(commercial_use_codes)) & (parcels['land_area'] > 7500)]\n\n# Buffer Harvard Square 500m\nhs = Point(-71.1189, 42.3736)\nhs_series = gpd.GeoSeries([hs], crs='EPSG:4326')\nhs_buf = hs_series.to_crs(epsg=26986).buffer(500).union_all()\n\n# Parcels within 500m of Harvard Square\nnear_hs = comm[comm.geometry.intersects(hs_buf)]\n\n# Join centroids to census and filter pct_adv_deg > 1%\npts = near_hs.copy()\npts.geometry = pts.geometry.centroid\njoined = gpd.sjoin(pts, census, how='inner', predicate='within', rsuffix='right')\nhigh_ed = joined[joined['pct_adv_deg'] > 0.01]\n\n# Result IDs\nresult_ids = sorted(high_ed['ml'].unique().tolist())\nprint(result_ids)",
    "Answer": "['133-51', '160-11', '160-14', '160-48', '160-59', '160-69']"
  },
  {
    "Query": "identify retail parcels (use_code for retail) not within 500m of any competitor, larger than 8000 sq ft, and in areas with high percentage of working-age residents (pct_18_64 above 50%)",
    "Code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi     = gpd.read_file('cambridge_poi_processed.geojson')\ncensus  = gpd.read_file('cambridge_census_cambridge_pct.geojson')\n\n# Retail use codes\nretail_use_codes = ['323','324','325','326','327','330']\n\n# Project to metric CRS\nparcels = parcels.to_crs(epsg=26986)\npoi     = poi.to_crs(epsg=26986)\ncensus  = census.to_crs(epsg=26986)\n\n# Filter retail parcels >8000 sq ft\nretail = parcels[\n    parcels['use_code'].isin(retail_use_codes) &\n    (parcels['land_area'] > 8000)\n].copy()\n\n# Competitor POIs\ncompetitors = poi[poi['SUB_CATEGORY']== 'Malls']\ncomp_geoms = competitors.geometry.tolist()\n\n# Function to test no competitors within 500m\ndef no_competitors(geom):\n    buf = geom.buffer(500)\n    return not any(buf.intersects(pt) for pt in comp_geoms)\n\n# Apply filter\nfiltered = retail[retail.geometry.apply(no_competitors)].copy()\n\n# Join centroids to census tracts and filter pct_18_64 > 50%\npts = filtered.copy()\npts.geometry = pts.geometry.centroid\njoined = gpd.sjoin(\n    pts, census, how='inner', predicate='within', rsuffix='right'\n)\nhigh_work = joined[joined['pct_18_64'] > 0.5]\n\n# Result IDs\nresult_ids = sorted(high_work['ml'].unique().tolist())\nprint(result_ids)",
    "Answer": "['110-91', '140-148', '156-25', '175-37', '175-75', '184-159', '189-72', '191-65', '191-85', '230-71', '267E-234', '83-80', '84-101', '84-91']"
  },
  {
    "Query": "find office parcels (use_code indicating office) in areas with high educational attainment (pct_adv_deg above 1%), larger than 5000 sq ft, and within 400m of harvard university",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load and project data\nparcels = gpd.read_file('cambridge_parcels.geojson').to_crs(epsg=26986)\npoi     = gpd.read_file('cambridge_poi_processed.geojson').to_crs(epsg=26986)\ncensus  = gpd.read_file('cambridge_census_cambridge_pct.geojson').to_crs(epsg=26986)\n\n# Drop conflicting join column if present\nif 'index_right' in census.columns:\n    census = census.drop(columns=['index_right'])\n\n# Office use codes\noffice_use_codes = ['340','341','343','345','346']\n\n# Filter office parcels >5000 sq ft\noffices = parcels[(parcels['use_code'].isin(office_use_codes)) & (parcels['land_area'] > 5000)]\n\n# Harvard University POIs\nunis = poi[poi['SUB_CATEGORY'].str.contains('Colleges, Universities, and Professional Schools', case=False, na=False)]\nuni_buf = unis.geometry.buffer(400).union_all()\n\n# Offices within 400m of any university\nnear_uni = offices[offices.geometry.intersects(uni_buf)]\n\n# Join centroids to census tracts and filter pct_adv_deg > 10%\npts = near_uni.copy()\npts.geometry = pts.geometry.centroid\njoined = gpd.sjoin(pts, census, how='inner', predicate='within', lsuffix='offc', rsuffix='cens')\nhigh_ed = joined[joined['pct_adv_deg'] > 0.01]\n\n# Result IDs\nresult_ids = sorted(high_ed['ml'].unique().tolist())\nprint(result_ids)",
    "Answer": "['106-123', '107-135', '107-136', '109-22', '109-51', '110-16', '114A-66', '116-117', '117-1', '117-29', '117-56', '118-34', '133-51', '160-11', '160-14', '160-48', '160-58', '160-59', '160-69', '1A-190', '1A-200', '1A-201', '20-103', '20-31', '21-120', '23-90', '24-133', '31-20', '43A-21', '68-19', '68-50', '69-159', '70-22', '70-74', '70-86', '80-175', '84-1', '84-97', '85-76', '91-118', '91-208', '91-87', '93-73', '93-75', '93-99', '95-79', '96-109', '96-110', '96-98']"
  },
  {
    "Query": "locate commercial parcels that are between 10000-15000 sq ft, within 200 meters of a subway station, and in areas with very low competition (fewer than 100 businesses of any type within 100m)",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load and project data\nparcels = gpd.read_file('cambridge_parcels.geojson').to_crs(epsg=26986)\npoi     = gpd.read_file('cambridge_poi_processed.geojson').to_crs(epsg=26986)\n\n# Commercial use codes\ncommercial_use_codes = [\n    '300','302','316','323','324','325','326','327',\n    '330','332','334','340','341','343','345','346',\n    '353','362','375','404','406','0340','0406'\n]\n\n# Filter for commercial parcels between 10000 and 15000 sq ft\ncomm = parcels[\n    parcels['use_code'].isin(commercial_use_codes) &\n    parcels['land_area'].between(10000, 15000)\n].copy()\n\n# Buffer five MBTA subway stations by 200m\nstations = [\n    Point(-71.1189, 42.3736),  # Harvard Square\n    Point(-71.1031, 42.3656),  # Central Square\n    Point(-71.0865, 42.3625),  # Kendall/MIT\n    Point(-71.1226, 42.3782),  # Porter Square\n    Point(-71.1429, 42.3954)   # Alewife\n]\nsubway = gpd.GeoSeries(stations, crs='EPSG:4326')\nsubway = subway.to_crs(epsg=26986)\nbuf200 = subway.buffer(200).union_all()\n\n# Keep only parcels within 200m of any station\nnear_subway = comm[comm.geometry.intersects(buf200)].copy()\n\n# Prepare competitor geometries (any POI)\ncomp_points = poi.geometry.tolist()\n\n# Count competitors within 100m of each parcel\ndef count_competitors(parcel_geom):\n    return sum(1 for pt in comp_points if parcel_geom.distance(pt) <= 100)\n\nnear_subway['comp_count'] = near_subway.geometry.apply(count_competitors)\n\n# Filter parcels with fewer than 100 competitors\nlow_comp = near_subway[near_subway['comp_count'] < 100]\n\n# Output result IDs\nresult_ids = sorted(low_comp['ml'].unique().tolist())\nprint(result_ids)",
    "Answer": "['160-48', '172-29', '48-158']"
  },
  {
    "Query": "Find single-family residential parcels larger than 8,000 sq ft that are within 400 m of a public park and have at least three supermarkets (or grocery stores) within 500 m.",
    "Code": "import geopandas as gpd\n\n# 1) Load & project\nparcels = gpd.read_file('cambridge_parcels.geojson').to_crs(epsg=26986)\npoi     = gpd.read_file('cambridge_poi_processed.geojson').to_crs(epsg=26986)\n\n# 2) Filter single-family residential parcels > 8,000 sq ft\nsf_codes = ['101','1014','0101']\nres_sf = parcels[\n    parcels['use_code'].isin(sf_codes) &\n    (parcels['land_area'] > 8000)\n].copy()\n\n# 3) Identify parcels within 400 m of a Nature Park\nparks       = poi[poi['SUB_CATEGORY'] == 'Nature Parks and Other Similar Institutions']\npark_buf    = parks.geometry.buffer(400).union_all()\nnear_parks  = res_sf[res_sf.geometry.intersects(park_buf)].copy()\n\n# 4) Count supermarkets within 500 m\ngroceries        = poi[poi['SUB_CATEGORY'] == 'Supermarkets and Other Grocery (except Convenience) Stores']\ngrocery_geoms    = groceries.geometry.tolist()\ncounts = []\nfor geom in near_parks.geometry:\n    buf = geom.buffer(500)\n    counts.append(sum(1 for pt in grocery_geoms if buf.contains(pt)))\nnear_parks['supermarkets_nearby'] = counts\n\n# 5) Keep parcels with ≥ 3 supermarkets\nfinal = near_parks[near_parks['supermarkets_nearby'] >= 3]\n\n# 6) Output parcel IDs\nresult_ids = sorted(final['ml'].tolist())\nprint(result_ids)",
    "Answer": "['108-35', '113-10', '114-6', '115-16', '116-120', '116-6', '117-17', '153-34', '154-39', '167-2', '167-28', '167-3', '167-88', '168-47', '170-36', '172-24', '172-25', '172-26', '172-30', '172-67', '172-68', '192-112', '192-96', '219-12', '89-50']"
  }
]
