[
  {
    "Query": "Find commercial parcels within 500 meters of Harvard Square.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n# Define Harvard Square location (fixed coordinates)\nharvard_square = Point(-71.1189, 42.3736)\n\n# Create GeoDataFrame for Harvard Square\nharvard_gdf = gpd.GeoDataFrame(geometry=[harvard_square], crs=parcels.crs)\n\n# Convert to projected CRS for accurate distance measurement\nharvard_gdf_proj = harvard_gdf.to_crs(epsg=26986)  # Massachusetts state plane\nparcels_proj = parcels.to_crs(epsg=26986)  # Massachusetts state plane\n\n# Define commercial use codes consistently\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n# Filter for commercial parcels using use code (more reliable than general_us)\ncommercial_parcels_proj = parcels_proj[parcels_proj['use_code'].astype(str).str.startswith(('3', '4'))]\n\n# Create 500m buffer around Harvard Square in projected coordinates\nharvard_buffer_proj = harvard_gdf_proj.buffer(500) \n\n# Find commercial parcels within 500m of Harvard Square\nresult_parcels_proj = commercial_parcels_proj[commercial_parcels_proj.geometry.intersects(harvard_buffer_proj.iloc[0])]\n\n# Convert back to original CRS\nresult_parcels = result_parcels_proj.to_crs(parcels.crs)\n\n# Sort by ml (parcel ID) for consistency in results\nresult_parcels = result_parcels.sort_values('ml')\n\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} commercial parcels within 500m of Harvard Square\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['133-12', '133-14', '133-15', '133-20', '133-23', '133-27', '133-28', '133-36', '133-48', '133-49', '133-51', '133-52', '133-54', '133-56', '134-7', '135-123', '136-15', '137-13', '159-2', '160-11', '160-14', '160-48', '160-57', '160-58', '160-59', '160-63', '160-64', '160-66', '160-67', '160-69', '160-71', '160-72', '160-76', '160-77', '160-83', '160-84', '160-85', '161-92', '162-17', '162-18', '162-19', '162-26', '162-29', '162-36', '162-54', '162-64', '162-65', '162-66', '162-67', '162-68', '162-73', '165-34', '165-53', '165-55', '165-57', '165-60', '166-24', '166-31', '166-33', '166-35', '166-37', '166-52', '166-77', '168-13', '168-20', '168-21', '168-22', '168-25', '168-33', '168-36', '168-41', '168-48', '168-49', '168-59', '168-60', '168-64', '169-100', '169-102', '169-42', '169-46', '169-47', '169-50', '169-67', '169-68', '169-7', '169-81', '169-82', '169-84', '169-86', '169-93', '169-98', '169-99', '170-39']"
  },
  {
    "Query": "Find parcels larger than 6000 square feet that are zoned for retail use.",
    "Code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n# Define retail use codes consistently\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\n\n# Filter for retail parcels\nretail_parcels = parcels[parcels['use_code'].astype(str).isin(retail_use_codes)]\n\n# Filter for large retail parcels (>6000 sq ft)\nlarge_retail_parcels = retail_parcels[retail_parcels['land_area'] > 6000]\n\n# Sort by parcel ID for consistency\nlarge_retail_parcels = large_retail_parcels.sort_values('ml')\n\n# Display results\nresult_ids = large_retail_parcels['ml'].tolist()\nprint(f\"Found {len(large_retail_parcels)} retail parcels larger than 6000 sq ft\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['100-62', '105-68', '105-82', '106-124', '107-117', '107-9', '109-50', '110-91', '116-12', '120-48', '125-73', '128-63', '128-72', '134-33', '136-15', '140-148', '152-25', '156-25', '157-26', '16-11', '162-26', '162-54', '169-46', '169-47', '174-37', '175-37', '175-75', '175-84', '176-15', '176-64', '179-87', '18-64', '18-65', '180-57', '182-88', '183-100', '184-159', '189-72', '191-65', '191-85', '192-121', '192-177', '196-154', '199-30', '199-31', '199-67', '1A-189', '1A-192', '1A-211', '20-75', '200-22', '21-121', '226-46', '229-117', '230-71', '234-178', '236-95', '252-172', '260-46', '260-76', '265B-26', '265B-28', '265B-61', '265C-25', '267E-234', '268B-15', '273-2', '273-20', '34-8', '70-91', '70-92', '74-1', '8-88', '81-100', '83-80', '84-101', '84-91', '90-155', '90-162', '92-88', '93-78']"
  },
  {
    "Query": "Find all parcels that have no more than 2 competing restaurants within 800 meters.",
    "Code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Convert to projected CRS for accurate distance measurement\nparcels_proj = parcels.to_crs(epsg=26986)  # Massachusetts state plane\n\n# Filter restaurants from POI data\nrestaurants = poi[poi['business_type'] == 'restaurant']\nrestaurants_proj = restaurants.to_crs(epsg=26986)  # Massachusetts state plane\n\n# Count nearby restaurants for each parcel\ndef count_nearby_restaurants(parcel_geom, restaurant_geoms, buffer_distance=800):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    count = sum(1 for rest_geom in restaurant_geoms if buffered_geom.contains(rest_geom))\n    return count\n\n# Calculate restaurant count for each parcel\nrestaurant_geoms = restaurants_proj['geometry'].tolist()\nparcels_proj['nearby_restaurants'] = parcels_proj['geometry'].apply(\n    lambda geom: count_nearby_restaurants(geom, restaurant_geoms)\n)\n\n# Filter for parcels with 0, 1, or 2 restaurants within 800m\nresult_parcels = parcels_proj[parcels_proj['nearby_restaurants'] <= 2]\n\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} parcels with ≤2 restaurants within 800m\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['242-33', '242-34', '242-36', '242-38', '242A-100', '242A-102', '242A-105', '242A-107', '242A-109', '242A-110', '242A-111', '242A-112', '242A-113', '242A-115', '242A-116', '242A-126', '242A-127', '242A-131', '242A-148', '242A-158', '242A-159', '242A-160', '242A-161', '242A-162', '242A-59', '242A-68', '242A-72', '242A-73', '242A-75', '242A-91', '242A-99', '242B-999', '243-1', '266-1', '266-10', '266-12', '266-13', '266-14', '266-15', '266-16', '266-17', '266-18', '266-19', '266-2', '266-20', '266-21', '266-3', '266-35', '266-36', '266-37', '266-38', '266-4', '266-5', '266-6', '266-7', '266-8', '266-9']"
  },
  {
    "Query": "Find the top 20 parcels in Cambridge with the most diverse mix of residential and commercial land uses within 500 meters.",
    "Code": "import geopandas as gpd\nimport numpy as np\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n# Project to a metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\n\ndef calculate_land_use_diversity(parcel_geom, all_parcels, buffer_distance=500):\n    # Buffer the parcel\n    buffered = parcel_geom.buffer(buffer_distance)\n    # Select nearby parcels and make an explicit copy to avoid SettingWithCopyWarning\n    nearby = all_parcels[all_parcels.geometry.intersects(buffered)].copy()\n\n    # Categorize each parcel's use_code\n    def categorize_use_code(code):\n        code_str = str(code)\n        \n        # Residential codes\n        if code_str in ['101', '1014', '102', '1028', '104', '105', '109', '1094', '1095', \n                        '1098', '111', '112', '113', '114', '121', '970', '9700', '9421']:\n            return 'Residential'\n        \n        # Commercial codes\n        elif code_str in ['300', '302', '316', '323', '324', '325', '326', '327', '330', '332', \n                          '334', '340', '341', '343', '345', '346', '353', '362', '375', '404', '406']:\n            return 'Commercial'\n        \n        # Mixed use codes\n        elif code_str in ['0101', '0104', '0105', '0111', '0112', '0121', '013', '031', '0340', \n                          '0406', '041', '0942']:\n            return 'Mixed Use'\n        \n        # Industrial codes\n        elif code_str in ['400', '401', '407', '413']:\n            return 'Industrial'\n        \n        # Education codes\n        elif code_str in ['140', '934', '940', '9403', '941', '9410', '9413', '942', '9420', '943', '956']:\n            return 'Education'\n        \n        # Vacant codes\n        elif code_str in ['1062', '130', '131', '132', '1322', '390', '391', '392', '3922', '440', \n                          '442', '933', '936', '946']:\n            return 'Vacant'\n            \n        # Other categories\n        else:\n            return 'Other'\n\n    nearby.loc[:, 'general_category'] = nearby['use_code'].apply(categorize_use_code)\n    counts = nearby['general_category'].value_counts().to_dict()\n\n    # Shannon diversity index\n    total = sum(counts.values())\n    if total == 0:\n        return 0.0\n    proportions = [c/total for c in counts.values()]\n    shannon = -sum(p * np.log(p) for p in proportions if p > 0)\n\n    # Raw count of distinct categories\n    type_count = len(counts)\n\n    # Residential-commercial mix score\n    res = counts.get('Residential', 0)\n    com = counts.get('Commercial', 0)\n    mix_score = 0.0\n    if res and com:\n        ratio = res / com\n        mix_score = 1 / (1 + abs(np.log(ratio)))\n\n    # Composite diversity score\n    return 0.4 * shannon + 0.3 * (type_count / 5) + 0.3 * mix_score\n\n# To limit runtime, sample roughly 1,000 parcels evenly\nstep = max(1, len(parcels_proj) // 1000)\nparcels_to_evaluate = parcels_proj.iloc[::step].copy()\n\n# Compute diversity score\nparcels_to_evaluate.loc[:, 'diversity_score'] = (\n    parcels_to_evaluate.geometry\n        .apply(lambda g: calculate_land_use_diversity(g, parcels_proj))\n)\n\n# Select top 20 and revert to original CRS\ntop20 = (\n    parcels_to_evaluate\n      .nlargest(20, 'diversity_score')\n      .to_crs(parcels.crs)\n)\n\n# Output results\nresult_ids = top20['ml'].tolist()\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['43-77', '56-9', '1A-82', '14-36', '267.4-312', '1A-86', '267.4-221', '13-21', '1A-196', '29-49', '267F-296', '9-31', '160-67', '160-66', '169-50', '266-33', '267D-257', '68-57', '169-81', '165-55']"
  },
  {
    "Query": "Find the top 20 commercial parcels in areas with the highest percentage of residents with advanced degrees.",
    "Code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\ncensus = gpd.read_file('cambridge_census_cambridge_pct.geojson')\n\n# Define commercial use codes consistently\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n\n# Filter for commercial parcels\ncommercial_parcels = parcels[parcels['use_code'].astype(str).str.startswith(('3', '4'))]\n\n# Ensure both datasets have same CRS\ncommercial_parcels = commercial_parcels.to_crs(census.crs)\n\n# Spatial join: assign each parcel to the tract it falls within\nparcels_with_census = gpd.sjoin(\n    commercial_parcels,\n    census,\n    how='left',\n    predicate='within'\n)\n\n# Drop parcels that didn't match any census tract\nparcels_with_census = parcels_with_census.dropna(subset=['pct_adv_deg'])\n\n# Sort by advanced degree percentage (higher is better)\nparcels_by_education = parcels_with_census.sort_values('pct_adv_deg', ascending=False)\n\n# Get top 20 parcels in areas with highest educational attainment\ntop_parcels = parcels_by_education.head(20)\n\n# Display results\nresult_ids = top_parcels['ml'].tolist()\nprint(f\"Top 20 commercial parcels in areas with highest percentage of advanced degrees:\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['160-14', '160-59', '133-20', '160-84', '160-85', '133-51', '160-48', '160-11', '133-54', '133-52', '160-77', '160-76', '133-15', '160-67', '160-69', '160-58', '133-14', '160-83', '133-56', '125-73']"
  },
  {
    "Query": "Find the top 20 parcels with the highest consumer spending in surrounding areas.",
    "Code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\nspend = pd.read_csv('cambridge_spend_processed.csv')\n\n# Convert to projected CRS for accurate distance measurement\nparcels_proj = parcels.to_crs(epsg=26986)\n\n# Combine POI with spending data\npoi_with_spend = poi.merge(\n    spend,\n    left_on='PLACEKEY',\n    right_on='PLACEKEY',\n    how='left'\n)\n\n# Fill NaN values in spending with 0\nif 'RAW_TOTAL_SPEND' in poi_with_spend.columns:\n    poi_with_spend['RAW_TOTAL_SPEND'] = poi_with_spend['RAW_TOTAL_SPEND'].fillna(0)\nelse:\n    poi_with_spend['RAW_TOTAL_SPEND'] = 0\n\n# Convert POI to projected CRS\npoi_with_spend_proj = poi_with_spend.to_crs(epsg=26986)\n\n# Calculate area spending for each parcel\ndef calculate_area_spending(parcel_geom, poi_geoms, spend_values, radius=200):  # 200m radius\n    buffered_geom = parcel_geom.buffer(radius)\n    total_spend = 0\n    \n    for i, poi_geom in enumerate(poi_geoms):\n        if poi_geom is not None and buffered_geom.contains(poi_geom):\n            total_spend += spend_values[i]\n    \n    return total_spend\n\n# Calculate spending around each parcel\n# For computational efficiency, evaluate at regular intervals\nstep = max(1, len(parcels_proj) // 1000)  # Calculate for ~1000 parcels\nparcels_to_evaluate = parcels_proj.iloc[::step].copy()\n\npoi_geoms = poi_with_spend_proj['geometry'].tolist()\nspend_values = poi_with_spend_proj['RAW_TOTAL_SPEND'].tolist()\n\nparcels_to_evaluate['area_spending'] = parcels_to_evaluate.geometry.apply(\n    lambda geom: calculate_area_spending(geom, poi_geoms, spend_values)\n)\n\n# Sort by area spending (higher is better)\nresult_parcels = parcels_to_evaluate.sort_values('area_spending', ascending=False)\ntop_spending_parcels = result_parcels.head(20)\n\n# Convert back to original CRS\ntop_spending_parcels = top_spending_parcels.to_crs(parcels.crs)\n\n# Display results\nresult_ids = top_spending_parcels['ml'].tolist()\nprint(f\"Top 20 parcels with highest surrounding consumer spending:\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['160-66', '160-67', '169-50', '106-124', '100-40', '100-15', '100-22', '100-4', '93-55', '169-81', '106-105', '99-39', '106-109', '169-7', '169-5', '91-32', '178-118', '178-79', '178-80', '179-59']"
  },
  {
    "Query": "Find vacant commercial parcels larger than 3000 square feet that are within 800 meters of a subway station.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n\n# Define subway station locations\nsubway_stations = [\n    Point(-71.1189, 42.3736),  # Harvard Square\n    Point(-71.1031, 42.3656),  # Central Square\n    Point(-71.0865, 42.3625),  # Kendall/MIT\n    Point(-71.1226, 42.3782),  # Porter Square\n    Point(-71.1429, 42.3954)   # Alewife\n]\nsubway_gdf = gpd.GeoDataFrame(geometry=subway_stations, crs=parcels.crs)\n\n# Project to metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\nsubway_gdf_proj = subway_gdf.to_crs(epsg=26986)\n\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n\n# Define vacant commercial land use codes from the provided table\nvacant_commercial_codes = ['390', '391', '392', '3922']\n\n# Filter for commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Filter for vacant commercial parcels\nvacant_commercial = parcels_proj[parcels_proj['use_code'].astype(str).isin(vacant_commercial_codes)].copy()\n\n# Filter for parcels larger than 3000 sq ft\nlarge_vacant_commercial = vacant_commercial[vacant_commercial['land_area'] > 3000].copy()\n\n# Create 800m buffer around subway stations\nsubway_buffers = [geom.buffer(800) for geom in subway_gdf_proj.geometry]\nunion_buffer = gpd.GeoSeries(subway_buffers).union_all()\n\n# Find large vacant commercial parcels within 800m of subway stations\nresult_parcels = large_vacant_commercial[large_vacant_commercial.geometry.intersects(union_buffer)].copy()\n\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n\n# Output results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} vacant commercial parcels > 3000 sq ft within 800m of subway stations\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['173-35', '267E-17', '70-10', '267E-290', '189-103', '11-46', '267.2-261', '28-43', '119-21', '14-54', '267E-291', '14-55', '267.1-282', '41-28', '267F-393', '95-1', '267E-292']"
  },
  {
    "Query": "Find commercial parcels zoned for retail use with fewer than 3 competing retail businesses within 300 meters.",
    "Code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Define retail use codes\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\n\n# Project to metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter for retail parcels\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_use_codes)].copy()\n\n# Filter retail businesses from POI data\nretail_business_types = ['restaurant', 'clothing_store', 'department_store', 'grocery_store', \n                         'convenience_store', 'furniture_store', 'hardware_store', 'electronics_store']\nretail_businesses = poi_proj[poi_proj['business_type'].isin(retail_business_types)].copy()\n\n# Function to count nearby retail businesses\ndef count_nearby_retail(parcel_geom, retail_geoms, buffer_distance=300):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    count = sum(1 for geom in retail_geoms if geom is not None and buffered_geom.contains(geom))\n    return count\n\n# Get retail business geometries\nretail_geoms = retail_businesses['geometry'].tolist()\n\n# Calculate retail count for each retail parcel\nretail_parcels.loc[:, 'nearby_retail'] = retail_parcels.geometry.apply(\n    lambda geom: count_nearby_retail(geom, retail_geoms)\n)\n\n# Filter for parcels with fewer than 3 competing retail businesses\nresult_parcels = retail_parcels[retail_parcels['nearby_retail'] < 3].copy()\n\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n\n# Output results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} retail parcels with <3 competing retail businesses within 300m\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['189-4', '195-59', '228-55', '234-178', '260-76', '267D-259', '268B-15', '271-32']"
  },
  {
    "Query": "find the top 20 commercial parcels within 1km of massachusetts avenue, prioritizing areas with higher consumer spending.",
    "Code": "import geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import LineString\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\nspend_data = pd.read_csv('cambridge_spend_processed.csv')\n# Define approximate Massachusetts Avenue location\nmass_ave_points = [\n    (-71.107894, 42.367672),  # Near Tanjore restaurant on Mass Ave\n    (-71.10564, 42.367132),   # Near Fire Department on Mass Ave\n    (-71.10144, 42.363676)    # Near The Boston Lamb Takedown on Mass Ave\n]\nmass_ave = LineString(mass_ave_points)\n# Create GeoDataFrame for Mass Ave\nmass_ave_gdf = gpd.GeoDataFrame(geometry=[mass_ave], crs=parcels.crs)\n# Project to metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\nmass_ave_proj = mass_ave_gdf.to_crs(epsg=26986)\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n# Filter for commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n# Create 1km buffer around Mass Ave\nmass_ave_buffer = mass_ave_proj.buffer(1000).iloc[0]\n# Find commercial parcels within 1km of Mass Ave\nparcels_near_mass_ave = commercial_parcels[commercial_parcels.geometry.intersects(mass_ave_buffer)].copy()\n# Combine POI with spending data\npoi_with_spend = poi.merge(\n    spend_data,\n    left_on='PLACEKEY',\n    right_on='PLACEKEY',\n    how='left'\n)\n# Fill NaN values in spending with 0\nif 'RAW_TOTAL_SPEND' in poi_with_spend.columns:\n    poi_with_spend['RAW_TOTAL_SPEND'] = poi_with_spend['RAW_TOTAL_SPEND'].fillna(0)\nelse:\n    poi_with_spend['RAW_TOTAL_SPEND'] = 0\n# Project POI data to the same CRS\npoi_with_spend_proj = poi_with_spend.to_crs(epsg=26986)\n# Function to calculate area spending\ndef calculate_area_spending(parcel_geom, poi_geoms, spend_values, radius=200):  # 200m radius\n    buffered_geom = parcel_geom.buffer(radius)\n    total_spend = 0\n    \n    for i, poi_geom in enumerate(poi_geoms):\n        if poi_geom is not None and buffered_geom.contains(poi_geom):\n            total_spend += spend_values[i]\n    \n    return total_spend\n# Get POI geometries and spend values\npoi_geoms = poi_with_spend_proj['geometry'].tolist()\nspend_values = poi_with_spend_proj['RAW_TOTAL_SPEND'].tolist()\n# Calculate spending for each parcel near Mass Ave\nparcels_near_mass_ave.loc[:, 'area_spending'] = parcels_near_mass_ave.geometry.apply(\n    lambda geom: calculate_area_spending(geom, poi_geoms, spend_values)\n)\n# Sort by area spending (higher is better)\nresult_parcels = parcels_near_mass_ave.sort_values('area_spending', ascending=False)\ntop_spending_parcels = result_parcels.head(20)\n# Convert back to original CRS\ntop_spending_parcels = top_spending_parcels.to_crs(parcels.crs)\n# Output results\nresult_ids = top_spending_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} commercial parcels within 1km of Mass Ave\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['128-71', '106-124', '90-125', '90-185', '90-133', '90-155', '91-118', '93-74', '93-76', '93-75', '93-73', '93-72', '93-79', '93-80', '93-78', '93-99', '91-208', '106-123', '90-70', '90-169']"
  },
  {
    "Query": "find commercial parcels larger than 8000 square feet in census tracts with at least 90% of residents aged 18-64.",
    "Code": "import geopandas as gpd\nimport pandas as pd\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\ncensus = gpd.read_file('cambridge_census_cambridge_pct.geojson')\n# Filter for commercial parcels\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n# Filter for commercial parcels\ncommercial_parcels = parcels[parcels['use_code'].astype(str).isin(commercial_use_codes)].copy()\n# Filter for parcels larger than 8000 sq ft\nlarge_commercial = commercial_parcels[commercial_parcels['land_area'] > 8000]\n# Ensure both datasets have same CRS\nlarge_commercial = large_commercial.to_crs(census.crs)\n# Spatial join to connect parcels with census tracts (use 'predicate' instead of 'op')\nparcels_with_census = gpd.sjoin(\n    large_commercial,\n    census,\n    how='left',\n    predicate='within'\n)\n# Filter for census tracts with at least 90% in 18-64 age bracket\nresult_parcels = parcels_with_census[parcels_with_census['pct_18_64'] >= 0.9]\n# Sort by percentage of 18-64 year olds (higher is better)\nresult_parcels = result_parcels.sort_values('pct_18_64', ascending=False)\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} commercial parcels >8000 sq ft in areas with ≥90% aged 18-64\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['157-26', '267.2-272', '267.2-273', '267.1-278', '267.2-267', '43-76', '43-73', '43-77', '43-71', '63-132', '54-25', '63-134', '63-131', '63-128', '63-135', '44-104', '44-106', '46-12', '47-94', '48-158', '47-97', '44-105', '44-99', '44-100', '116-12', '134-59', '134-33', '1A-209', '160-14', '160-69', '160-48', '160-11', '133-51']"
  },
  {
    "Query": "find commercial parcels that are between 5000-10000 square feet, within 500 meters of a subway station, and have no more than 1 competitor within 500 meters.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\nfrom shapely.ops import unary_union\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n# Define subway station locations\nsubway_stations = [\n    Point(-71.1189, 42.3736),  # Harvard Square\n    Point(-71.1031, 42.3656),  # Central Square\n    Point(-71.0865, 42.3625),  # Kendall/MIT\n    Point(-71.1226, 42.3782),  # Porter Square\n    Point(-71.1429, 42.3954)   # Alewife\n]\nsubway_gdf = gpd.GeoDataFrame(geometry=subway_stations, crs=parcels.crs)\n# Convert to projected CRS for accurate distance measurement\nparcels_proj = parcels.to_crs(epsg=26986)\nsubway_gdf_proj = subway_gdf.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n# Filter for commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n# CONSTRAINT 1: Size between 5000-10000 sq ft\nsize_filtered_parcels = commercial_parcels[\n    (commercial_parcels['land_area'] >= 5000) & \n    (commercial_parcels['land_area'] <= 10000)\n]\n# CONSTRAINT 2: Within 500m of subway station\n# Create 500m buffer around subway stations\nsubway_buffers = [geom.buffer(500) for geom in subway_gdf_proj.geometry]\nunion_buffer = unary_union(subway_buffers)\n# Filter by location, as a true copy\nlocation_filtered_parcels = size_filtered_parcels[\n    size_filtered_parcels.geometry.intersects(union_buffer)\n].copy()\n# CONSTRAINT 3: No more than 1 competitor within 500m\n# First identify competitors (businesses of same type)\ndef count_competitors(parcel_geom, parcel_use_code, poi_geoms, poi_use_codes, buffer_distance=500):\n    # Get business type for this parcel\n    parcel_type = str(parcel_use_code)[:3]  # First 3 digits of use code\n    \n    # Get competitor business types\n    competitor_types = []\n    if parcel_type.startswith('32'):  # Retail\n        competitor_types = ['restaurant', 'clothing_store', 'department_store', 'grocery_store', \n                           'convenience_store', 'retail']\n    elif parcel_type.startswith('33'):  # Food service\n        competitor_types = ['restaurant', 'cafe', 'bakery', 'fast_food']\n    elif parcel_type.startswith('31'):  # Office\n        competitor_types = ['offices_of_physicians', 'offices_of_other_health_practitioners',\n                          'offices_of_dentists', 'offices_of_real_estate_agents']\n    else:\n        competitor_types = ['business_type']  # Generic\n    \n    # Create buffer\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    \n    # Count competitors\n    count = 0\n    for i, (geom, use_code) in enumerate(zip(poi_geoms, poi_use_codes)):\n        if geom is not None and buffered_geom.contains(geom):\n            if any(comp_type in str(use_code).lower() for comp_type in competitor_types):\n                count += 1\n    \n    return count\n# Get competitors for each parcel\npoi_geoms = poi_proj['geometry'].tolist()\npoi_use_codes = poi_proj['business_type'].tolist()\ncompetitor_counts = []\nfor idx, row in location_filtered_parcels.iterrows():\n    count = count_competitors(row['geometry'], row['use_code'], poi_geoms, poi_use_codes)\n    competitor_counts.append(count)\nlocation_filtered_parcels.loc[:, 'competitor_count'] = competitor_counts\n# Filter for parcels with at most 1 competitor\nfinal_parcels = location_filtered_parcels[location_filtered_parcels['competitor_count'] <= 1]\n# Convert back to original CRS\nfinal_parcels = final_parcels.to_crs(parcels.crs)\n# Display results\nresult_ids = final_parcels['ml'].tolist()\nprint(f\"Found {len(final_parcels)} commercial parcels meeting all criteria:\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['160-59', '109-51', '216-7', '107-135', '168-59', '160-64', '90-18', '168-21', '91-118', '169-82', '106-117', '118-67', '93-75', '90-13', '168-48', '117-29', '160-72', '166-24', '168-20', '109-22', '160-58', '90-70', '119-93', '91-81', '162-36', '90-161', '90-20', '118-34', '134-7', '133-49', '117-56', '160-71', '168-64', '162-68', '156-60', '156-55', '105-77', '105-89', '28-31', '162-67', '87-153', '14-26', '169-50', '168-25', '91-87', '90-185', '91-70', '169-93']"
  },
  {
    "Query": "find parcels that are zoned for mixed-use, within 400 meters of public transportation, and at least 200 meters away from industrial areas.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n# Define transit stops (subway and major bus stops)\ntransit_stops = [\n    Point(-71.1189, 42.3736),  # Harvard Square\n    Point(-71.1031, 42.3656),  # Central Square\n    Point(-71.0865, 42.3625),  # Kendall/MIT\n    Point(-71.1226, 42.3782),  # Porter Square\n    Point(-71.1429, 42.3954),  # Alewife\n    Point(-71.1195, 42.3703),  # Harvard Law School\n    Point(-71.1167, 42.3803),  # Cambridge Common\n    Point(-71.1055, 42.3720),  # Inman Square\n    Point(-71.0955, 42.3703),  # Lechmere\n    Point(-71.1066, 42.3589)   # MIT Central\n]\ntransit_gdf = gpd.GeoDataFrame(geometry=transit_stops, crs=parcels.crs)\n# Project to metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\ntransit_gdf_proj = transit_gdf.to_crs(epsg=26986)\n# CONSTRAINT 1: Mixed-use zoning\n# Define mixed-use codes from the provided land use table\nmixed_use_codes = ['0101', '0104', '0105', '0111', '0112', '0121', '013', '031', '0340', '0406', '041', '0942']\n# Filter for mixed-use parcels\nmixed_use_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(mixed_use_codes)].copy()\n# CONSTRAINT 2: Within 400m of public transportation\n# Create 400m buffer around transit stops\ntransit_buffers = [geom.buffer(400) for geom in transit_gdf_proj.geometry]\ntransit_union_buffer = gpd.GeoSeries(transit_buffers).union_all()\n# Find mixed-use parcels within buffer\ntransit_accessible_parcels = mixed_use_parcels[\n    mixed_use_parcels.geometry.intersects(transit_union_buffer)\n].copy()\n# CONSTRAINT 3: At least 200m away from industrial areas\n# Define industrial use codes from the provided land use table\nindustrial_use_codes = ['400', '401', '407', '413']\n# Filter for industrial parcels\nindustrial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(industrial_use_codes)].copy()\n# Create 200m buffer around industrial parcels\nindustrial_buffers = [geom.buffer(200) for geom in industrial_parcels.geometry]\nindustrial_union_buffer = gpd.GeoSeries(industrial_buffers).union_all()\n# Find parcels outside the industrial buffer\nfinal_parcels = transit_accessible_parcels[\n    ~transit_accessible_parcels.geometry.intersects(industrial_union_buffer)\n].copy()\n# Convert back to original CRS\nfinal_parcels = final_parcels.to_crs(parcels.crs)\n# Output results\nresult_ids = final_parcels['ml'].tolist()\nprint(f\"Found {len(final_parcels)} mixed-use parcels meeting all criteria:\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['224-42', '78-24', '160-53', '216-4', '108-90', '80-52', '80-147', '84-22', '29-34', '173-48', '87-40', '80-2', '105-117', '165-40', '93-49', '84-20', '160-25', '85-28', '93-81', '105-16', '119-9', '160-74', '85-64', '157-39', '119-113', '82-56', '80-58', '102-47', '155-32', '80-118', '135-87', '116-98', '105-17', '133-55', '156-24', '174-32', '168-16', '160-24', '108-28', '111-53', '265D-58', '84-87', '118-32', '79-97', '93-71', '168-45', '109-40', '106-51', '133-41', '106-122', '160-70', '108-79', '85-83', '107-1', '106-105', '174-66', '173-75', '77-39', '84-23', '162-72', '40-84', '82-71', '82-79', '174-62', '108-23', '82-12', '162-74', '268B-45', '14-1038', '85-27', '82-68', '150-41', '109-23', '80-160', '168-40', '82-54', '160-46', '162-62', '87-34', '133-43', '114-37', '119-22', '14-59', '109-87', '84-36', '92-132', '79-25', '169-85', '102-17', '86-111', '108-70', '101-120', '84-48', '79-92', '85-101', '173-34', '79-73', '105-119', '77-63', '85-26', '114A-16', '106-125', '80-128', '108-8', '161-2', '139-18', '79-21', '82-58', '105-128', '105-59', '85-7', '105-134', '133-11', '105-55', '133-21', '82-11', '133-53', '162-9', '106-103', '113-38', '85-95', '156-68', '108-60']"
  },
  {
    "Query": "find parcels that are either commercial places within 100m of harvard square or residential larger than 5000 square feet and within 200m of 50 restaurants.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\nfrom shapely.ops import unary_union\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n# Project to metric CRS for accurate distance measurement\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n# Define Harvard Square location\nharvard_square = Point(-71.1189, 42.3736)\nharvard_gdf = gpd.GeoDataFrame(geometry=[harvard_square], crs=parcels.crs)\nharvard_gdf_proj = harvard_gdf.to_crs(epsg=26986)\n# Define commercial and residential use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\nresidential_use_codes = [\n    '101', '1014', '102', '1028', '104', '105', '109', '1094', '1095', \n    '1098', '111', '112', '113', '114', '121', '970', '9700', '9421'\n]\n# CONDITION 1: Commercial parcels within 100m of Harvard Square\n# Create 100m buffer around Harvard Square\nharvard_buffer = harvard_gdf_proj.buffer(100).iloc[0]\n# Filter for commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)]\n# Find commercial parcels within 100m of Harvard Square\ncommercial_near_harvard = commercial_parcels[commercial_parcels.geometry.intersects(harvard_buffer)].copy()\n# CONDITION 2: Residential parcels larger than 5000 sq ft and within 200m of 50 restaurants\n# Filter for residential parcels > 5000 sq ft\nlarge_residential = parcels_proj[\n    (parcels_proj['use_code'].astype(str).isin(residential_use_codes)) & \n    (parcels_proj['land_area'] > 5000)\n].copy()\n# Filter for restaurants from POI data\nrestaurants = poi_proj[poi_proj['business_type'] == 'restaurant']\n# Find parcels with at least 50 restaurants within 200m\ndef count_nearby_restaurants(parcel_geom, restaurant_geoms, buffer_distance=200):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    count = sum(1 for geom in restaurant_geoms if buffered_geom.contains(geom))\n    return count\n# Get restaurant geometries\nrestaurant_geoms = restaurants['geometry'].tolist()\n# Calculate nearby restaurant count for each large residential parcel\nlarge_residential['nearby_restaurants'] = large_residential['geometry'].apply(\n    lambda geom: count_nearby_restaurants(geom, restaurant_geoms)\n)\n# Filter for parcels with at least 50 restaurants within 200m\nresidential_near_restaurants = large_residential[large_residential['nearby_restaurants'] >= 50]\n# Identify all parcels that meet either condition\ncommercial_ids = set(commercial_near_harvard['ml'].tolist())\nresidential_ids = set(residential_near_restaurants['ml'].tolist())\nall_ids = commercial_ids.union(residential_ids)\n# Filter the original parcels dataframe for these IDs\nresult_parcels = parcels_proj[parcels_proj['ml'].isin(all_ids)]\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} parcels meeting either condition\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['10-33', '159-2', '160-11', '160-14', '160-57', '160-58', '160-59', '160-69', '165-56', '169-100', '169-102', '169-42', '169-50', '169-93', '169-98', '169-99', '177-41', '177-42', '177-45', '177-78', '75-100', '75-112', '75-53', '91-104', '91-180', '91-202', '91-23', '91-32', '91-99', '92-118', '92-119', '93-135', '93-57', '93-58', '93-64', '93-67']"
  },
  {
    "Query": "find parcels that are zoned for retail and within 300m of a subway station and not within 100m of a competitor.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\nfrom shapely.ops import unary_union\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n# Project to metric CRS for accurate distance measurement\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n# Define subway station locations\nsubway_stations = [\n    Point(-71.1189, 42.3736),  # Harvard Square\n    Point(-71.1031, 42.3656),  # Central Square\n    Point(-71.0865, 42.3625),  # Kendall/MIT\n    Point(-71.1226, 42.3782),  # Porter Square\n    Point(-71.1429, 42.3954)   # Alewife\n]\nsubway_gdf = gpd.GeoDataFrame(geometry=subway_stations, crs=parcels.crs)\nsubway_gdf_proj = subway_gdf.to_crs(epsg=26986)\n# Define retail use codes\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\n# CONSTRAINT 1: Filter for retail parcels\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_use_codes)].copy()\n# CONSTRAINT 2: Within 300m of a subway station\n# Create 300m buffer around subway stations\nsubway_buffers = [geom.buffer(300) for geom in subway_gdf_proj.geometry]\nsubway_union_buffer = unary_union(subway_buffers)\n# Filter for retail parcels within 300m of subway stations\nretail_near_subway = retail_parcels[retail_parcels.geometry.intersects(subway_union_buffer)].copy()\n# CONSTRAINT 3: NOT within 100m of a competitor\n# Filter for retail businesses from POI data (competitors)\nretail_poi = poi_proj[poi_proj['business_type'] == 'retail']\n# Function to check if a parcel is NOT within 100m of a competitor\ndef has_no_nearby_competitors(parcel_geom, parcel_id, competitor_geoms, buffer_distance=100):\n    # Create buffer around parcel\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    \n    # Check for any competitors within buffer\n    for geom in competitor_geoms:\n        if buffered_geom.contains(geom):\n            return False  # Has at least one competitor within range\n    \n    return True  # No competitors within range\n# Get retail POI geometries\nretail_poi_geoms = retail_poi['geometry'].tolist()\n# Filter for parcels without nearby competitors\nretail_no_competitors = []\nfor idx, row in retail_near_subway.iterrows():\n    if has_no_nearby_competitors(row['geometry'], row['ml'], retail_poi_geoms):\n        retail_no_competitors.append(row['ml'])\n# Filter for final result\nfinal_parcels = retail_near_subway[retail_near_subway['ml'].isin(retail_no_competitors)]\n# Convert back to original CRS\nfinal_parcels = final_parcels.to_crs(parcels.crs)\n# Sort by parcel ID for consistency\nfinal_parcels = final_parcels.sort_values('ml')\n# Display results\nresult_ids = final_parcels['ml'].tolist()\nprint(f\"Found {len(final_parcels)} retail parcels within 300m of subway stations and without competitors within 100m\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['107-117', '133-12', '160-76', '160-83', '160-84', '160-85', '90-127']"
  },
  {
    "Query": "find parcels that are either office space larger than 10,000 sq ft or retail space within 500m of high-density residential areas.",
    "Code": "import geopandas as gpd\nimport pandas as pd\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n# Project to metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\n# CONDITION 1: Office space larger than 10,000 sq ft\n# Define office use codes\noffice_use_codes = ['340', '343', '345', '346', '0340', '404', '406', '0406']\n# Filter for office parcels\noffice_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(office_use_codes)].copy()\n# Filter by size\nlarge_office = office_parcels[office_parcels['land_area'] > 10000].copy()\n# CONDITION 2: Retail space within 500m of high-density residential areas\n# Define retail use codes\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\n# Filter for retail parcels\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_use_codes)].copy()\n# Define high-density residential use codes (apartment buildings)\nhigh_density_res_codes = ['111', '112', '114', '0111', '0112']\n# Filter for high-density residential parcels\nhigh_density_res = parcels_proj[parcels_proj['use_code'].astype(str).isin(high_density_res_codes)].copy()\n# Create 500m buffer around high-density residential areas\nhigh_density_buffers = [geom.buffer(500) for geom in high_density_res.geometry]\nhigh_density_union_buffer = gpd.GeoSeries(high_density_buffers).union_all()\n# Find retail parcels within 500m of high-density residential areas\nretail_near_high_density = retail_parcels[retail_parcels.geometry.intersects(high_density_union_buffer)].copy()\n# COMBINE CONDITIONS (OR)\n# Add a flag to identify which condition each parcel meets\nlarge_office.loc[:, 'condition'] = 'large_office'\nretail_near_high_density.loc[:, 'condition'] = 'retail_near_high_density'\n# Concatenate results from both conditions\ncombined_results = pd.concat([large_office, retail_near_high_density])\n# Remove any duplicates (parcels that meet both conditions)\ncombined_results = combined_results.drop_duplicates('ml')\n# Convert back to original CRS\ncombined_results = combined_results.to_crs(parcels.crs)\n# Output results\nresult_ids = combined_results['ml'].tolist()\nprint(f\"Found {len(combined_results)} parcels meeting either condition:\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['1A-70', '1A-190', '95-76', '203B-52', '128-70', '18-74', '44-104', '168-36', '63-128', '273-51', '160-14', '203A-76', '15-3', '165-55', '252-160', '267F-293', '226-67', '30-38', '43A-24', '80-175', '90-14', '114A-66', '129-58', '267.4-288', '267D-282', '105-81', '182-84', '1A-172', '267.2-273', '267.1-278', '14-44', '165-53', '91-208', '42-87', '95-71', '43A-21', '13-16', '41-26', '32-53', '90-133', '14-39', '30-40', '90-170', '184-168', '267F-391', '182-98', '268C-35', '31-15', '23-90', '9-41', '269-138', '175-68', '43-77', '15-30', '29-50', '67-67', '31-20', '14-36', '69-173', '54-25', '8-91', '16-23', '189-57', '267C-71', '265B-59', '44-105', '67-14', '95-78', '121-94', '69-165', '8-76', '96-109', '169-84', '267D-285', '267D-310', '267F-274', '42-86', '69-159', '90-169', '69-182', '95-74', '133-23', '18-77', '93-73', '267C-70', '267.4-319', '168-33', '95-79', '64-6', '16-32', '43-78', '12-19', '267E-280', '8-86', '267E-284', '267F-279', '267.2-267', '160-69', '47-97', '15-29', '88-53', '265A-29', '267F-296', '267.3-253', '92-127', '27-82', '55-18', '267.4-323', '261-77', '169-98', '67-48', '181-88', '69-148', '43-73', '1A-213', '183-119', '17-84', '267.3-285', '69-179', '17-74', '168-13', '66-153', '68-77', '95-72', '119-95', '43-76', '41-38', '39-88', '44-100', '267D-315', '267.4-313', '268C-32', '267D-299', '15-28', '121-2', '168-41', '1A-201', '1A-209', '46-12', '41-36', '10-16', '265A-31', '267E-285', '11-146', '267F-301', '14-58', '44-99', '28-23', '267.2-272', '169-42', '160-11', '30-42', '67-66', '133-51', '11-40', '116-117', '54-19', '110-87', '63-132', '23-149', '267D-305', '267.4-305', '14-45', '30-41', '267D-286', '133-33', '172-29', '267.4-322', '267E-279', '70-22', '19-23', '152-52', '43-70', '1A-200', '267D-311', '169-102', '43A-16', '67-47', '267E-282', '169-99', '68-47', '165-57', '13-23', '160-57', '168-60', '267F-281', '95-75', '41-29', '265D-53', '1A-105', '39-173', '160-48', '70-86', '63-135', '191-112', '267.4-307', '168-22', '70-74', '69-183', '96-124', '190-33', '14-47', '47-94', '267F-283', '30-35', '93-99', '19-22', '106-123', '129-11', '178-133', '267D-329', '107-136', '42-70', '71-55', '128-71', '134-59', '42-97', '43A-28', '81-103', '14-64', '267D-319', '68-76', '8-75', '41-37', '85-76', '90-125', '102-46', '174-37', '140-148', '23-156', '20-75', '34-8', '178-79', '236-95', '70-91', '175-84', '261-6', '199-90', '162-29', '116-94', '265B-28', '74-6', '196-154', '1A-211', '252-172', '154-111', '236-146', '184-109', '180-57', '228-55', '184-159', '166-13', '42-81', '154-89', '92-88', '90-155', '83-90', '107-9', '157-26', '183-100', '84-91', '69-162', '254-76', '192-121', '265A-35', '267D-259', '97-111', '128-63', '230-116', '119-90', '74-1', '90-162', '273-20', '75-128', '230-97', '93-76', '174-36', '189-72', '116-12', '261-112', '70-92', '265B-26', '83-99', '155-42', '160-83', '169-86', '105-68', '231-27', '105-82', '160-76', '88-48', '162-26', '255-21', '176-15', '199-67', '273-2', '20-83', '79-22', '120-48', '174-30', '91-52', '261-7', '21-16', '106-109', '182-89', '175-75', '141-80', '42-91', '93-78', '173-65', '136-15', '126-27', '18-65', '160-66', '154-97', '199-30', '267E-234', '84-101', '265A-46', '234-193', '133-52', '109-50', '83-98', '150-114', '162-19', '169-7', '91-191', '125-73', '83-15', '8-88', '107-117', '191-85', '110-91', '271-32', '81-100', '108-54', '162-54', '82-31', '159-2', '236-84', '254-82', '176-64', '169-67', '252-158', '169-46', '166-106', '133-12', '134-33', '85-66', '169-68', '128-72', '230-71', '83-80', '228-33', '174-33', '21-121', '100-62', '84-12', '175-37', '122-12', '254-78', '36-137', '199-31', '93-80', '90-127', '260-76', '200-22', '179-87', '195-59', '192-177', '260-46', '184-193', '169-47', '189-4', '226-46', '233-147', '156-25', '86-84', '74-8', '200-79', '106-124', '20-82', '96-152', '179-75', '139-83', '160-85', '174-27', '191-65', '265B-61', '230-41', '229-131', '182-88', '162-18', '233-175', '265C-25', '16-11', '229-117', '160-84', '133-48', '1A-189', '268B-15', '114A-120', '174-73', '160-63', '196-123', '234-178', '152-25', '18-64', '93-79', '182-90', '1A-192']"
  },
  {
    "Query": "find commercial parcels that, if larger than 5000 sq ft, must be within 400m of public transit, or if smaller, must be within 200m of residential areas.",
    "Code": "import geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import Point\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n# Project to metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n# Filter for commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n# Separate large and small commercial parcels\nlarge_commercial = commercial_parcels[commercial_parcels['land_area'] > 5000].copy()\nsmall_commercial = commercial_parcels[commercial_parcels['land_area'] <= 5000].copy()\n# Define transit stops (subway and major bus stops)\ntransit_stops = [\n    Point(-71.1189, 42.3736),  # Harvard Square\n    Point(-71.1031, 42.3656),  # Central Square\n    Point(-71.0865, 42.3625),  # Kendall/MIT\n    Point(-71.1226, 42.3782),  # Porter Square\n    Point(-71.1429, 42.3954)   # Alewife\n]\ntransit_gdf = gpd.GeoDataFrame(geometry=transit_stops, crs=parcels.crs)\ntransit_gdf_proj = transit_gdf.to_crs(epsg=26986)\n# Create 400m buffer around transit stops\ntransit_buffers = [geom.buffer(400) for geom in transit_gdf_proj.geometry]\ntransit_union_buffer = gpd.GeoSeries(transit_buffers).union_all()\n# CONDITION 1: Large commercial parcels within 400m of transit\nlarge_near_transit = large_commercial[large_commercial.geometry.intersects(transit_union_buffer)].copy()\n# Define residential use codes\nresidential_use_codes = [\n    '101', '1014', '102', '1028', '104', '105', '109', '1094', '1095', \n    '1098', '111', '112', '113', '114', '121', '970', '9700', '9421'\n]\n# Filter for residential parcels\nresidential_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(residential_use_codes)].copy()\n# Create 200m buffer around residential areas\nresidential_buffers = [geom.buffer(200) for geom in residential_parcels.geometry]\nresidential_union_buffer = gpd.GeoSeries(residential_buffers).union_all()\n# CONDITION 2: Small commercial parcels within 200m of residential areas\nsmall_near_residential = small_commercial[small_commercial.geometry.intersects(residential_union_buffer)].copy()\n# Combine results\nresult_parcels = pd.concat([large_near_transit, small_near_residential])\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n# Output results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} commercial parcels meeting conditional criteria:\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['1A-70', '1A-190', '95-76', '203B-52', '128-70', '18-74', '44-104', '168-36', '63-128', '273-51', '160-14', '203A-76', '15-3', '165-55', '252-160', '267F-293', '226-67', '30-38', '43A-24', '80-175', '90-14', '114A-66', '129-58', '267.4-288', '267D-282', '105-81', '182-84', '1A-172', '267.2-273', '267.1-278', '14-44', '165-53', '91-208', '42-87', '95-71', '43A-21', '13-16', '41-26', '32-53', '90-133', '14-39', '30-40', '90-170', '184-168', '267F-391', '182-98', '268C-35', '31-15', '23-90', '9-41', '269-138', '175-68', '43-77', '15-30', '29-50', '67-67', '31-20', '14-36', '69-173', '54-25', '8-91', '16-23', '189-57', '267C-71', '265B-59', '44-105', '67-14', '95-78', '121-94', '69-165', '8-76', '96-109', '169-84', '267D-285', '267D-310', '267F-274', '42-86', '69-159', '90-169', '69-182', '95-74', '133-23', '18-77', '93-73', '267C-70', '267.4-319', '168-33', '95-79', '64-6', '16-32', '43-78', '12-19', '267E-280', '8-86', '267E-284', '267F-279', '267.2-267', '160-69', '47-97', '15-29', '88-53', '265A-29', '267F-296', '267.3-253', '92-127', '27-82', '55-18', '267.4-323', '261-77', '169-98', '67-48', '181-88', '69-148', '43-73', '1A-213', '183-119', '17-84', '267.3-285', '69-179', '17-74', '168-13', '66-153', '68-77', '95-72', '119-95', '43-76', '41-38', '39-88', '44-100', '267D-315', '267.4-313', '268C-32', '267D-299', '15-28', '121-2', '168-41', '1A-201', '1A-209', '46-12', '41-36', '10-16', '265A-31', '267E-285', '11-146', '267F-301', '14-58', '44-99', '28-23', '267.2-272', '169-42', '160-11', '30-42', '67-66', '133-51', '11-40', '116-117', '54-19', '110-87', '63-132', '23-149', '267D-305', '267.4-305', '14-45', '30-41', '267D-286', '133-33', '172-29', '267.4-322', '267E-279', '70-22', '19-23', '152-52', '43-70', '1A-200', '267D-311', '169-102', '43A-16', '67-47', '267E-282', '169-99', '68-47', '165-57', '13-23', '160-57', '168-60', '267F-281', '95-75', '41-29', '265D-53', '1A-105', '39-173', '160-48', '70-86', '63-135', '191-112', '267.4-307', '168-22', '70-74', '69-183', '96-124', '190-33', '14-47', '47-94', '267F-283', '30-35', '93-99', '19-22', '106-123', '129-11', '178-133', '267D-329', '107-136', '42-70', '71-55', '128-71', '134-59', '42-97', '43A-28', '81-103', '14-64', '267D-319', '68-76', '8-75', '41-37', '85-76', '90-125', '102-46', '174-37', '140-148', '23-156', '20-75', '34-8', '178-79', '236-95', '70-91', '175-84', '261-6', '199-90', '162-29', '116-94', '265B-28', '74-6', '196-154', '1A-211', '252-172', '154-111', '236-146', '184-109', '180-57', '228-55', '184-159', '166-13', '42-81', '154-89', '92-88', '90-155', '83-90', '107-9', '157-26', '183-100', '84-91', '69-162', '254-76', '192-121', '265A-35', '267D-259', '97-111', '128-63', '230-116', '119-90', '74-1', '90-162', '273-20', '75-128', '230-97', '93-76', '174-36', '189-72', '116-12', '261-112', '70-92', '265B-26', '83-99', '155-42', '160-83', '169-86', '105-68', '231-27', '105-82', '160-76', '88-48', '162-26', '255-21', '176-15', '199-67', '273-2', '20-83', '79-22', '120-48', '174-30', '91-52', '261-7', '21-16', '106-109', '182-89', '175-75', '141-80', '42-91', '93-78', '173-65', '136-15', '126-27', '18-65', '160-66', '154-97', '199-30', '267E-234', '84-101', '265A-46', '234-193', '133-52', '109-50', '83-98', '150-114', '162-19', '169-7', '91-191', '125-73', '83-15', '8-88', '107-117', '191-85', '110-91', '271-32', '81-100', '108-54', '162-54', '82-31', '159-2', '236-84', '254-82', '176-64', '169-67', '252-158', '169-46', '166-106', '133-12', '134-33', '85-66', '169-68', '128-72', '230-71', '83-80', '228-33', '174-33', '21-121', '100-62', '84-12', '175-37', '122-12', '254-78', '36-137', '199-31', '93-80', '90-127', '260-76', '200-22', '179-87', '195-59', '192-177', '260-46', '184-193', '169-47', '189-4', '226-46', '233-147', '156-25', '86-84', '74-8', '200-79', '106-124', '20-82', '96-152', '179-75', '139-83', '160-85', '174-27', '191-65', '265B-61', '230-41', '229-131', '182-88', '162-18', '233-175', '265C-25', '16-11', '229-117', '160-84', '133-48', '1A-189', '268B-15', '114A-120', '174-73', '160-63', '196-123', '234-178', '152-25', '18-64', '93-79', '182-90', '1A-192']"
  },
  {
    "Query": "find parcels that are: if zoned for commercial, must be larger than 8000 sq ft; if zoned for residential, must have less than 2 similar properties within 1000m",
    "Code": "import geopandas as gpd\nimport pandas as pd\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n# Project to metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n# Define residential use codes\nresidential_use_codes = [\n    '101', '1014', '102', '1028', '104', '105', '109', '1094', '1095', \n    '1098', '111', '112', '113', '114', '121', '970', '9700', '9421'\n]\n# Filter parcels by type\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\nresidential_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(residential_use_codes)].copy()\n# CONDITION 1: Commercial parcels larger than 8000 sq ft\nlarge_commercial = commercial_parcels[commercial_parcels['land_area'] > 8000].copy()\n# CONDITION 2: Residential parcels with less than 2 similar properties within 1000m\n# Function to count similar properties within 1000m\ndef count_similar_properties(parcel_geom, parcel_use_code, all_parcels, buffer_distance=1000):\n    # Get the specific residential type\n    use_code = str(parcel_use_code)\n    \n    # Find similar properties (same use code)\n    similar_parcels = all_parcels[all_parcels['use_code'].astype(str) == use_code].copy()\n    \n    # Create buffer\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    \n    # Count similar properties within buffer (excluding the parcel itself)\n    similar_within_buffer = similar_parcels[similar_parcels.geometry.intersects(buffered_geom)].copy()\n    \n    # Subtract 1 to exclude the parcel itself\n    count = len(similar_within_buffer) - 1\n    return max(0, count)  # Ensure count is not negative\n# Calculate similar property count for each residential parcel\nresidential_parcels.loc[:, 'similar_count'] = [\n    count_similar_properties(row.geometry, row.use_code, residential_parcels)\n    for idx, row in residential_parcels.iterrows()\n]\n# Filter for residential parcels with less than 2 similar properties\nresidential_low_density = residential_parcels[residential_parcels['similar_count'] < 2].copy()\n# Combine results\nresult_parcels = pd.concat([large_commercial, residential_low_density])\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n# Output results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} parcels meeting conditional criteria:\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['1A-70', '1A-190', '140-148', '95-76', '203B-52', '128-70', '18-74', '20-75', '44-104', '186-96', '168-36', '63-128', '273-35', '251-221', '273-51', '160-14', '203A-76', '15-3', '236-95', '165-55', '81-50', '127-119', '252-160', '267F-293', '226-67', '30-38', '43A-24', '165-34', '80-175', '216-7', '90-14', '81-3', '114A-66', '177-34', '129-58', '267.4-288', '267D-282', '105-81', '265B-28', '182-84', '63-134', '1A-172', '196-154', '267.2-273', '267.1-278', '107-135', '14-44', '252-172', '165-53', '219-37', '133-36', '91-208', '42-87', '180-57', '95-71', '184-159', '43A-21', '13-16', '7-35', '41-26', '32-53', '96-98', '267.3-278', '90-133', '229-135', '92-88', '265A-39', '248-82', '265A-7', '110-63', '90-155', '14-39', '107-9', '157-26', '30-40', '91-118', '90-170', '84-91', '35-36', '184-168', '267F-391', '182-98', '169-100', '268C-35', '31-15', '178-1', '23-90', '128-63', '9-41', '267.4-247', '267D-256', '269-138', '175-68', '74-1', '43-77', '70-90', '15-30', '183-97', '90-162', '29-50', '67-67', '273-20', '31-20', '267D-316', '14-36', '69-173', '54-25', '8-91', '16-23', '189-57', '118-67', '189-72', '267C-71', '116-12', '265B-59', '44-105', '67-14', '95-78', '121-94', '69-165', '8-76', '9-61', '94-7', '70-92', '96-109', '192-39', '169-84', '265B-26', '267.4-284', '267D-285', '267D-310', '105-68', '267F-274', '42-86', '90-13', '69-159', '90-169', '105-82', '117-29', '69-182', '260-73', '95-74', '75-170', '133-23', '18-77', '93-73', '267C-70', '267.4-319', '176-15', '168-33', '95-79', '142-44', '273-2', '64-6', '16-32', '260-74', '100-68', '43-78', '109-22', '12-19', '100-86', '267E-280', '8-86', '267E-284', '267F-279', '267.2-267', '175-75', '160-69', '47-97', '252-114', '19-10', '136-15', '44-106', '15-29', '18-65', '88-53', '265A-29', '84-1', '267F-296', '267.3-253', '184-31', '92-127', '27-82', '55-18', '267E-234', '43-71', '267.4-323', '84-101', '90-161', '261-77', '169-98', '121-13', '67-48', '181-88', '107-8', '36-164', '69-148', '43-73', '1A-213', '84-85', '183-119', '17-84', '267.3-285', '69-179', '17-74', '168-13', '66-153', '68-77', '8-88', '95-72', '15-31', '107-117', '119-95', '191-85', '43-76', '110-91', '81-100', '41-38', '162-54', '267.4-296', '39-88', '68-50', '267.4-295', '44-100', '154-101', '181-80', '169-46', '267D-315', '267.4-313', '129-55', '268C-32', '134-33', '267D-299', '48-158', '15-28', '121-2', '128-72', '230-71', '168-41', '1A-201', '267E-244', '1A-209', '46-12', '41-36', '10-16', '24-133', '265A-31', '267E-285', '83-80', '108-80', '178-118', '11-146', '267F-301', '265A-43', '14-58', '44-99', '100-62', '175-37', '28-23', '7-37', '267.2-272', '169-42', '160-11', '30-42', '67-66', '7-31', '184-191', '133-51', '11-40', '116-117', '7-115', '54-19', '110-87', '63-132', '199-31', '23-149', '69-62', '84-97', '267D-305', '267.4-305', '260-76', '14-45', '200-22', '30-41', '179-87', '267D-286', '39-179', '133-33', '172-29', '267.4-322', '260-46', '169-47', '267E-279', '70-22', '19-23', '152-52', '43-70', '1A-200', '267D-311', '267D-325', '169-102', '105-77', '156-25', '43A-16', '178-21', '67-47', '105-89', '267E-282', '273-29', '169-99', '68-47', '165-57', '13-23', '160-57', '168-60', '267F-281', '267.2-264', '95-75', '106-124', '41-29', '265D-53', '1A-105', '39-173', '160-48', '70-86', '63-135', '191-112', '267.4-307', '87-153', '168-22', '191-65', '70-74', '69-183', '14-26', '96-124', '265B-61', '190-33', '178-117', '14-47', '267.4-209', '47-94', '267F-283', '30-35', '93-99', '19-22', '182-88', '106-123', '265C-25', '129-11', '178-133', '16-11', '267D-329', '107-136', '42-70', '71-55', '170-39', '1A-189', '21-120', '128-71', '22-109', '268B-15', '134-59', '42-97', '43A-28', '91-70', '81-103', '63-131', '14-64', '169-93', '267D-319', '234-178', '81-21', '68-76', '9-31', '152-25', '18-64', '8-75', '41-37', '42-33', '85-76', '1A-192', '7-34', '268A-47', '25-9', '256-12', '81-105', '252A-124', '106-129', '107-139', '156-52', '23-40', '156-53', '187-47', '105-133', '87-136', '149-38', '202-32', '203B-57', '105-131', '261-169', '81-106', '86-45', '1A-196', '266-33', '202-95', '241-12']"
  },
  {
    "Query": "find mixed-use parcels that, if north of massachusetts avenue, must have retail on the ground floor, otherwise must have at least 3000 sq ft of commercial space.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import LineString\nfrom shapely.ops import unary_union\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n# Project to metric CRS for accurate analysis\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n# Define Massachusetts Avenue as a line\nmass_ave_points = [\n    (-71.107894, 42.367672),  # Near Tanjore restaurant on Mass Ave\n    (-71.10564, 42.367132),   # Near Fire Department on Mass Ave\n    (-71.10144, 42.363676)    # Near The Boston Lamb Takedown on Mass Ave\n]\nmass_ave = LineString(mass_ave_points)\nmass_ave_gdf = gpd.GeoDataFrame(geometry=[mass_ave], crs=parcels.crs)\nmass_ave_proj = mass_ave_gdf.to_crs(epsg=26986)\n# Define mixed-use codes\nmixed_use_codes = [\n    '0101', '0104', '0105', '0111', '0112', '0121', '013', '031', '0340', \n    '0406', '041', '0942'\n]\n# Define retail use codes\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\n# Filter for mixed-use parcels\nmixed_use_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(mixed_use_codes)].copy()\n# Determine north/south of Massachusetts Avenue\n# Create a function to check if a parcel is north of Mass Ave\ndef is_north_of_mass_ave(parcel_geom, mass_ave_line):\n    # This is a simplified approach - for a more accurate approach,\n    # we would need to extend the line and use proper north/south calculation\n    # based on the perpendicular distance and direction\n    \n    # Get centroid of parcel\n    centroid = parcel_geom.centroid\n    \n    # Calculate y-coordinate (latitude) difference from Mass Ave\n    # If y-coordinate is greater than Mass Ave's average y, it's north\n    mass_ave_y = mass_ave_line.centroid.y\n    return centroid.y > mass_ave_y\n# Add a column indicating north/south of Mass Ave\nmixed_use_parcels['north_of_mass_ave'] = mixed_use_parcels.geometry.apply(\n    lambda geom: is_north_of_mass_ave(geom, mass_ave_proj.geometry.iloc[0])\n)\n# CONDITION 1: For parcels north of Mass Ave, check if they have retail on ground floor\n# Filter POI data for retail businesses\nretail_poi = poi_proj[poi_proj['business_type'].isin(['retail', 'grocery_store', 'convenience_store', 'department_store'])]\n# Function to check if a parcel has retail on ground floor\ndef has_retail_on_ground_floor(parcel_geom, retail_poi_geoms):\n    # This is a simplified approach - in reality, we would need building floor data\n    # Here we just check if any retail POI intersects with the parcel\n    return any(parcel_geom.intersects(geom) for geom in retail_poi_geoms)\n# Get retail POI geometries\nretail_poi_geoms = retail_poi.geometry.tolist()\n# Check for retail on ground floor for parcels north of Mass Ave\nnorth_parcels_with_retail = []\nfor idx, row in mixed_use_parcels[mixed_use_parcels['north_of_mass_ave']].iterrows():\n    if has_retail_on_ground_floor(row.geometry, retail_poi_geoms):\n        north_parcels_with_retail.append(row['ml'])\n# CONDITION 2: For parcels south of Mass Ave, check commercial space size\n# For our simplified model, assume 'commercial_space' might be a column\n# If not, estimate from land_area or other metrics\nsouth_parcels_with_space = []\nfor idx, row in mixed_use_parcels[~mixed_use_parcels['north_of_mass_ave']].iterrows():\n    # If commercial_space column exists, use it\n    if 'commercial_space' in row:\n        commercial_space = row['commercial_space']\n    else:\n        # Estimate commercial space as a percentage of land area\n        # For mixed-use, often 30-50% of the land area is commercial\n        commercial_space = row['land_area'] * 0.4  # 40% estimate\n    \n    if commercial_space >= 3000:\n        south_parcels_with_space.append(row['ml'])\n# Combine results from both conditions\nnorth_ids = set(north_parcels_with_retail)\nsouth_ids = set(south_parcels_with_space)\nall_ids = north_ids.union(south_ids)\n# Filter for final results\nresult_parcels = mixed_use_parcels[mixed_use_parcels['ml'].isin(all_ids)]\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} mixed-use parcels meeting conditional criteria\")\nprint(f\"North of Mass Ave: {len(north_ids)}\")\nprint(f\"South of Mass Ave: {len(south_ids)}\")\nprint(f\"Parcel IDs: {result_ids}\")",
    "Answer": "['102-17', '106-103', '106-105', '106-122', '106-125', '11-43', '119-4', '12-17', '125-42', '128-30', '14-1038', '14-59', '152-51', '16-35', '162-74', '169-85', '189-53', '263-53', '29-34', '66-1', '70-87', '83-35', '85-28', '90-111', '90-194', '91-206', '91-207', '92-126', '92-132', '96-126']"
  },
  {
    "Query": "Find parcels between 1000-10000 square feet within 800 meters of Kendall/MIT station in census tracts where at least 5% of residents have advanced degrees.",
    "Code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\ncensus = gpd.read_file('cambridge_census_cambridge_pct.geojson')\n\n# Kendall point\nkendall = Point(-71.0865, 42.3625)\nkdf = gpd.GeoDataFrame(geometry=[kendall], crs=parcels.crs).to_crs(epsg=26986)\n\n# Project\nparcels_proj = parcels.to_crs(epsg=26986)\ncensus_proj  = census.to_crs(epsg=26986)\n\n# Size filter\nmid = parcels_proj[(parcels_proj['land_area'] >= 1000) & (parcels_proj['land_area'] <= 10000)].copy()\n\n# Buffer Kendall 800m\nkbuf = kdf.geometry.buffer(800).iloc[0]\nnear_k = mid[mid.geometry.intersects(kbuf)].copy()\n\n# Spatial join and advanced degree filter\njoined = gpd.sjoin(near_k, census_proj, how='left', predicate='within')\nresult = joined[joined['pct_adv_deg'] >= 0.05]\n\n# Output\nids = sorted(result['ml'].tolist())\nprint(ids)",
    "Answer": "['40-148', '40-52', '40-53', '42-13', '42-14', '42-18', '42-19', '42-21', '42-22', '42-23', '42-57', '42-58', '42-68', '42-81', '42-91', '42-92', '42-93', '42-95', '42-98', '42-99', '76-24', '76-54', '76-55', '77-52', '77-57', '77-88', '77-89']"
  },
  {
    "Query": "Find office parcels with at least 7500 square feet that are within 400 meters of both a restaurant and a coffee shop.",
    "Code": "import geopandas as gpd\nfrom shapely.ops import unary_union\n\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi      = gpd.read_file('cambridge_poi_processed.geojson')\n\n# Project\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj     = poi.to_crs(epsg=26986)\n\n# Office codes\noffice_codes = ['340','341','343','345','346']\noffice = parcels_proj[parcels_proj['use_code'].isin(office_codes)].copy()\n\noffice = office[office['land_area'] > 6000].copy()  # lowered from 7500\n\n# Buffers\nrest = poi_proj[poi_proj['business_type']=='restaurant']\ncof  = poi_proj[poi_proj['SUB_CATEGORY']=='Snack and Nonalcoholic Beverage Bars']\nbuf_r = unary_union(rest.geometry.buffer(400))\nbuf_c = unary_union(cof.geometry.buffer(400))\n\n# Intersection\no1 = office[office.geometry.intersects(buf_r)]\nresult = o1[o1.geometry.intersects(buf_c)]\n\n# Output\nids = sorted(result['ml'].tolist())\nprint(ids)",
    "Answer": "['10-31', '10-38', '105-77', '105-81', '105-89', '106-123', '107-135', '107-136', '109-22', '109-51', '11-40', '110-16', '114A-66', '116-117', '117-29', '118-34', '119-95', '12-19', '121-13', '121-2', '121-94', '128-70', '129-11', '13-16', '13-23', '133-23', '133-33', '133-51', '134-59', '14-26', '14-36', '14-47', '14-58', '15-3', '15-30', '15-31', '152-52', '16-23', '160-11', '160-14', '160-48', '160-57', '160-59', '160-69', '162-36', '162-67', '165-53', '165-55', '165-57', '168-13', '168-21', '168-22', '168-25', '168-33', '168-36', '168-41', '168-59', '168-60', '168-64', '169-102', '169-42', '169-50', '169-84', '169-93', '169-98', '169-99', '17-74', '17-84', '172-29', '174-26', '175-68', '178-1', '178-106', '178-117', '178-133', '179-42', '18-74', '181-88', '182-84', '182-98', '183-119', '183-97', '184-168', '189-57', '19-23', '190-33', '191-112', '192-39', '1A-105', '1A-172', '1A-190', '1A-200', '1A-201', '1A-209', '1A-70', '20-31', '21-120', '216-7', '226-67', '23-149', '23-90', '236-148', '24-133', '252-160', '254-86', '261-77', '265A-29', '265A-31', '265B-59', '265D-53', '267.2-267', '267.3-253', '267.4-288', '267.4-305', '267C-70', '267D-282', '267D-329', '267F-274', '267F-279', '267F-281', '267F-283', '267F-293', '267F-296', '267F-301', '267F-391', '268C-32', '268C-35', '27-82', '273-29', '273-40', '273-51', '28-23', '28-31', '29-50', '31-20', '39-173', '39-88', '41-36', '41-38', '42-70', '42-86', '42-87', '42-97', '43-70', '43-73', '43-78', '43A-21', '44-100', '44-104', '44-105', '44-99', '46-12', '47-94', '54-25', '55-18', '68-50', '69-159', '70-22', '70-74', '70-86', '8-75', '8-76', '80-175', '81-103', '83-1', '83-92', '84-1', '84-97', '85-76', '87-153', '88-53', '9-41', '90-13', '90-133', '90-14', '90-161', '90-169', '90-170', '90-20', '91-118', '91-208', '91-87', '93-73', '93-75', '93-99', '95-76', '95-79', '96-109', '96-124', '96-98']"
  }
]
