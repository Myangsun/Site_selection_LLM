[
  {
    "exact_match": 0.0,
    "result_match_rate": 1.0,
    "precision": 1.0,
    "recall": 0.9139784946236559,
    "f1_score": 0.9550561797752808,
    "generated_count": 85,
    "ground_truth_count": 93,
    "correct_count": 85,
    "query": "Find commercial parcels within 500 meters of Harvard Square.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": true,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Define Harvard Square location\nharvard_square = gpd.GeoDataFrame(\n    geometry=[gpd.points_from_xy([-71.1189], [42.3736], crs='EPSG:4326')[0]],\n    crs='EPSG:4326'\n)\n\n# Project to accurate CRS\nparcels_proj = parcels.to_crs(epsg=26986)\nharvard_square_proj = harvard_square.to_crs(epsg=26986)\n\n# Buffer 500m around Harvard Square\nharvard_buffer = harvard_square_proj.geometry.buffer(500)[0]\nnear_harvard = parcels_proj[parcels_proj.geometry.intersects(harvard_buffer)]\n\n# Filter for commercial use codes\ncommercial_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '330', \n    '332', '334', '340', '341', '343', '345', '346', '353', '362', \n    '375', '404', '406', '434', '440', '941'\n]\ncommercial_parcels = near_harvard[near_harvard['use_code'].astype(str).isin(commercial_codes)]\n\n# Sort by parcel ID (ml column)\nresult_ids = sorted(commercial_parcels['ml'].tolist())\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      "133-12",
      "133-14",
      "133-15",
      "133-20",
      "133-23",
      "133-27",
      "133-28",
      "133-36",
      "133-48",
      "133-49",
      "133-51",
      "133-52",
      "134-7",
      "136-15",
      "159-2",
      "160-11",
      "160-14",
      "160-48",
      "160-57",
      "160-58",
      "160-59",
      "160-63",
      "160-64",
      "160-66",
      "160-67",
      "160-69",
      "160-71",
      "160-72",
      "160-76",
      "160-77",
      "160-83",
      "160-84",
      "160-85",
      "162-17",
      "162-18",
      "162-19",
      "162-26",
      "162-29",
      "162-36",
      "162-54",
      "162-64",
      "162-65",
      "162-67",
      "162-68",
      "162-73",
      "165-34",
      "165-53",
      "165-55",
      "165-57",
      "166-24",
      "166-33",
      "166-35",
      "166-37",
      "166-52",
      "166-77",
      "168-13",
      "168-20",
      "168-21",
      "168-22",
      "168-25",
      "168-33",
      "168-36",
      "168-41",
      "168-48",
      "168-49",
      "168-59",
      "168-60",
      "168-64",
      "169-100",
      "169-102",
      "169-42",
      "169-46",
      "169-47",
      "169-50",
      "169-67",
      "169-68",
      "169-7",
      "169-81",
      "169-82",
      "169-84",
      "169-86",
      "169-93",
      "169-98",
      "169-99",
      "170-39"
    ]
  },
  {
    "query": "Find parcels larger than 6000 square feet that are zoned for retail use.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Projected CRS for Cambridge, MA\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter parcels larger than 6000 sq ft\nlarge_parcels = parcels[parcels['land_area'] > 6000].copy()\n\n# Retail zoning codes\nretail_zoning_codes = ['000400', '000401', '000402', '000403', '000404', '000405', '000406', '000407', '000408', '000409', '000410', '000411', '000412', '000413', '000414', '000415', '000416', '000417', '000418', '000419', '000420', '000421', '000422', '000423', '000424', '000425', '000426', '000427', '000428', '000429', '000430', '000431', '000432', '000433', '000434', '000435', '000436', '000437', '000438', '000439', '000440', '000441', '000442', '000443', '000444', '000445', '000446', '000447', '000448', '000449', '000450', '000451', '000452', '000453', '000454', '000455', '000456', '000457', '000458', '000459', '000460', '000461', '000462', '000463', '000464', '000465', '000466', '000467', '000468', '000469', '000470', '000471', '000472', '000473', '000474', '000475', '000476', '000477', '000478', '000479', '000480', '000481', '000482', '000483', '000484', '000485', '000486', '000487', '000488', '000489', '000490', '000491', '000492', '000493', '000494', '000495', '000496', '000497', '000498', '000499', '000500', '000501', '000502', '000503', '000504', '000505', '000506', '000507', '000508', '000509', '000510', '000511', '000512', '000513', '000514', '000515', '000516', '000517', '000518', '000519', '000520', '000521', '000522', '000523', '000524', '000525', '000526', '000527', '000528', '000529', '000530', '000531', '000532', '000533', '000534', '000535', '000536', '000537', '000538', '000539', '000540', '000541', '000542', '000543', '000544', '000545', '000546', '000547', '000548', '000549', '000550', '000551', '000552', '000553', '000554', '000555', '000556', '000557', '000558', '000559', '000560', '000561', '000562', '000563', '000564', '000565', '000566', '000567', '000568', '000569', '000570', '000571', '000572', '000573', '000574', '000575', '000576', '000577', '000578', '000579', '000580', '000581', '000582', '000583', '000584', '000585', '000586', '000587', '000588', '000589', '000590', '000591', '000592', '000593', '000594', '000595', '000596', '000597', '000598', '000599', '000600', '000601', '000602', '000603', '000604', '000605', '000606', '000607', '000608', '000609', '000610', '000611', '000612', '000613', '000614', '000615', '000616', '000617', '000618', '000619', '000620', '000621', '000622', '000623', '000624', '000625', '000626', '000627', '000628', '000629', '000630', '000631', '000632', '000633', '000634', '000635', '000636', '000637', '000638', '000639', '000640', '000641', '000642', '000643', '000644', '000645', '000646', '000647', '000648', '000649', '000650', '000651', '000652', '000653', '000654', '000655', '000656', '000657', '000658', '000659', '000660', '000661', '000662', '000663', '000664', '000665', '000666', '000667', '000668', '000669', '000670', '000671', '000672', '000673', '000674', '000675', '000676', '000677', '000678', '000679', '000680', '000681', '000682', '000683', '000684', '000685', '000686', '000687', '000688', '000689', '000690', '000691', '000692', '000693', '000694', '000695', '000696', '000697', '000698', '000699', '000700', '000701', '000702', '000703', '000704', '000705', '000706', '000707', '000708', '000709', '000710', '000711', '000712', '000713', '000714', '000715', '000716', '000717', '000718', '000719', '000720', '000721', '000722', '000723', '000724', '000725', '000726', '000727', '000728', '000729', '000730', '000731', '000732', '000733', '000734', '000735', '000736', '000737', '000738', '000739', '000740', '000741', '000742', '000743', '000744', '000745', '000746', '000747', '000748', '000749', '000750', '000751', '000752', '000753', '000754', '000755', '000756', '000757', '000758', '000759', '000760', '000761', '000762', '000763', '000764', '000765', '000766', '000767', '000768', '000769', '000770', '000771', '000772', '000773', '000774', '000775', '000776', '000777', '000778', '000779', '000780', '000781', '000782', '000783', '000784', '000785', '000786', '000787', '000788', '000789', '000790', '000791', '000792', '000793', '000794', '000795', '000796', '000797', '000798', '000799', '000800', '000801', '000802', '000803', '000804', '000805', '000806', '000807', '000808', '000809', '000810', '000811', '000812', '000813', '000814', '000815', '000816', '000817', '000818', '000819', '000820', '000821', '000822', '000823', '000824', '000825', '000826', '000827', '000828', '000829', '000830', '000831', '000832', '000833', '000834', '000835', '000836', '000837', '000838', '000839', '000840', '000841', '000842', '000843', '000844', '000845', '000846', '000847', '000848', '000849', '000850', '000851', '000852', '000853', '000854', '000855', '000856', '000857', '000858', '000859', '000860', '000861', '000862', '000863', '000864', '000865', '000866', '000867', '000868', '000869', '000870', '000871', '000872', '000873', '000874', '000875', '000876', '000877', '000878', '000879', '000880', '000881', '000882', '000883', '000884', '000885', '000886', '000887', '000888', '000889', '000890', '000891', '000892', '000893', '000894', '000895', '000896', '000897', '000898', '000899', '000900', '000901', '000902', '000903', '000904', '000905', '000906', '000907', '000908', '000909', '000910', '000911', '000912', '000913', '000914', '000915', '000916', '000917', '000918', '000919', '000920', '000921', '000922', '000923', '000924', '000925', '000926', '000927', '000928', '000929', '000930', '000931', '000932', '000933', '000934', '000935', '000936', '000937', '000938', '000939', '000940', '000941', '000942', '000943', '000944', '000945', '000946', '000947', '000948', '000949', '000950', '000951', '000952', '000953', '000954', '000955', '000956', '000957', '000958', '000959', '000960', '000961', '000962', '000963', '000964', '000965', '000966', '000967', '000968', '000969', '000970', '000971', '000972', '000973', '000974', '000975', '000976', '000977', '000978', '000979', '000980', '000981', '000982', '000983', '000984', '000985', '000986', '000987', '000988', '000989', '000990', '000991', '000992', '000993', '000994', '000995', '000996', '000997', '000998', '000999', '001000', '001001', '001002', '001003', '001004', '001005', '001006', '001007', '001008', '001009', '001010', '001011', '001012', '001013', '001014', '001015', '001016', '001017', '001018', '001019', '001020', '001021', '001022', '001023', '001024', '001025', '001026', '001027', '001028', '001029', '001030', '001031', '001032', '001033', '001034', '001035', '001036', '001037', '001038', '001039', '001040', '001041', '001042', '001043', '001044', '001045', '001046', '001047', '001048', '001049', '001050', '001051', '001052', '001053', '001054', '001055', '001056', '001057', '001058', '001059', '001060', '001061', '001062', '001063', '001064', '001065', '001066', '001067', '001068', '001069', '001070', '001071', '001072', '001073', '001074', '001075', '001076', '001077', '001078', '001079', '001080', '001081', '001082', '001083', '001084', '001085', '001086', '001087', '001088', '001089', '001090', '001091', '001092', '001093', '001094', '001095', '001096', '001097', '001098', '001099', '001100', '001101', '001102', '001103', '001104', '001105', '001106', '001107', '001108', '001109', '001110', '001111', '001112', '001113', '001114', '001115', '001116', '001117', '001118', '001119', '001120', '001121', '001122', '001123', '001124', '001125', '001126', '001127', '001128', '001129', '001130', '001131', '001132', '001133', '001134', '001135', '001136', '001137', '001138', '001139', '001140', '001141', '001142', '001143', '001144', '001145', '001146', '001147', '001148', '001149', '001150', '001151', '001152', '001153', '001154', '001155', '001156', '001157', '001158', '001159', '001160', '001161', '001162', '001163', '001164', '001165', '001166', '001167', '001168', '001169', '001170', '001171', '001172', '001173', '001174', '001175', '001176', '001177', '001178', '001179', '001180', '001181', '001182', '001183', '001184', '001185', '001186', '001187', '001188', '001189', '001190', '001191', '001192', '001193', '001194', '001195', '001196', '001197', '001198', '001199', '001200', '001201', '001202', '001203', '001204', '001205', '001206', '001207', '001208', '001209', '001210', '001211', '001212', '001213', '001214', '001215', '001216', '001217', '001218', '001219', '001220', '001221', '001222', '001223', '001224', '001225', '001226', '001227', '001228', '001229', '001230', '001231', '001232', '001233', '001234', '001235', '001236', '001237', '001238', '001239', '001240', '001241', '001242', '001243', '001244', '001245', '001246', '001247', '001248', '001249', '001250', '001251', '001252', '001253', '001254', '001255', '001256', '001257', '001258', '001259', '001260', '001261', '001262', '001263', '001264', '001265', '001266', '001267', '001268', '001269', '001270', '001271', '001272', '001273', '001274', '001275', '001276', '001277', '001278', '001279', '001280', '001281', '001282', '001283', '001284', '001285', '001286', '001287', '001288', '001289', '001290', '001291', '001292', '001293', '001294', '001295', '001296', '001297', '001298', '001299', '001300', '001301', '001302', '001303', '001304', '001305', '001306', '001307', '001308', '001309', '001310', '001311', '001312', '001313', '001314', '001315', '001316', '001317', '001318', '001319', '001320', '001321', '001322', '001323', '001324', '001325', '001326', '001327', '001328', '001329', '001330', '001331', '001332', '001333', '001334', '001335', '001336', '001337', '001338', '001339', '001340', '001341', '001342', '001343', '001344', '001345', '001346', '001347', '001348', '001349', '001350', '001351', '001352', '001353', '001354', '001355', '001356', '001357', '001358', '001359', '001360', '001361', '001362', '001363', '001364', '001365', '001366', '001367', '001368', '001369', '001370', '001371', '001372', '001373', '001374', '001375', '001376', '001377', '001378', '001379', '001380', '001381', '001382', '001383', '001384', '001385', '001386', '001387', '001388', '001389', '001390', '001391', '001392', '001393', '001394', '001395', '001396', '001397', '001398', '001399', '001400', '001401', '001402', '001403', '001404', '001405', '001406', '001407', '001408', '001409', '001410', '001411', '001412', '001413', '001414', '001415', '001416', '001417', '001418', '001419', '001420', '001421', '001422', '001423', '001424', '001425', '001426', '001427', '001428', '001429', '001430', '001431', '001432', '001433', '001434', '001435', '001436', '001437', '001438', '001439', '001440', '001441', '001442', '001443', '001444', '001445', '001446', '001447', '001448', '001449', '001450', '001451', '001452', '001453', '001454', '001455', '001456', '001457', '001458', '001459', '001460', '001461', '001462', '001463', '001464', '001465', '001466', '001467', '001468', '001469', '001470', '001471', '001472', '001473', '001474', '001475', '001476', '001477', '001478', '001479', '001480', '001481', '001482', '001483', '001484', '001485', '001486', '001487', '001488', '001489', '001490', '001491', '001492', '001493', '001494', '001495', '001496', '001497', '001498', '001499', '001500', '001501', '001502', '001503', '001504', '001505', '001506', '001507', '001508', '001509', '001510', '001511', '001512', '001513', '001514', '001515', '001516', '001517', '001518', '001519', '001520', '001521', '001522', '001523', '001524', '001525', '001526', '001527', '001528', '001529', '001530', '001531', '001532', '001533', '001534', '001535', '001536', '001537', '001538', '001539', '001540', '001541', '001542', '001543', '001544', '001545', '001546', '001547', '001548', '001549', '001550', '001551', '001552', '001553', '001554', '001555', '001556', '001557', '001558', '001559', '001560', '001561', '001562', '001563', '001564', '001565', '001566', '001567', '001568', '001569', '001570', '001571', '001572', '001573', '001574', '001575', '001576', '001577', '001578', '001579', '001580', '001581', '001582', '001583', '001584', '001585', '001586', '001587', '001588', '001589', '001590', '001591', '001592', '001593', '001594', '001595', '001596', '001597', '001598', '001599', '001600', '001601', '001602', '001603', '001604', '001605', '001606', '001607', '001608', '001609', '001610', '001611', '001612', '001613', '001614', '001615', '001616', '001617', '001618', '001619', '001620', '001621', '001622', '001623', '001624', '001625', '001626', '001627', '001628', '001629', '001630', '001631', '001632', '001633', '001634', '001635', '001636', '001637', '001638', '001639', '001640', '001641', '001642', '001643', '001644', '001645', '001646', '001647', '001648', '001649', '001650', '001651', '001652', '001653', '001654', '001655', '001656', '001657', '001658', '001659', '001660', '001661', '001662', '001663', '001664', '001665', '001666', '001667', '001668', '001669', '001670', '001671', '001672', '001673', '001674', '001675', '001676', '001677', '001678', '001679', '001680', '001681', '001682', '001683', '001684', '001685', '001686', '001687', '001688', '001689', '001690', '001691', '001692', '001693', '001694', '001695', '001696', '001697', '001698', '001699', '001700', '001701', '001702', '001703', '001704', '001705', '001706', '001707', '001708', '001709', '001710', '001711', '001712', '001713', '001714', '001715', '001716', '001717', '001718', '001719', '001720', '001721', '001722', '001723', '001724', '001725', '001726', '001727', '001728', '001729', '001730', '001731', '001732', '001733', '001734', '001735', '001736', '001737', '001738', '001739', '001740', '001741', '001742', '001743', '001744', '001745', '001746', '001747', '001748', '001749', '001750', '001751', '001752', '001753', '001754', '001755', '001756', '001757', '001758', '001759', '001760', '001761', '001762', '001763', '001764', '001765', '001766', '001767', '001768', '001769', '001770', '001771', '001772', '001773', '001774', '001775', '001776', '001777', '001778', '001779', '001780', '001781', '001782', '001783', '001784', '001785', '001786', '001787', '001788', '001789', '001790', '001791', '001792', '001793', '001794', '001795', '001796', '001797', '001798', '001799', '001800', '001801', '001802', '001803', '001804', '001805', '001806', '001807', '001808', '001809', '001810', '001811', '001812', '001813', '001814', '001815', '001816', '001817', '001818', '001819', '001820', '001821', '001822', '001823', '001824', '001825', '001826', '001827', '001828', '001829', '001830', '001831', '001832', '001833', '001834', '001835', '001836', '001837', '001838', '001839', '001840', '001841', '001842', '001843', '001844', '001845', '001846', '001847', '001848', '001849', '001850', '001851', '001852', '001853', '001854', '001855', '001856', '001857', '001858', '001859', '001860', '001861', '001862', '001863', '001864', '001865', '001866', '001867', '001868', '001869', '001870', '001871', '001872', '001873', '001874', '001875', '001876', '001877', '001878', '001879', '001880', '001881', '001882', '001883', '001884', '001885', '001886', '001887', '001888', '001889', '001890', '001891', '001892', '001893', '001894', '001895', '001896', '001897', '001898', '001899', '001900', '001901', '001902', '001903', '001904', '001905', '001906', '001907', '001908', '001909', '001910', '001911', '001912', '001913', '001914', '001915', '001916', '001917', '001918', '001919', '001920', '001921', '001922', '001923', '001924', '001925', '001926', '001927', '001928', '001929', '001930', '001931', '001932', '001933', '001934', '001935', '001936', '001937', '001938', '001939', '001940', '001941', '001942', '001943', '001944', '001945', '001946', '001947', '001948', '001949', '001950', '001951', '001952', '001953', '001954', '001955', '001956', '001957', '001958', '001959', '001960', '001961', '001962', '001963', '001964', '001965', '001966', '001967', '001968', '001969', '001970', '001971', '001972', '001973', '001974', '001975', '001976', '001977', '001978', '001979', '001980', '001981', '001982', '001983', '001984', '001985', '001986', '001987', '001988', '001989', '001990', '001991', '001992', '001993', '001994', '001995', '001996', '001997', '001998', '001999', '002000', '002001', '002002', '002003', '002004', '002005', '002006', '002007', '002008', '002009', '002010', '002011', '002012', '002013', '002014', '002015', '002016', '002017', '002018', '002019', '002020', '002021', '002022', '002023', '002024', '002025', '002026', '002027', '002028', '002029', '002030', '002031', '002032', '002033', '002034', '002035', '002036', '002037', '002038', '002039', '002040', '002041', '002042', '002043', '002044', '002045', '002046', '002047', '002048', '002049', '002050', '002051', '002052', '002053', '002054', '002055', '002056', '002057', '002058', '002059', '002060', '002061', '002062', '002063', '002064', '002065', '002066', '002067', '002068', '002069', '002070', '002071', '002072', '002073', '002074', '002075', '002076', '002077', '002078', '002079', '002080', '002081', '002082', '002083', '002084', '002085', '002086', '002087', '002088', '002089', '002090', '002091', '002092', '002093', '002094', '002095', '002096', '002097', '002098', '002099', '002100', '002101', '002102', '002103', '002104', '002105', '002106', '002107', '002108', '002109', '002110', '002111', '002112', '002113', '002114', '002115', '002116', '002117', '002118', '002119', '002120', '002121', '002122', '002123', '002124', '002125', '002126', '002127', '002128', '002129', '002130', '002131', '002132', '002133', '002134', '002135', '002136', '002137', '002138', '002139', '002140', '002141', '002142', '002143', '002144', '002145', '002146', '002147', '002148', '002149', '002150', '002151', '002152', '002153', '002154', '002155', '002156', '002157', '002158', '002159', '002160', '002161', '002162', '002163', '002164', '002165', '002166', '002167', '002168', '002169', '002170', '002171', '002172', '002173', '002174', '002175', '002176', '002177', '002178', '002179', '002180', '002181', '002182', '002183', '002184', '002185', '002186', '002187', '002188', '002189', '002190', '002191', '002192', '002193', '002194', '002195', '002196', '002197', '002198', '002199', '002200', '002201', '002202', '002203', '002204', '002205', '002206', '002207', '002208', '002209', '002210', '002211', '002212', '002213', '002214', '002215', '002216', '002217', '002218', '002219', '002220', '002221', '002222', '002223', '002224', '002225', '002226', '002227', '002228', '002229', '002230', '002231', '002232', '002233', '002234', '002235', '002236', '002237', '002238', '002239', '002240', '002241', '002242', '002243', '002244', '002245', '002246', '002247', '002248', '002249', '002250', '002251', '002252', '002253', '002254', '002255', '002256', '002257', '002258', '002259', '002260', '002261', '002262', '002263', '002264', '002265', '002266', '002267', '002268', '002269', '002270', '002271', '002272', '002273', '002274', '002275', '002276', '002277', '002278', '002279', '002280', '002281', '002282', '002283', '002284', '002285', '002286', '002287', '002288', '002289', '002290', '002291', '002292', '002293', '002294', '002295', '002296', '002297', '002298', '002299', '002300', '002301', '002302', '002303', '002304', '002305', '002306', '002307', '002308', '002309', '002310', '002311', '002312', '002313', '002314', '002315', '002316', '002317', '002318', '002319', '002320', '002321', '002322', '002323', '002324', '002325', '002326', '002327', '002328', '002329', '002330', '002331', '002332', '002333', '002334', '002335', '002336', '002337', '002338', '002339', '002340', '002341', '002342', '002343', '002344', '002345', '002346', '002347', '002348', '002349', '002350', '002351', '002352', '002353', '002354', '002355', '002356', '002357', '002358', '002359', '002360', '002361', '002362', '002363', '002364', '002365', '002366', '002367', '002368', '002369', '002370', '002371', '002372', '002373', '002374', '002375', '002376', '002377', '002378', '002379', '002380', '002381', '002382', '002383', '002384', '002385', '002386', '002387', '002388', '002389', '002390', '002391', '002392', '002393', '002394', '002395', '002396', '002397', '002398', '002399', '002400', '002401', '002402', '002403', '002404', '002405', '002406', '002407', '002408', '002409', '002410', '002411', '002412', '002413', '002414', '002415', '002416', '002417', '002418', '002419', '002420', '002421', '002422', '002423', '002424', '002425', '002426', '002427', '002428', '002429', '002430', '002431', '002432', '002433', '002434', '002435', '002436', '002437', '002438', '002439', '002440', '002441', '002442', '002443', '002444', '002445', '002446', '002447', '002448', '002449', '002450', '002451', '002452', '002453', '002454', '002455', '002456', '002457', '002458', '002459', '002460', '002461', '002462', '002463', '002464', '002465', '002466', '002467', '002468', '002469', '002470', '002471', '002472', '002473', '002474', '002475', '002476', '002477', '002478', '002479', '002480', '002481', '002482', '002483', '002484', '002485', '002486', '002487', '002488', '002489', '002490', '002491', '002492', '002493', '002494', '002495', '002496', '002497', '002498', '002499', '002500', '002501', '002502', '002503', '002504', '002505', '002506', '002507', '002508', '002509', '002510', '002511', '002512', '002513', '002514', '002515', '002516', '002517', '002518', '002519', '002520', '002521', '002522', '002523', '002524', '002525', '002526', '002527', '002528', '002529', '002530', '002531', '002532', '002533', '002534', '002535', '002536', '002537', '002538', '002539', '002540', '002541', '002542', '002543', '002544', '002545', '002546', '002547', '002548', '002549', '002550', '002551', '002552', '002553', '002554', '002555', '002556', '002557', '002558', '002559', '002560', '002561', '002562', '002563', '002564', '002565', '002566', '002567', '002568', '002569', '002570', '002571', '002572', '002573', '002574', '002575', '002576', '002577', '002578', '002579', '002580', '002581', '002582', '002583', '002584', '002585', '002586', '002587', '002588', '002589', '002590', '002591', '002592', '002593', '002594', '002595', '002596', '002597', '002598', '002599', '002600', '002601', '002602', '002603', '002604', '002605', '002606', '002607', '002608', '002609', '002610', '002611', '002612', '002613', '002614', '002615', '002616', '002617', '002618', '002619', '002620', '002621', '002622', '002623', '002624', '002625', '002626', '002627', '002628', '002629', '002630', '002631', '002632', '002633', '002634', '002635', '002636', '002637', '002638', '002639', '002640', '002641', '002642', '002643', '002644', '002645', '002646', '002647', '002648', '002649', '002650', '002651', '002652', '002653', '002654', '002655', '002656', '002657', '002658', '002659', '002660', '002661', '002662', '002663', '002664', '002665', '002666', '002667', '002668', '002669', '002670', '002671', '002672', '002673', '002674', '002675', '002676', '002677', '002678', '002679', '002680', '002681', '002682', '002683', '002684', '002685', '002686', '002687', '002688', '002689', '002690', '002691', '002692', '002693', '002694', '002695', '002696', '002697', '002698', '002699', '002700', '002701', '002702', '002703', '002704', '002705', '002706', '002707', '002708', '002709', '002710', '002711', '002712', '002713', '002714', '002715', '002716', '002717', '002718', '002719', '002720', '002721', '002722', '002723', '002724', '002725', '002726', '002727', '002728', '002729', '002730', '002731', '002732', '002733', '002734', '002735', '002736', '002737', '002738', '002739', '002740', '002741', '002742', '002743', '002744', '002745', '002746', '002747', '002748', '002749', '002750', '002751', '002752', '002753', '002754', '002755', '002756', '002757', '002758', '002759', '002760', '002761', '002762', '002763', '002764', '002765', '002766', '002767', '002768', '002769', '002770', '002771', '002772', '002773', '002774', '002775', '002776', '002777', '002778', '002779', '002780', '002781', '002782', '002783', '002784', '002785', '002786', '002787', '002788', '002789', '002790', '002791', '002792', '002793', '002794', '002795', '002796', '002797', '002798', '002799', '002800', '002801', '002802', '002803', '002804', '002805', '002806', '002807', '002808', '002809', '002810', '002811', '002812', '002813', '002814', '002815', '002816', '002817', '002818', '002819', '002820', '002821', '002822', '002823', '002824', '002825', '002826', '002827', '002828', '002829', '002830', '002831', '002832', '002833', '002834', '002835', '002836', '002837', '002838', '002839', '002840', '002841', '002842', '002843', '002844', '002845', '002846', '002847', '002848', '002849', '002850', '002851', '002852', '002853', '002854', '002855', '002856', '002857', '002858', '002859', '002860', '002861', '002862', '002863', '002864', '002865', '002866', '002867', '002868', '002869', '002870', '002871', '002872', '002873', '002874', '002875', '002876', '002877', '002878', '002879', '002880', '002881', '002882', '002883', '002884', '002885', '002886', '002887', '002888', '002889', '002890', '002891', '002892', '002893', '002894', '002895', '002896', '002897', '002898', '002899', '002900', '002901', '002902', '002903', '002904', '002905', '002906', '002907', '002908', '002909', '002910', '002911', '002912', '002913', '002914', '002915', '002916', '002917', '002918', '002919', '002920', '002921', '002922', '002923', '002924', '002925', '002926', '002927', '002928', '002929', '002930', '002931', '002932', '002933', '002934', '002935', '002936', '002937', '002938', '002939', '002940', '002941', '002942', '002943', '002944', '002945', '002946', '002947', '002948', '002949', '002950', '002951', '002952', '002953', '002954', '002955', '002956', '002957', '002958', '002959', '002960', '002961', '002962', '002963', '002964', '002965', '002966', '002967', '002968', '002969', '002970', '002971', '002972', '002973', '002974', '002975', '002976', '002977', '002978', '002979', '002980', '002981', '002982', '002983', '002984', '002985', '002986', '002987', '002988', '002989', '002990', '002991', '002992', '002993', '002994', '002995', '002996', '002997', '002998', '002999', '003000', '003001', '003002', '003003', '003004', '003005', '003006', '003007', '003008', '003009', '003010', '003011', '003012', '003013', '003014', '003015', '003016', '003017', '003018', '003019', '003020', '003021', '003022', '003023', '003024', '003025', '003026', '003027', '003028', '003029', '003030', '003031', '003032', '003033', '003034', '003035', '003036', '003037', '003038', '003039', '003040', '003041', '003042', '003043', '003044', '003045', '003046', '003047', '003048', '003049', '003050', '003051', '003052', '003053', '003054', '003055', '003056', '003057', '003058', '003059', '003060', '003061', '003062', '003063', '003064', '003065', '003066', '003067', '003068', '003069', '003070', '003071', '003072', '003073', '003074', '003075', '003076', '003077', '003078', '003079', '003080', '003081', '003082', '003083', '003084', '003085', '003086', '003087', '003088', '003089', '003090', '003091', '003092', '003093', '003094', '003095', '003096', '003097', '003098', '003099', '003100', '003101', '003102', '003103', '003104', '003105', '003106', '003107', '003108', '003109', '003110', '003111', '003112', '003113', '003114', '003115', '003116', '003117', '003118', '003119', '003120', '003121', '003122', '003123', '003124', '003125', '003126', '003127', '003128', '003129', '003130', '003131', '003132', '003133', '003134', '003135', '003136', '003137', '003138', '003139', '003140', '003141', '003142', '003143', '003144', '003145', '003146', '003147', '003148', '003149', '003150', '003151', '003152', '003153', '003154', '003155', '003156', '003157', '003158', '003159', '003160', '003161', '003162', '003163', '003164', '003165', '003166', '003167', '003168', '003169', '003170', '003171', '003172', '003173', '003174', '003175', '003176', '003177', '003178', '003179', '003180', '003181', '003182', '003183', '003184', '003185', '003186', '003187', '003188', '003189', '003190', '003191', '003192', '003193', '003194', '003195', '003196', '003197', '003198', '003199', '003200', '003201', '003202', '003203', '003204', '003205', '003206', '003207', '003208', '003209', '003210', '003211', '003212', '003213', '003214', '003215', '003216', '003217', '003218', '003219', '003220', '003221', '003222', '003223', '003224', '003225', '003226', '003227', '003228', '003229', '003230', '003231', '003232', '003233', '003234', '003235', '003236', '003237', '003238', '003239', '003240', '003241', '003242', '003243', '003244', '003245', '003246', '003247', '003248', '003249', '003250', '003251', '003252', '003253', '003254', '003255', '003256', '003257', '003258', '003259', '003260', '003261', '003262', '003263', '003264', '003265', '003266', '003267', '003268', '003269', '003270', '003271', '003272', '003273', '003274', '003275', '003276', '003277', '003278', '003279', '003280', '003281', '003282', '003283', '003284', '003285', '003286', '003287', '003288', '003289', '003290', '003291', '003292', '003293', '003294', '003295', '003296', '003297', '003298', '003299', '003300', '003301', '003302', '003303', '003304', '003305', '003306', '003307', '003308', '003309', '003310', '003311', '003312', '003313', '003314', '003315', '003316', '003317', '003318', '003319', '003320', '003321', '003322', '003323', '003324', '003325', '003326', '003327', '003328', '003329', '003330', '003331', '003332', '003333', '003334', '003335', '003336', '003337', '003338', '003339', '003340', '003341', '003342', '003343', '003344', '003345', '003346', '003347', '003348', '003349', '003350', '003351', '003352', '003353', '003354', '003355', '003356', '003357', '003358', '003359', '003360', '003361', '003362', '003363', '003364', '003365', '003366', '003367', '003368', '003369', '003370', '003371', '003372', '003373', '003374', '003375', '003376', '003377', '003378', '003379', '003380', '003381', '003382', '003383', '003384', '003385', '003386', '003387', '003388', '003389', '003390', '003391', '003392', '003393', '003394', '003395', '003396', '003397', '003398', '003399', '003400', '003401', '003402', '003403', '003404', '003405', '003406', '003407', '003408', '003409', '003410', '003411', '003412', '003413', '003414', '003415', '003416', '003417', '003418', '003419', '003420', '003421', '003422', '003423', '003424', '003425', '003426', '003427', '003428', '003429', '003430', '003431', '003432', '003433', '003434', '003435', '003436', '003437', '003438', '003439', '003440', '003441', '003442', '003443', '003444', '003445', '003446', '003447', '003448', '003449', '003450', '003451', '003452', '003453', '003454', '003455', '003456', '003457', '003458', '003459', '003460', '003461', '003462', '003463', '003464', '003465', '003466', '003467', '003468', '003469', '003470', '003471', '003472', '003473', '003474', '003475', '003476', '003477', '003478', '003479', '003480', '003481', '003482', '003483', '003484', '003485', '003486', '003487', '003488', '003489', '003490', '003491', '003492', '003493', '003494', '003495', '003496', '003497', '003498', '003499', '003500', '003501', '003502', '003503', '003504', '003505', '003506', '003507', '003508', '003509', '003510', '003511', '003512', '003513', '003514', '003515', '003516', '003517', '003518', '003519', '003520', '003521', '003522', '003523', '003524', '003525', '003526', '003527', '003528', '003529', '003530', '003531', '003532', '003533', '003534', '003535', '003536', '003537', '003538', '003539', '003540', '003541', '003542', '003543', '003544', '003545', '003546', '003547', '003548', '003549', '003550', '003551', '003552', '003553', '003554', '003555', '003556', '003557', '003558', '003559', '003560', '003561', '003562', '003563', '003564', '003565', '003566', '003567', '003568', '003569', '003570', '003571', '003572', '003573', '003574', '003575', '003576', '003577', '003578', '003579', '003580', '003581', '003582', '003583', '003584', '003585', '003586', '003587', '003588', '003589', '003590', '003591', '003592', '003593', '003594', '003595', '003596', '003597', '003598', '003599', '003600', '003601', '003602', '003603', '003604', '003605', '003606', '003607', '003608', '003609', '003610', '003611', '003612', '003613', '003614', '003615', '003616', '003617', '003618', '003619', '003620', '003621', '003622', '003623', '003624', '003625', '003626', '003627', '003628', '003629', '003630', '003631', '003632', '003633', '003634', '003635', '003636', '003637', '003638', '003639', '003640', '003641', '003642', '003643', '003644', '003645', '003646', '003647', '003648', '003649', '003650', '003651', '003652', '003653', '003654', '003655', '003656', '003657', '003658', '003659', '003660', '003661', '003662', '003663', '003664', '003665', '003666', '003667', '003668', '003669', '003670', '003671', '003672', '003673', '003674', '003675', '003676', '003677', '003678', '003679', '003680', '003681', '003682', '003683', '003684', '003685', '003686', '003687', '003688', '003689', '003690', '003691', '003692', '003693', '003694', '003695', '003696', '003697', '003698', '003699', '003700', '003701', '003702', '003703', '003704', '003705', '003706', '003707', '003708', '003709', '003710', '003711', '003712', '003713', '003714', '003715', '003716', '003717', '003718', '003719', '003720', '003721', '003722', '003723', '003724', '003725', '003726', '003727', '003728', '003729', '003730', '003731', '003732', '003733', '003734', '003735', '003736', '003737', '003738', '003739', '003740', '003741', '003742', '003743', '003744', '003745', '003746', '003747', '003748', '003749', '003750', '003751', '003752', '003753', '003754', '003755', '003756', '003757', '003758', '003759', '003760', '003761', '003762', '003763', '003764', '003765', '003766', '003767', '003768', '003769', '003770', '003771', '003772', '003773', '003774', '003775', '003776', '003777', '003778', '003779', '003780', '003781', '003782', '003783', '003784', '003785', '003786', '003787', '003788', '003789', '003790', '003791', '003792', '003793', '003794', '003795', '003796', '003797', '003798', '003799', '003800', '003801', '003802', '003803', '003804', '003805', '003806', '003807', '003808', '003809', '003810', '003811', '003812', '003813', '003814', '003815', '003816', '003817', '003818', '003819', '003820', '003821', '003822', '003823', '003824', '003825', '003826', '003827', '003828', '003829', '003830', '003831', '003832', '003833', '003834', '003835', '003836', '003837', '003838', '003839', '003840', '003841', '003842', '003843', '003844', '003845', '003846', '003847', '003848', '003849', '003850', '003851', '003852', '003853', '003854', '003855', '003856', '003857', '003858', '003859', '003860', '003861', '003862', '003863', '003864', '003865', '003866', '003867', '003868', '003869', '003870', '003871', '003872', '003873', '003874', '003875', '003876', '003877', '003878', '003879', '003880', '003881', '003882', '003883', '003884', '003885', '003886', '003887', '003888', '003889', '003890', '003891', '003892', '003893', '003894', '003895', '003896', '003897', '003898', '003899', '003900', '003901', '003902', '003903', '003904', '003905', '003906', '003907', '003908', '003909', '003910', '003911', '003912', '003913', '003914', '003915', '003916', '003917', '003918', '003919', '003920', '003921', '003922', '003923', '003924', '003925', '003926', '003927', '003928', '003929', '003930', '003931', '003932', '003933', '003934', '003935', '003936', '003937', '003938', '003939', '003940', '003941', '003942', '003943', '003944', '003945', '003946', '003947', '003948', '003949', '003950', '003951', '003952', '003953', '003954', '003955', '003956', '003957', '003958', '003959', '003960', '003961', '003962', '003963', '003964', '003965', '003966', '003967', '003968', '003969', '003970', '003971', '003972', '003973', '003974', '003975', '003976', '003977', '003978', '003979', '003980', '003981', '003982', '003983', '003984', '003985', '003986', '003987', '003988', '003989', '003990', '003991', '003992', '003993', '003994', '003995', '003996', '003997', '003998', '003999', '004000', '004001', '004002', '004003', '004004', '004005', '004006', '004007', '004008', '004009', '004010', '004011', '004012', '004013', '004014', '004015', '004016', '004017', '004018', '004019', '004020', '004021', '004022', '004023', '004024', '004025', '004026', '004027', '004028', '004029', '004030', '004031', '004032', '004033', '004034', '004035', '004036', '004037', '004038', '004039', '004040', '004041', '004042', '004043', '004044', '004045', '004046', '004047', '004048', '004049', '004050', '004051', '004052', '004053', '004054', '004055', '004056', '004057', '004058', '004059', '004060', '004061', '004062', '004063', '004064', '004065', '004066', '004067', '004068', '004069', '004070', '004071', '004072', '004073', '004074', '004075', '004076', '004077', '004078', '004079', '004080', '004081', '004082', '004083', '004084', '004085', '004086', '004087', '004088', '004089', '004090', '004091', '004092', '004093', '004094', '004095', '004096', '004097', '004098', '004099', '004100', '004101', '004102', '004103', '004104', '004105', '004106', '004107', '004108', '004109', '004110', '004111', '004112', '004113', '004114', '004115', '004116', '004117', '004118', '004119', '004120', '004121', '004122', '004123', '004124', '004125', '004126', '004127', '004128', '004129', '004130', '004131', '004132', '004133', '004134', '004135', '004136', '004137', '004138', '004139', '004140', '004141', '004142', '004143', '004144', '004145', '004146', '004147', '004148', '004149', '004150', '004151', '004152', '004153', '004154', '004155', '004156', '004157', '004158', '004159', '004160', '004161', '004162', '004163', '004164', '004165', '004166', '004167', '004168', '004169', '004170', '004171', '004172', '004173', '004174', '004175', '004176', '004177', '004178', '004179', '004180', '004181', '004182', '004183', '004184', '004185', '004186', '004187', '004188', '004189', '004190', '004191', '004192', '004193', '004194', '004195', '004196', '004197', '004198', '004199', '004200', '004201', '004202', '004203', '004204', '004205', '004206', '004207', '004208', '004209', '004210', '004211', '004212', '004213', '004214', '004215', '004216', '004217', '004218', '004219', '004220', '004221', '004222', '004223', '004224', '004225', '004226', '004227', '004228', '004229', '004230', '004231', '004232', '004233', '004234', '004235', '004236', '004237', '004238', '004239', '004240', '004241', '004242', '004243', '004244', '004245', '004246', '004247', '004248', '004249', '004250', '004251', '004252', '004253', '004254', '004255', '004256', '004257', '004258', '004259', '004260', '004261', '004262', '004263', '004264', '004265', '004266', '004267', '004268', '004269', '004270', '004271', '004272', '004273', '004274', '004275', '004276', '004277', '004278', '004279', '004280', '004281', '004282', '004283', '004284', '004285', '004286', '004287', '004288', '004289', '004290', '004291', '004292', '004293', '004294', '004295', '004296', '004297', '004298', '004299', '004300', '004301', '004302', '004303', '004304', '004305', '004306', '004307', '004308', '004309', '004310', '004311', '004312', '004313', '004314', '004315', '004316', '004317', '004318', '004319', '004320', '004321', '004322', '004323', '004324', '004325', '004326', '004327', '004328', '004329', '004330', '004331', '004332', '004333', '004334', '004335', '004336', '004337', '004338', '004339', '004340', '004341', '004342', '004343', '004344', '004345', '004346', '004347', '004348', '004349', '004350', '004351', '004352', '004353', '004354', '004355', '004356', '004357', '004358', '004359', '004360', '004361', '004362', '004363', '004364', '004365', '004366', '004367', '004368', '004369', '004370', '004371', '004372', '004373', '004374', '004375', '004376', '004377', '004378', '004379', '004380', '004381', '004382', '004383', '004384', '004385', '004386', '004387', '004388', '004389', '004390', '004391', '004392', '004393', '004394', '004395', '004396', '004397', '004398', '004399', '004400', '004401', '004402', '004403', '004404', '004405', '004406', '004407', '004408', '004409', '004410', '004411', '004412', '004413', '004414', '004415', '004416', '004417', '004418', '004419', '004420', '004421', '004422', '004423', '004424', '004425', '004426', '004427', '004428', '004429', '004430', '004431', '004432', '004433', '004434', '004435', '004436', '004437', '004438', '004439', '004440', '004441', '004442', '004443', '004444', '004445', '004446', '004447', '004448', '004449', '004450', '004451', '004452', '004453', '004454', '004455', '004456', '004457', '004"
  },
  {
    "query": "Find all parcels that have no more than 2 competing restaurants within 800 meters.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter for restaurants in POI data\nrestaurant_types = ['restaurant', 'cafe', 'diner', 'eatery', 'food']\nrestaurants = poi_proj[poi_proj['business_type'].isin(restaurant_types)].copy()\n\n# Define buffer distance\nbuffer_distance = 800  # meters\n\n# Create 800m buffer around each restaurant\nrestaurant_buffers = restaurants.geometry.buffer(buffer_distance).union_all()\n\n# Count competing restaurants within 800m for each parcel\ndef count_competing_restaurants(parcel_geom, restaurant_buffers):\n    return sum(1 for buf in restaurant_buffers if parcel_geom.intersects(buf))\n\n# Calculate competing restaurant counts\nparcels_proj['competing_restaurants'] = parcels_proj.geometry.apply(\n    lambda geom: count_competing_restaurants(geom, restaurant_buffers)\n)\n\n# Filter parcels with no more than 2 competing restaurants\nresult_parcels = parcels_proj[parcels_proj['competing_restaurants'] <= 2]\n\n# Sort by parcel ID (ml column)\nresult_ids = sorted(result_parcels['ml'].tolist())\n\n# Print result\nprint(result_ids)"
  },
  {
    "query": "Find the top 20 parcels in Cambridge with the most diverse mix of residential and commercial land uses within 500 meters.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter for residential and commercial parcels\nresidential_codes = ['101', '102', '103', '104', '105', '106', '109', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '253', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '281', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '292', '293', '294', '295', '296', '297', '298', '299', '300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999']\ncommercial_codes = ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999']\nresidential_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(residential_codes)].copy()\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_codes)].copy()\n\n# Function to calculate diversity score\ndef calculate_diversity_score(parcel_geom, poi_proj, residential_parcels, commercial_parcels):\n    buffer_geom = parcel_geom.buffer(500)\n    nearby_poi = poi_proj[poi_proj.geometry.intersects(buffer_geom)].copy()\n    \n    if len(nearby_poi) == 0:\n        return 0\n    \n    residential_count = sum(1 for _, row in nearby_poi.iterrows() if row['ml'] in residential_parcels['ml'].values)\n    commercial_count = sum(1 for _, row in nearby_poi.iterrows() if row['ml'] in commercial_parcels['ml'].values)\n    \n    return min(residential_count, commercial_count)\n\n# Calculate diversity scores\nresidential_parcels['diversity_score'] = residential_parcels.geometry.apply(\n    lambda geom: calculate_diversity_score(geom, poi_proj, residential_parcels, commercial_parcels)\n)\n\n# Sort by diversity score (higher is better)\ntop_diverse_parcels = residential_parcels.sort_values('diversity_score', ascending=False).head(20)\n\n# Get parcel IDs\nresult_ids = top_diverse_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)"
  },
  {
    "query": "Find the top 20 commercial parcels in areas with the highest percentage of residents with advanced degrees.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Filter for commercial parcels\ncommercial_use_codes = ['300', '302', '316', '323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '353', '362', '375', '404', '406', '0340', '0406']\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Calculate POI density within 500m\ndef calculate_poi_density(parcel_geom, poi_geoms, buffer_distance=500):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    count = sum(1 for geom in poi_geoms if geom is not None and buffered_geom.contains(geom))\n    return count / (3.14 * (buffer_distance ** 2))\n\npoi_geoms = poi_proj.geometry.tolist()\ncommercial_parcels['poi_density'] = commercial_parcels.geometry.apply(lambda geom: calculate_poi_density(geom, poi_geoms))\n\n# Join with census data\ndef assign_census_data(parcel_geom, census_geoms, census_data):\n    for geom, data in zip(census_geoms, census_data):\n        if geom is not None and geom.contains(parcel_geom):\n            return data\n    return None\n\ncensus_pct = census_proj['pct_advanced_degree'].tolist()\ncensus_geoms = census_proj.geometry.tolist()\ncommercial_parcels['pct_advanced_degree'] = commercial_parcels.geometry.apply(lambda geom: assign_census_data(geom, census_geoms, census_pct))\n\n# Filter for parcels with advanced degree percentage\nvalid_parcels = commercial_parcels[commercial_parcels['pct_advanced_degree'].notna()].copy()\n\n# Sort by POI density and advanced degree percentage\nvalid_parcels = valid_parcels.sort_values(by=['poi_density', 'pct_advanced_degree'], ascending=[False, False])\n\n# Get top 20 parcel IDs\ntop_parcels = valid_parcels.head(20)\ntop_parcel_ids = top_parcels['ml'].tolist()\n\n# Print results\nprint(top_parcel_ids)"
  },
  {
    "query": "Find the top 20 parcels with the highest consumer spending in surrounding areas.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending_data = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Convert to projected CRS for accurate distance calculations\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter for commercial parcels\ncommercial_use_codes = ['300', '302', '316', '323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '353', '362', '375', '404', '406', '0340', '0406']\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Filter POI for retail and food service\npoi_retail = poi_proj[poi_proj['business_type'].str.contains('Retail|Food', case=False, na=False)].copy()\n\n# Define spending function\ndef calculate_spending(parcel_geom, poi_geoms, spending_data):\n    total_spending = 0\n    for idx, poi_geom in enumerate(poi_geoms):\n        if parcel_geom.distance(poi_geom) <= 200:  # 200m buffer\n            total_spending += spending_data.iloc[idx]['spending']  # Adjust based on actual spending data\n    return total_spending\n\n# Calculate spending for each commercial parcel\npoi_geoms = poi_retail.geometry.tolist()\nspending_values = []\nfor idx, row in commercial_parcels.iterrows():\n    spending = calculate_spending(row.geometry, poi_geoms, spending_data)\n    spending_values.append(spending)\n\ncommercial_parcels['calculated_spending'] = spending_values\n\n# Sort by spending and get top 20\ntop_parcels = commercial_parcels.sort_values(by='calculated_spending', ascending=False).head(20)\n\n# Get parcel IDs\ntop_parcel_ids = top_parcels['ml'].tolist()\n\n# Print results\nprint(top_parcel_ids)"
  },
  {
    "query": "Find vacant commercial parcels larger than 3000 square feet that are within 800 meters of a subway station.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Filter for commercial parcels\ncommercial_use_codes = ['300', '302', '316', '323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '353', '362', '375', '404', '406', '0340', '0406']\ncommercial_parcels = parcels[parcels['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Filter for vacant commercial parcels\nvacant_parcels = commercial_parcels[commercial_parcels['status'] == 'VAC'].copy()\n\n# Filter for parcels larger than 3000 square feet\nlarge_vacant_parcels = vacant_parcels[vacant_parcels['land_area'] > 3000].copy()\n\n# Project to appropriate CRS for accurate distance measurement\nlarge_vacant_parcels_proj = large_vacant_parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define subway station locations (POI type 'subway')\nsubway_stations = poi_proj[poi_proj['poi_type'] == 'subway'].copy()\n\n# If no subway stations, return empty result\nif subway_stations.empty:\n    print([])\nelse:\n    # Create buffer of 800 meters around subway stations\n    subway_buffers = [geom.buffer(800) for geom in subway_stations.geometry]\n    combined_buffer = gpd.GeoSeries(subway_buffers).union_all()\n    \n    # Convert to GeoDataFrame\n    subway_buffer_gdf = gpd.GeoDataFrame(geometry=[combined_buffer], crs=subway_stations.crs)\n    subway_buffer_gdf_proj = subway_buffer_gdf.to_crs(epsg=26986)\n    \n    # Find parcels within 800m of subway stations\n    parcels_near_subway = large_vacant_parcels_proj[large_vacant_parcels_proj.geometry.intersects(subway_buffer_gdf_proj.geometry[0])].copy()\n    \n    # Sort by parcel ID (ml column)\n    result_ids = sorted(parcels_near_subway['ml'].tolist())\n    \n    # Print result\n    print(result_ids)"
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.03980099502487562,
    "precision": 0.03980099502487562,
    "recall": 1.0,
    "f1_score": 0.07655502392344497,
    "generated_count": 201,
    "ground_truth_count": 8,
    "correct_count": 8,
    "query": "Find commercial parcels zoned for retail use with fewer than 3 competing retail businesses within 300 meters.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": true,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Projected CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter for retail parcels\nretail_use_codes = ['323', '324', '325', '326', '327', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339']\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_use_codes)].copy()\n\n# Function to count competing retail businesses within 300m\ndef count_competing_retail(parcel_geom, all_retail_geoms, buffer_distance=300):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    competing_retail = [geom for geom in all_retail_geoms if geom is not None and buffered_geom.contains(geom)]\n    return len(competing_retail)\n\n# Get all retail POI geometries\nretail_poi_geoms = poi_proj[poi_proj['business_type'].str.contains('retail', case=False, na=False)]['geometry'].tolist()\n\n# Count competing retail businesses for each parcel\nretail_parcels['competing_retail_count'] = retail_parcels['geometry'].apply(\n    lambda geom: count_competing_retail(geom, retail_poi_geoms)\n)\n\n# Filter parcels with fewer than 3 competing retail businesses\nfinal_parcels = retail_parcels[retail_parcels['competing_retail_count'] < 3].copy()\n\n# Sort by parcel ID (ml column)\nfinal_parcels = final_parcels.sort_values('ml')\n\n# Get parcel IDs\nfinal_ids = final_parcels['ml'].tolist()\n\n# Print final list of parcel IDs\nprint(final_ids)",
    "generated_ids": [
      "100-62",
      "100-86",
      "102-46",
      "108-54",
      "108-80",
      "109-50",
      "110-53",
      "110-63",
      "110-91",
      "111-43",
      "114A-120",
      "116-100",
      "116-94",
      "119-5",
      "119-90",
      "120-48",
      "122-12",
      "125-73",
      "125-80",
      "126-27",
      "128-63",
      "128-72",
      "129-55",
      "136-15",
      "137-13",
      "139-83",
      "140-148",
      "141-80",
      "150-114",
      "157-26",
      "166-106",
      "166-13",
      "166-31",
      "178-43",
      "179-75",
      "180-57",
      "181-80",
      "182-88",
      "182-89",
      "182-90",
      "183-100",
      "184-109",
      "184-159",
      "184-191",
      "184-193",
      "184-27",
      "184-31",
      "186-85",
      "186-96",
      "189-4",
      "189-72",
      "189-88",
      "191-65",
      "191-85",
      "192-121",
      "192-177",
      "195-59",
      "196-123",
      "196-154",
      "199-30",
      "199-31",
      "199-67",
      "199-90",
      "1A-189",
      "1A-192",
      "1A-211",
      "20-75",
      "20-82",
      "20-83",
      "20-92",
      "200-22",
      "200-79",
      "200-91",
      "21-118",
      "21-121",
      "21-124",
      "21-16",
      "226-46",
      "228-55",
      "229-117",
      "23-156",
      "23-157",
      "234-177",
      "234-178",
      "24-139",
      "248-82",
      "251-221",
      "252-114",
      "252-147",
      "252-158",
      "252-172",
      "252A-155",
      "252A-157",
      "254-76",
      "254-78",
      "254-82",
      "255-21",
      "260-32",
      "260-46",
      "260-73",
      "260-74",
      "260-76",
      "261-112",
      "261-6",
      "261-65",
      "261-7",
      "265A-35",
      "265A-46",
      "265B-28",
      "267.1-279",
      "267.2-270",
      "267.4-312",
      "267D-259",
      "267D-284",
      "267D-293",
      "267D-313",
      "267D-325",
      "267E-234",
      "267F-291",
      "267F-295",
      "268B-15",
      "268B-8",
      "268C-30",
      "271-32",
      "271-44",
      "273-20",
      "34-8",
      "35-87",
      "35-88",
      "36-137",
      "36-247",
      "39-174",
      "40-197",
      "42-13",
      "42-81",
      "42-91",
      "43A-19",
      "44-95",
      "48-160",
      "53-54",
      "66-94",
      "66-99",
      "67-56",
      "67-61",
      "67-65",
      "68-60",
      "68-75",
      "69-161",
      "69-162",
      "7-37",
      "70-12",
      "70-88",
      "70-9",
      "70-91",
      "70-92",
      "74-1",
      "74-6",
      "74-8",
      "75-128",
      "75-130",
      "75-57",
      "79-22",
      "80-142",
      "81-100",
      "81-109",
      "81-50",
      "81-99",
      "82-31",
      "83-12",
      "83-13",
      "83-15",
      "83-80",
      "83-90",
      "83-98",
      "83-99",
      "84-100",
      "84-101",
      "84-12",
      "84-66",
      "84-85",
      "84-91",
      "84-99",
      "85-13",
      "85-66",
      "86-84",
      "87-109",
      "87-19",
      "88-48",
      "89-17",
      "89-95",
      "91-65",
      "91-68",
      "91-82",
      "91-83",
      "92-125",
      "95-51",
      "95-60",
      "95-77",
      "96-152",
      "96-153",
      "97-111"
    ]
  },
  {
    "query": "find the top 20 commercial parcels within 1km of massachusetts avenue, prioritizing areas with higher consumer spending.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Convert to projected CRS for accurate distance calculations\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Define Massachusetts Avenue (approximate location)\nmass_ave_geom = gpd.GeoSeries([gpd.points_from_xy([-71.1189], [42.3736])[0]], crs=parcels.crs).to_crs(epsg=26986)\nmass_ave = gpd.GeoDataFrame(geometry=mass_ave_geom, crs=parcels.crs)\n\n# Create buffer around Massachusetts Avenue\nmass_ave_buffer = mass_ave.to_crs(epsg=26986).buffer(1000).union_all().to_crs(parcels.crs)\n\n# Filter parcels within 1km of Massachusetts Avenue\nparcels_near_mass_ave = parcels_proj[parcels_proj.geometry.intersects(mass_ave_buffer)]\n\n# Join spending data to parcels\nparcels_near_mass_ave = parcels_near_mass_ave.merge(spending, left_on='ml', right_on='ml', how='left')\n\n# Sort by spending (higher is better)\nparcels_near_mass_ave = parcels_near_mass_ave.sort_values('spend', ascending=False)\n\n# Get top 20 parcel IDs\ntop_parcels = parcels_near_mass_ave.head(20)['ml'].tolist()\n\n# Print results\nprint(top_parcels)"
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.0,
    "precision": 0.0,
    "recall": 0.0,
    "f1_score": 0.0,
    "generated_count": 1,
    "ground_truth_count": 33,
    "correct_count": 0,
    "query": "find commercial parcels larger than 8000 square feet in census tracts with at least 90% of residents aged 18-64.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": true,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Projected CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Filter commercial parcels > 8000 sq ft\nlarge_commercial = parcels_proj[\n    (parcels_proj['use_code'].astype(str).str.startswith('3')) & \n    (parcels_proj['land_area'] > 8000)\n].copy()\n\n# Spatial join with census tracts\njoined = gpd.sjoin(\n    large_commercial,\n    census_proj,\n    how='left',\n    predicate='within'\n)\n\n# Filter for tracts with at least 90% aged 18-64\nvalid_tracts = joined[joined['pct_18_64'] >= 90].copy()\n\n# Sort by parcel ID (ml)\nresult_ids = valid_tracts['ml'].sort_values().tolist()\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      ""
    ]
  },
  {
    "query": "find commercial parcels that are between 5000-10000 square feet, within 500 meters of a subway station, and have no more than 1 competitor within 500 meters.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspend = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Filter commercial parcels\ncommercial_use_codes = ['300', '302', '316', '323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '353', '362', '375', '404', '406', '0340', '0406']\ncommercial_parcels = parcels[parcels['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Filter by size (5000-10000 sq ft)\nsize_filtered = commercial_parcels[(commercial_parcels['land_area'] >= 5000) & (commercial_parcels['land_area'] <= 10000)].copy()\n\n# Convert to projected CRS for accurate distance calculations\nsize_filtered_proj = size_filtered.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Subway stations in Cambridge (approximate locations)\nsubway_stations = gpd.GeoDataFrame({\n    'name': ['Alewife', 'Davis', 'Porter', 'Harvard', 'Central', 'Kendall', 'Charles', 'Park', 'Government'],\n    'geometry': [\n        gpd.points_from_xy([-71.1425, -71.1215, -71.1183, -71.1183, -71.1032, -71.0865, -71.0714, -71.0583, -71.0625], \n                            [42.3954, 42.3734, 42.3750, 42.3770, 42.3625, 42.3625, 42.3625, 42.3584, 42.3601])\n    ]\n}, crs='EPSG:4326')\n\nsubway_stations_proj = subway_stations.to_crs(epsg=26986)\n\n# Filter parcels within 500m of subway stations\ndef within_distance_of_subway(parcel_geom, subway_geoms, distance=500):\n    return any(parcel_geom.distance(sub_geom) <= distance for sub_geom in subway_geoms)\n\nsubway_geoms = subway_stations_proj['geometry'].tolist()\nnear_subway = size_filtered_proj[size_filtered_proj.geometry.apply(lambda geom: within_distance_of_subway(geom, subway_geoms))].copy()\n\n# Count competitors within 500m\ndef count_competitors(parcel_geom, all_parcels, distance=500):\n    buffered_geom = parcel_geom.buffer(distance)\n    competitors = all_parcels[all_parcels.geometry.intersects(buffered_geom) & (all_parcels['ml'] != parcel_geom['ml'])]\n    return len(competitors)\n\nnear_subway['competitor_count'] = near_subway.geometry.apply(lambda geom: count_competitors(geom, near_subway, distance=500))\n\n# Filter parcels with no more than 1 competitor\nfinal_parcels = near_subway[near_subway['competitor_count'] <= 1].copy()\n\n# Sort by parcel ID (ml)\nfinal_parcels = final_parcels.sort_values('ml')\n\n# Get parcel IDs\nresult_ids = final_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)"
  },
  {
    "query": "find parcels that are zoned for mixed-use, within 400 meters of public transportation, and at least 200 meters away from industrial areas.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Projected CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Mixed-use zoning codes\nmixed_use_codes = ['340', '341', '343', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999']\n\n# Filter for mixed-use parcels\nmixed_use_parcels = parcels_proj[parcels_proj['ml'].astype(str).str.startswith('0') & parcels_proj['use_code'].isin(mixed_use_codes)]\n\n# Public transportation locations (bus stops, subway stations)\ntransit_types = ['bus', 'subway', 'train', 'light_rail']\ntransit_stops = poi_proj[poi_proj['poi_type'].isin(transit_types)]\n\n# Buffer for 400m around transit stops\ntransit_buffers = [geom.buffer(400) for geom in transit_stops.geometry]\ntransit_union = gpd.GeoSeries(transit_buffers).union_all()\n\n# Parcels within 400m of transit\nparcels_near_transit = mixed_use_parcels[mixed_use_parcels.geometry.intersects(transit_union)]\n\n# Industrial use codes (to exclude)\nindustrial_use_codes = ['300', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339']\nindustrial_parcels = parcels_proj[parcels_proj['use_code'].isin(industrial_use_codes)]\n\n# Buffer for 200m around industrial parcels\nindustrial_buffers = [geom.buffer(200) for geom in industrial_parcels.geometry]\nindustrial_union = gpd.GeoSeries(industrial_buffers).union_all()\n\n# Parcels at least 200m away from industrial areas\nfinal_parcels = parcels_near_transit[~parcels_near_transit.geometry.intersects(industrial_union)]\n\n# Sort by parcel ID (ml)\nresult_ids = sorted(final_parcels['ml'].astype(str).tolist())\n\n# Print results\nprint(result_ids)"
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.972972972972973,
    "precision": 0.972972972972973,
    "recall": 1.0,
    "f1_score": 0.9863013698630138,
    "generated_count": 37,
    "ground_truth_count": 36,
    "correct_count": 36,
    "query": "find parcels that are either commercial places within 100m of harvard square or residential larger than 5000 square feet and within 200m of 50 restaurants.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": true,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define Harvard Square location\nharvard_square = gpd.GeoDataFrame(\n    geometry=[gpd.points_from_xy([-71.1189], [42.3736])[0]],\n    crs=parcels.crs\n).to_crs(epsg=26986)\n\n# Filter commercial parcels\ncommercial_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '330', \n    '332', '334', '340', '341', '343', '345', '346', '353', '362', \n    '404', '406', '412', '413', '414', '415', '421', '422', '423', \n    '424', '425', '426', '427', '428', '429', '430', '431', '432', \n    '434', '440', '441', '442', '443', '444', '445', '446', '447', \n    '448', '449', '450', '451', '452', '453', '454', '455', '456', \n    '457', '458', '459', '460', '461', '462', '463', '464', '465', \n    '466', '467', '468', '469', '470', '471', '472', '473', '474', \n    '475', '476', '477', '478', '479', '480', '481', '482', '483', \n    '484', '485', '486', '487', '488', '489', '490', '491', '492', \n    '493', '494', '495', '496', '497', '498', '499', '500', '501', \n    '502', '503', '504', '505', '506', '507', '508', '509', '510', \n    '511', '512', '513', '514', '515', '516', '517', '518', '519', \n    '520', '521', '522', '523', '524', '525', '526', '527', '528', \n    '529', '530', '531', '532', '533', '534', '535', '536', '537', \n    '538', '539', '540', '541', '542', '543', '544', '545', '546', \n    '547', '548', '549', '550', '551', '552', '553', '554', '555', \n    '556', '557', '558', '559', '560', '561', '562', '563', '564', \n    '565', '566', '567', '568', '569', '570', '571', '572', '573', \n    '574', '575', '576', '577', '578', '579', '580', '581', '582', \n    '583', '584', '585', '586', '587', '588', '589', '590', '591', \n    '592', '593', '594', '595', '596', '597', '598', '599', '600', \n    '601', '602', '603', '604', '605', '606', '607', '608', '609', \n    '610', '611', '612', '613', '614', '615', '616', '617', '618', \n    '619', '620', '621', '622', '623', '624', '625', '626', '627', \n    '628', '629', '630', '631', '632', '633', '634', '635', '636', \n    '637', '638', '639', '640', '641', '642', '643', '644', '645', \n    '646', '647', '648', '649', '650', '651', '652', '653', '654', \n    '655', '656', '657', '658', '659', '660', '661', '662', '663', \n    '664', '665', '666', '667', '668', '669', '670', '671', '672', \n    '673', '674', '675', '676', '677', '678', '679', '680', '681', \n    '682', '683', '684', '685', '686', '687', '688', '689', '690', \n    '691', '692', '693', '694', '695', '696', '697', '698', '699', \n    '700', '701', '702', '703', '704', '705', '706', '707', '708', \n    '709', '710', '711', '712', '713', '714', '715', '716', '717', \n    '718', '719', '720', '721', '722', '723', '724', '725', '726', \n    '727', '728', '729', '730', '731', '732', '733', '734', '735', \n    '736', '737', '738', '739', '740', '741', '742', '743', '744', \n    '745', '746', '747', '748', '749', '750', '751', '752', '753', \n    '754', '755', '756', '757', '758', '759', '760', '761', '762', \n    '763', '764', '765', '766', '767', '768', '769', '770', '771', \n    '772', '773', '774', '775', '776', '777', '778', '779', '780', \n    '781', '782', '783', '784', '785', '786', '787', '788', '789', \n    '790', '791', '792', '793', '794', '795', '796', '797', '798', \n    '799', '800', '801', '802', '803', '804', '805', '806', '807', \n    '808', '809', '810', '811', '812', '813', '814', '815', '816', \n    '817', '818', '819', '820', '821', '822', '823', '824', '825', \n    '826', '827', '828', '829', '830', '831', '832', '833', '834', \n    '835', '836', '837', '838', '839', '840', '841', '842', '843', \n    '844', '845', '846', '847', '848', '849', '850', '851', '852', \n    '853', '854', '855', '856', '857', '858', '859', '860', '861', \n    '862', '863', '864', '865', '866', '867', '868', '869', '870', \n    '871', '872', '873', '874', '875', '876', '877', '878', '879', \n    '880', '881', '882', '883', '884', '885', '886', '887', '888', \n    '889', '890', '891', '892', '893', '894', '895', '896', '897', \n    '898', '899', '900', '901', '902', '903', '904', '905', '906', \n    '907', '908', '909', '910', '911', '912', '913', '914', '915', \n    '916', '917', '918', '919', '920', '921', '922', '923', '924', \n    '925', '926', '927', '928', '929', '930', '931', '932', '933', \n    '934', '935', '936', '937', '938', '939', '940', '941', '942', \n    '943', '944', '945', '946', '947', '948', '949', '950', '951', \n    '952', '953', '954', '955', '956', '957', '958', '959', '960', \n    '961', '962', '963', '964', '965', '966', '967', '968', '969', \n    '970', '971', '972', '973', '974', '975', '976', '977', '978', \n    '979', '980', '981', '982', '983', '984', '985', '986', '987', \n    '988', '989', '990', '991', '992', '993', '994', '995', '996', \n    '997', '998', '999'\n]\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).str.startswith('3')]\n\n# Filter commercial parcels within 100m of Harvard Square\nharvard_buffer = harvard_square.buffer(100).union_all()\ncommercial_near_harvard = commercial_parcels[commercial_parcels.geometry.intersects(harvard_buffer)]\n\n# Filter residential parcels larger than 5000 sqft\nresidential_codes = [\n    '101', '102', '104', '105', '109', '111', '112', '113', '114', \n    '115', '116', '117', '118', '119', '120', '121', '122', '123', \n    '124', '125', '126', '127', '128', '129', '130', '131', '132', \n    '133', '134', '135', '136', '137', '138', '139', '140', '141', \n    '142', '143', '144', '145', '146', '147', '148', '149', '150', \n    '151', '152', '153', '154', '155', '156', '157', '158', '159', \n    '160', '161', '162', '163', '164', '165', '166', '167', '168', \n    '169', '170', '171', '172', '173', '174', '175', '176', '177', \n    '178', '179', '180', '181', '182', '183', '184', '185', '186', \n    '187', '188', '189', '190', '191', '192', '193', '194', '195', \n    '196', '197', '198', '199', '200', '201', '202', '203', '204', \n    '205', '206', '207', '208', '209', '210', '211', '212', '213', \n    '214', '215', '216', '217', '218', '219', '220', '221', '222', \n    '223', '224', '225', '226', '227', '228', '229', '230', '231', \n    '232', '233', '234', '235', '236', '237', '238', '239', '240', \n    '241', '242', '243', '244', '245', '246', '247', '248', '249', \n    '250', '251', '252', '253', '254', '255', '256', '257', '258', \n    '259', '260', '261', '262', '263', '264', '265', '266', '267', \n    '268', '269', '270', '271', '272', '273', '274', '275', '276', \n    '277', '278', '279', '280', '281', '282', '283', '284', '285', \n    '286', '287', '288', '289', '290', '291', '292', '293', '294', \n    '295', '296', '297', '298', '299', '300', '301', '302', '303', \n    '304', '305', '306', '307', '308', '309', '310', '311', '312', \n    '313', '314', '315', '316', '317', '318', '319', '320', '321', \n    '322', '323', '324', '325', '326', '327', '328', '329', '330', \n    '331', '332', '333', '334', '335', '336', '337', '338', '339', \n    '340', '341', '342', '343', '344', '345', '346', '347', '348', \n    '349', '350', '351', '352', '353', '354', '355', '356', '357', \n    '358', '359', '360', '361', '362', '363', '364', '365', '366', \n    '367', '368', '369', '370', '371', '372', '373', '374', '375', \n    '376', '377', '378', '379', '380', '381', '382', '383', '384', \n    '385', '386', '387', '388', '389', '390', '391', '392', '393', \n    '394', '395', '396', '397', '398', '399', '400', '401', '402', \n    '403', '404', '405', '406', '407', '408', '409', '410', '411', \n    '412', '413', '414', '415', '416', '417', '418', '419', '420', \n    '421', '422', '423', '424', '425', '426', '427', '428', '429', \n    '430', '431', '432', '433', '434', '435', '436', '437', '438', \n    '439', '440', '441', '442', '443', '444', '445', '446', '447', \n    '448', '449', '450', '451', '452', '453', '454', '455', '456', \n    '457', '458', '459', '460', '461', '462', '463', '464', '465', \n    '466', '467', '468', '469', '470', '471', '472', '473', '474', \n    '475', '476', '477', '478', '479', '480', '481', '482', '483', \n    '484', '485', '486', '487', '488', '489', '490', '491', '492', \n    '493', '494', '495', '496', '497', '498', '499', '500', '501', \n    '502', '503', '504', '505', '506', '507', '508', '509', '510', \n    '511', '512', '513', '514', '515', '516', '517', '518', '519', \n    '520', '521', '522', '523', '524', '525', '526', '527', '528', \n    '529', '530', '531', '532', '533', '534', '535', '536', '537', \n    '538', '539', '540', '541', '542', '543', '544', '545', '546', \n    '547', '548', '549', '550', '551', '552', '553', '554', '555', \n    '556', '557', '558', '559', '560', '561', '562', '563', '564', \n    '565', '566', '567', '568', '569', '570', '571', '572', '573', \n    '574', '575', '576', '577', '578', '579', '580', '581', '582', \n    '583', '584', '585', '586', '587', '588', '589', '590', '591', \n    '592', '593', '594', '595', '596', '597', '598', '599', '600', \n    '601', '602', '603', '604', '605', '606', '607', '608', '609', \n    '610', '611', '612', '613', '614', '615', '616', '617', '618', \n    '619', '620', '621', '622', '623', '624', '625', '626', '627', \n    '628', '629', '630', '631', '632', '633', '634', '635', '636', \n    '637', '638', '639', '640', '641', '642', '643', '644', '645', \n    '646', '647', '648', '649', '650', '651', '652', '653', '654', \n    '655', '656', '657', '658', '659', '660', '661', '662', '663', \n    '664', '665', '666', '667', '668', '669', '670', '671', '672', \n    '673', '674', '675', '676', '677', '678', '679', '680', '681', \n    '682', '683', '684', '685', '686', '687', '688', '689', '690', \n    '691', '692', '693', '694', '695', '696', '697', '698', '699', \n    '700', '701', '702', '703', '704', '705', '706', '707', '708', \n    '709', '710', '711', '712', '713', '714', '715', '716', '717', \n    '718', '719', '720', '721', '722', '723', '724', '725', '726', \n    '727', '728', '729', '730', '731', '732', '733', '734', '735', \n    '736', '737', '738', '739', '740', '741', '742', '743', '744', \n    '745', '746', '747', '748', '749', '750', '751', '752', '753', \n    '754', '755', '756', '757', '758', '759', '760', '761', '762', \n    '763', '764', '765', '766', '767', '768', '769', '770', '771', \n    '772', '773', '774', '775', '776', '777', '778', '779', '780', \n    '781', '782', '783', '784', '785', '786', '787', '788', '789', \n    '790', '791', '792', '793', '794', '795', '796', '797', '798', \n    '799', '800', '801', '802', '803', '804', '805', '806', '807', \n    '808', '809', '810', '811', '812', '813', '814', '815', '816', \n    '817', '818', '819', '820', '821', '822', '823', '824', '825', \n    '826', '827', '828', '829', '830', '831', '832', '833', '834', \n    '835', '836', '837', '838', '839', '840', '841', '842', '843', \n    '844', '845', '846', '847', '848', '849', '850', '851', '852', \n    '853', '854', '855', '856', '857', '858', '859', '860', '861', \n    '862', '863', '864', '865', '866', '867', '868', '869', '870', \n    '871', '872', '873', '874', '875', '876', '877', '878', '879', \n    '880', '881', '882', '883', '884', '885', '886', '887', '888', \n    '889', '890', '891', '892', '893', '894', '895', '896', '897', \n    '898', '899', '900', '901', '902', '903', '904', '905', '906', \n    '907', '908', '909', '910', '911', '912', '913', '914', '915', \n    '916', '917', '918', '919', '920', '921', '922', '923', '924', \n    '925', '926', '927', '928', '929', '930', '931', '932', '933', \n    '934', '935', '936', '937', '938', '939', '940', '941', '942', \n    '943', '944', '945', '946', '947', '948', '949', '950', '951', \n    '952', '953', '954', '955', '956', '957', '958', '959', '960', \n    '961', '962', '963', '964', '965', '966', '967', '968', '969', \n    '970', '971', '972', '973', '974', '975', '976', '977', '978', \n    '979', '980', '981', '982', '983', '984', '985', '986', '987', \n    '988', '989', '990', '991', '992', '993', '994', '995', '996', \n    '997', '998', '999'\n]\nresidential_large = parcels_proj[\n    (parcels_proj['use_code'].astype(str).str.startswith('1')) & \n    (parcels_proj['land_area'] > 5000)\n]\n\n# Count restaurants within 200m of each residential parcel\nrestaurants = poi_proj[poi_proj['business_type'].str.contains('restaurant', case=False, na=False)]\nresidential_large_with_restaurants = []\nfor idx, row in residential_large.iterrows():\n    nearby_restaurants = restaurants[restaurants.geometry.distance(row.geometry) <= 200]\n    if len(nearby_restaurants) >= 50:\n        residential_large_with_restaurants.append(row['ml'])\n\n# Combine results\nresult_ids = set(commercial_near_harvard['ml']).union(residential_large_with_restaurants)\nresult_ids = sorted(result_ids)\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      "10-33",
      "159-2",
      "160-11",
      "160-14",
      "160-57",
      "160-58",
      "160-59",
      "160-69",
      "162-63",
      "165-56",
      "169-100",
      "169-102",
      "169-42",
      "169-50",
      "169-93",
      "169-98",
      "169-99",
      "177-41",
      "177-42",
      "177-45",
      "177-78",
      "75-100",
      "75-112",
      "75-53",
      "91-104",
      "91-180",
      "91-202",
      "91-23",
      "91-32",
      "91-99",
      "92-118",
      "92-119",
      "93-135",
      "93-57",
      "93-58",
      "93-64",
      "93-67"
    ]
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.0,
    "precision": 0.0,
    "recall": 0.0,
    "f1_score": 0.0,
    "generated_count": 1,
    "ground_truth_count": 7,
    "correct_count": 0,
    "query": "find parcels that are zoned for retail and within 300m of a subway station and not within 100m of a competitor.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": true,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspend = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Projected CRS for Cambridge, MA\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter retail parcels\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\nretail_parcels = parcels[parcels['use_code'].astype(str).isin(retail_use_codes)].copy()\n\n# Filter subway stations from POI\nsubway_stations = poi[poi['business_type'] == 'Subway Station'].copy()\n\n# Buffer subway stations by 300m\nsubway_buffers = [geom.buffer(300) for geom in subway_stations.geometry]\nsubway_union_buffer = gpd.GeoSeries(subway_buffers).union_all()\n\n# Retail parcels within 300m of subway\nretail_near_subway = retail_parcels[retail_parcels.geometry.intersects(subway_union_buffer)].copy()\n\n# Competitor POI: retail businesses\ncompetitor_types = ['Retail', 'Restaurant', 'Food', 'Grocery']\ncompetitor_poi = poi[poi['business_type'].isin(competitor_types)].copy()\n\n# Buffer competitor POI by 100m\ncompetitor_buffers = [geom.buffer(100) for geom in competitor_poi.geometry]\ncompetitor_union_buffer = gpd.GeoSeries(competitor_buffers).union_all()\n\n# Retail near subway and NOT within 100m of competitor\nfinal_parcels = retail_near_subway[~retail_near_subway.geometry.intersects(competitor_union_buffer)].copy()\n\n# Sort by parcel ID (ml)\nfinal_parcels = final_parcels.sort_values('ml')\n\n# Get parcel IDs\nfinal_ids = final_parcels['ml'].tolist()\n\n# Print results\nprint(final_ids)",
    "generated_ids": [
      ""
    ]
  },
  {
    "query": "find parcels that are either office space larger than 10,000 sq ft or retail space within 500m of high-density residential areas.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Projected CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Define office and retail use codes\noffice_use_codes = ['340', '343', '345', '346', '347', '362', '365', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999']\nretail_use_codes = ['300', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999']\n# Filter office parcels > 10,000 sq ft\noffice_parcels = parcels_proj[(parcels_proj['use_code'].isin(office_use_codes)) & (parcels_proj['land_area'] > 10000)]\n# Filter retail parcels within 500m of high-density residential areas\n# Define high-density residential use codes\nhigh_density_residential_use_codes = ['101', '102', '104', '105', '109', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '253', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '281', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '292', '293', '294', '295', '296', '297', '298', '299', '300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999']\n# Filter retail parcels within 500m of high-density residential areas\n# Combine criteria\ncombined_parcels = gpd.GeoSeries(pd.concat([office_parcels.geometry, retail_near_residential.geometry])).reset_index(drop=True)\n# Sort by ml\nresult_parcels = combined_parcels.sort_values().reset_index(drop=True\n# Get parcel IDs\nresult_ids = result_parcels['ml'].tolist()\n# Print results\nprint(result_ids)"
  },
  {
    "query": "find commercial parcels that, if larger than 5000 sq ft, must be within 400m of public transit, or if smaller, must be within 200m of residential areas.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Projected CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '330', \n    '332', '334', '340', '341', '343', '345', '346', '353', '362', \n    '375', '404', '406', '0340', '0406', '0400', '0410', '0411', \n    '0412', '0413', '0414', '0415', '0416', '0417', '0418', '0419'\n]\n\n# Filter for commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Define public transit locations (POI)\ntransit_poi = poi_proj[poi_proj['business_type'].str.contains('Transit|Train|Bus', case=False, na=False)]\n\n# Define residential areas (Census)\nresidential_census = census_proj[census_proj['use_code'].astype(str).str.startswith('1')]\n\n# Spatial join: commercial parcels with transit POI\nif not transit_poi.empty:\n    transit_join = gpd.sjoin(commercial_parcels, transit_poi, how='inner', predicate='intersects')\nelse:\n    transit_join = gpd.GeoDataFrame(columns=commercial_parcels.columns)\n\n# Filter parcels >5000 sq ft within 400m of transit\nlarge_parcels = commercial_parcels[commercial_parcels['land_area'] > 5000].copy()\nif not transit_join.empty:\n    transit_ids = transit_join['ml'].unique()\n    large_parcels = large_parcels[large_parcels['ml'].isin(transit_ids)]\n\n# Spatial join: commercial parcels with residential areas\nif not residential_census.empty:\n    residential_join = gpd.sjoin(commercial_parcels, residential_census, how='inner', predicate='intersects')\nelse:\n    residential_join = gpd.GeoDataFrame(columns=commercial_parcels.columns)\n\n# Filter parcels <=5000 sq ft within 200m of residential\nsmall_parcels = commercial_parcels[commercial_parcels['land_area'] <= 5000].copy()\nif not residential_join.empty:\n    residential_ids = residential_join['ml'].unique()\n    small_parcels = small_parcels[small_parcels['ml'].isin(residential_ids)]\n\n# Combine results\nresult_ids = set(large_parcels['ml'].unique()).union(set(small_parcels['ml'].unique()))\n\n# Sort and return parcel IDs\nresult_ids = sorted(result_ids)\n\n# Print results\nprint(result_ids)"
  },
  {
    "query": "find parcels that are: if zoned for commercial, must be larger than 8000 sq ft; if zoned for residential, must have less than 2 similar properties within 1000m",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter commercial parcels > 8000 sq ft\nlarge_commercial = parcels_proj[\n    (parcels_proj['use_code'].astype(str).str.startswith('3')) & \n    (parcels_proj['land_area'] > 8000)\n]\n\n# Filter residential parcels with < 2 similar properties within 1000m\nresidential = parcels_proj[parcels_proj['use_code'].astype(str).str.startswith('1')]\nresidential = residential.copy()\n\n# Count similar residential parcels within 1000m\ndef count_similar_residential(parcel_geom, all_residential, buffer_distance=1000):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    similar_parcels = all_residential[all_residential.geometry.intersects(buffered_geom)]\n    return len(similar_parcels) - 1  # Exclude self\n\nresidential['similar_count'] = residential.geometry.apply(\n    lambda geom: count_similar_residential(geom, residential)\n)\n\n# Filter for < 2 similar properties\nlow_similar_residential = residential[residential['similar_count'] < 2]\n\n# Combine results\nresult_parcels = gpd.GeoSeries(pd.concat([large_commercial, low_similar_residential], ignore_index=True))\n\n# Sort by parcel ID\nresult_ids = result_parcels['ml'].sort_values().tolist()\n\n# Print results\nprint(result_ids)"
  },
  {
    "query": "find mixed-use parcels that, if north of massachusetts avenue, must have retail on the ground floor, otherwise must have at least 3000 sq ft of commercial space.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define Massachusetts Avenue\nmass_ave_coords = [(-71.1189, 42.3736), (-71.0942, 42.3656)]\nmass_ave_line = gpd.GeoSeries([gpd.points_from_xy(*zip(*mass_ave_coords)).tolist()]).to_crs(epsg=26986).iloc[0]\nmass_ave_line = gpd.GeoSeries([mass_ave_line]).set_crs(epsg=26986).to_crs(epsg=26986)\n\n# Filter mixed-use parcels\nmixed_use_codes = ['1000', '1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011']\nmixed_use_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(mixed_use_codes)].copy()\n\n# Define POI types for retail\nretail_types = ['restaurant', 'cafe', 'clothing_store', 'grocery_store', 'department_store', 'pharmacy', 'convenience_store']\nretail_poi = poi_proj[poi_proj['business_type'].isin(retail_types)].copy()\n\n# Spatial join for retail POI\nretail_poi_buffer = retail_poi.copy()\nretail_poi_buffer['geometry'] = retail_poi_buffer.geometry.buffer(50)\njoined_retail = gpd.sjoin(mixed_use_parcels, retail_poi_buffer, how='left', predicate='intersects')\n\n# Filter parcels with retail on ground floor\nretail_on_ground = joined_retail[joined_retail['ml'].notnull()]['ml'].unique()\n\n# Filter parcels north of Massachusetts Avenue\nnorth_of_mass_ave = mixed_use_parcels[mixed_use_parcels.geometry.centroid.y > mass_ave_line.geometry[0].y]\n\n# Filter parcels without retail on ground floor\nno_retail = north_of_mass_ave[~north_of_mass_ave['ml'].isin(retail_on_ground)]\n\n# Commercial space requirement\ncommercial_space_threshold = 3000\ncommercial_parcels = no_retail[no_retail['gross_area'] >= commercial_space_threshold]\n\n# Combine results\nresult_ids = set(retail_on_ground) | set(commercial_parcels['ml'].unique())\n\n# Sort and print results\nresult_ids = sorted(result_ids)\nprint(result_ids)"
  },
  {
    "query": "Find parcels between 1000-10000 square feet within 800 meters of Kendall/MIT station in census tracts where at least 5% of residents have advanced degrees.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Projected CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Filter parcels by size\nfiltered_parcels = parcels_proj[(parcels_proj['land_area'] >= 1000) & (parcels_proj['land_area'] <= 10000)]\n\n# Define Kendall/MIT station location\nkendall_station = gpd.GeoDataFrame(geometry=[gpd.points_from_xy([-71.0822], [42.3625])], crs=parcels.crs).to_crs(epsg=26986)\n\n# Buffer 800m around Kendall/MIT station\nstation_buffer = kendall_station.buffer(800).iloc[0]\nnear_parcels = filtered_parcels[filtered_parcels.geometry.intersects(station_buffer)]\n\n# Filter census data for advanced degree percentage\ncensus_proj['pct_adv_degree'] = census_proj['pct_adv_degree'].fillna(0)\ncensus_filtered = census_proj[census_proj['pct_adv_degree'] >= 0.05]\n\n# Spatial join: parcels in tracts with >=5% advanced degrees\njoined = gpd.sjoin(near_parcels, census_filtered, how='inner', predicate='within')\n\n# Sort by parcel ID (ml column)\nresult_ids = sorted(joined['ml'].tolist())\n\n# Print results\nprint(result_ids)"
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.0,
    "precision": 0.0,
    "recall": 0.0,
    "f1_score": 0.0,
    "generated_count": 1,
    "ground_truth_count": 190,
    "correct_count": 0,
    "query": "Find office parcels with at least 7500 square feet that are within 400 meters of both a restaurant and a coffee shop.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-024125:BUpW6xog",
    "success": true,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Projected CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter office parcels (use use_code for office)\noffice_parcels = parcels_proj[parcels_proj['use_code'].astype(str).str.startswith('34')].copy()\n\n# Filter by size (at least 7500 sq ft)\nlarge_office_parcels = office_parcels[office_parcels['land_area'] >= 7500].copy()\n\n# Define restaurant and coffee shop POI types\nrestaurant_types = ['restaurant', 'cafe', 'food']\ncoffee_shop_types = ['coffee', 'cafe']\n\n# Filter POI for restaurants and coffee shops\nrestaurants = poi_proj[poi_proj['business_type'].isin(restaurant_types)].copy()\ncoffee_shops = poi_proj[poi_proj['business_type'].isin(coffee_shop_types)].copy()\n\n# Function to find parcels within 400m of both a restaurant and a coffee shop\ndef parcels_near_both_types(office_parcels, restaurants, coffee_shops, buffer_distance=400):\n    valid_parcels = set()\n    \n    for idx, parcel in office_parcels.iterrows():\n        parcel_geom = parcel.geometry\n        \n        # Buffer parcel by 400m\n        buffered_parcel = parcel_geom.buffer(buffer_distance)\n        \n        # Check for restaurants and coffee shops within buffered area\n        nearby_restaurants = restaurants[restaurants.geometry.intersects(buffered_parcel)]\n        nearby_coffee_shops = coffee_shops[coffee_shops.geometry.intersects(buffered_parcel)]\n        \n        if not nearby_restaurants.empty and not nearby_coffee_shops.empty:\n            valid_parcels.add(parcel['ml'])\n    \n    return sorted(valid_parcels)\n\n# Find parcels meeting criteria\nresult_parcels = parcels_near_both_types(large_office_parcels, restaurants, coffee_shops)\n\n# Print results\nprint(result_parcels)",
    "generated_ids": [
      ""
    ]
  }
]