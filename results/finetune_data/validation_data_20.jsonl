{"messages": [{"role": "system", "content": "You are an expert in geospatial data analysis using Python."}, {"role": "user", "content": "Generate Python code to answer this query: find commercial parcels that are between 5000-10000 square feet, within 500 meters of a subway station, and have no more than 1 competitor within 500 meters."}, {"role": "assistant", "content": "import geopandas as gpd\nfrom shapely.geometry import Point\nfrom shapely.ops import unary_union\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n# Define subway station locations\nsubway_stations = [\n    Point(-71.1189, 42.3736),  # Harvard Square\n    Point(-71.1031, 42.3656),  # Central Square\n    Point(-71.0865, 42.3625),  # Kendall/MIT\n    Point(-71.1226, 42.3782),  # Porter Square\n    Point(-71.1429, 42.3954)   # Alewife\n]\nsubway_gdf = gpd.GeoDataFrame(geometry=subway_stations, crs=parcels.crs)\n# Convert to projected CRS for accurate distance measurement\nparcels_proj = parcels.to_crs(epsg=26986)\nsubway_gdf_proj = subway_gdf.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n# Filter for commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n# CONSTRAINT 1: Size between 5000-10000 sq ft\nsize_filtered_parcels = commercial_parcels[\n    (commercial_parcels['land_area'] >= 5000) & \n    (commercial_parcels['land_area'] <= 10000)\n]\n# CONSTRAINT 2: Within 500m of subway station\n# Create 500m buffer around subway stations\nsubway_buffers = [geom.buffer(500) for geom in subway_gdf_proj.geometry]\nunion_buffer = unary_union(subway_buffers)\n# Filter by location, as a true copy\nlocation_filtered_parcels = size_filtered_parcels[\n    size_filtered_parcels.geometry.intersects(union_buffer)\n].copy()\n# CONSTRAINT 3: No more than 1 competitor within 500m\n# First identify competitors (businesses of same type)\ndef count_competitors(parcel_geom, parcel_use_code, poi_geoms, poi_use_codes, buffer_distance=500):\n    # Get business type for this parcel\n    parcel_type = str(parcel_use_code)[:3]  # First 3 digits of use code\n    \n    # Get competitor business types\n    competitor_types = []\n    if parcel_type.startswith('32'):  # Retail\n        competitor_types = ['restaurant', 'clothing_store', 'department_store', 'grocery_store', \n                           'convenience_store', 'retail']\n    elif parcel_type.startswith('33'):  # Food service\n        competitor_types = ['restaurant', 'cafe', 'bakery', 'fast_food']\n    elif parcel_type.startswith('31'):  # Office\n        competitor_types = ['offices_of_physicians', 'offices_of_other_health_practitioners',\n                          'offices_of_dentists', 'offices_of_real_estate_agents']\n    else:\n        competitor_types = ['business_type']  # Generic\n    \n    # Create buffer\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    \n    # Count competitors\n    count = 0\n    for i, (geom, use_code) in enumerate(zip(poi_geoms, poi_use_codes)):\n        if geom is not None and buffered_geom.contains(geom):\n            if any(comp_type in str(use_code).lower() for comp_type in competitor_types):\n                count += 1\n    \n    return count\n# Get competitors for each parcel\npoi_geoms = poi_proj['geometry'].tolist()\npoi_use_codes = poi_proj['business_type'].tolist()\ncompetitor_counts = []\nfor idx, row in location_filtered_parcels.iterrows():\n    count = count_competitors(row['geometry'], row['use_code'], poi_geoms, poi_use_codes)\n    competitor_counts.append(count)\nlocation_filtered_parcels.loc[:, 'competitor_count'] = competitor_counts\n# Filter for parcels with at most 1 competitor\nfinal_parcels = location_filtered_parcels[location_filtered_parcels['competitor_count'] <= 1]\n# Convert back to original CRS\nfinal_parcels = final_parcels.to_crs(parcels.crs)\n# Display results\nresult_ids = final_parcels['ml'].tolist()\nprint(f\"Found {len(final_parcels)} commercial parcels meeting all criteria:\")\nprint(f\"Parcel IDs: {result_ids}\")"}]}
{"messages": [{"role": "system", "content": "You are an expert in geospatial data analysis using Python."}, {"role": "user", "content": "Generate Python code to answer this query: find parcels that are either office space larger than 10,000 sq ft or retail space within 500m of high-density residential areas."}, {"role": "assistant", "content": "import geopandas as gpd\nimport pandas as pd\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n# Project to metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\n# CONDITION 1: Office space larger than 10,000 sq ft\n# Define office use codes\noffice_use_codes = ['340', '343', '345', '346', '0340', '404', '406', '0406']\n# Filter for office parcels\noffice_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(office_use_codes)].copy()\n# Filter by size\nlarge_office = office_parcels[office_parcels['land_area'] > 10000].copy()\n# CONDITION 2: Retail space within 500m of high-density residential areas\n# Define retail use codes\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\n# Filter for retail parcels\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_use_codes)].copy()\n# Define high-density residential use codes (apartment buildings)\nhigh_density_res_codes = ['111', '112', '114', '0111', '0112']\n# Filter for high-density residential parcels\nhigh_density_res = parcels_proj[parcels_proj['use_code'].astype(str).isin(high_density_res_codes)].copy()\n# Create 500m buffer around high-density residential areas\nhigh_density_buffers = [geom.buffer(500) for geom in high_density_res.geometry]\nhigh_density_union_buffer = gpd.GeoSeries(high_density_buffers).union_all()\n# Find retail parcels within 500m of high-density residential areas\nretail_near_high_density = retail_parcels[retail_parcels.geometry.intersects(high_density_union_buffer)].copy()\n# COMBINE CONDITIONS (OR)\n# Add a flag to identify which condition each parcel meets\nlarge_office.loc[:, 'condition'] = 'large_office'\nretail_near_high_density.loc[:, 'condition'] = 'retail_near_high_density'\n# Concatenate results from both conditions\ncombined_results = pd.concat([large_office, retail_near_high_density])\n# Remove any duplicates (parcels that meet both conditions)\ncombined_results = combined_results.drop_duplicates('ml')\n# Convert back to original CRS\ncombined_results = combined_results.to_crs(parcels.crs)\n# Output results\nresult_ids = combined_results['ml'].tolist()\nprint(f\"Found {len(combined_results)} parcels meeting either condition:\")\nprint(f\"Parcel IDs: {result_ids}\")"}]}
{"messages": [{"role": "system", "content": "You are an expert in geospatial data analysis using Python."}, {"role": "user", "content": "Generate Python code to answer this query: find office parcels larger than 5000 square feet with at least 2 parking spaces, prioritizing those in areas with high educational attainment."}, {"role": "assistant", "content": "import geopandas as gpd\nimport numpy as np\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\ncensus = gpd.read_file('cambridge_census_cambridge_pct.geojson')\n# Project to metric CRS for accurate analysis\nparcels_proj = parcels.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n# Define office use codes consistently\noffice_use_codes = [\n    '300', '302', '316', '340', '341', '343', '345', '346',\n    '353', '362', '375'\n]\n# CONSTRAINT 1: Filter for office parcels larger than 5000 sq ft\nlarge_office_parcels = parcels_proj[\n    (parcels_proj['use_code'].astype(str).isin(office_use_codes)) & \n    (parcels_proj['land_area'] > 5000)\n].copy()\n# CONSTRAINT 2: Filter for parcels with at least 2 parking spaces\n# Assuming there's a column for parking spaces\nif 'parking_spaces' in large_office_parcels.columns:\n    office_with_parking = large_office_parcels[large_office_parcels['parking_spaces'] >= 2].copy()\nelif 'num_parking' in large_office_parcels.columns:\n    office_with_parking = large_office_parcels[large_office_parcels['num_parking'] >= 2].copy()\nelse:\n    # If no parking data is available, estimate based on land area\n    # Assuming roughly 300 sq ft per parking space (including access lanes)\n    print(\"Warning: No parking space column found, estimating based on land area\")\n    large_office_parcels['estimated_parking'] = (large_office_parcels['land_area'] * 0.15 / 300).astype(int)\n    office_with_parking = large_office_parcels[large_office_parcels['estimated_parking'] >= 2].copy()\n# SOFT CONSTRAINT: Prioritize by educational attainment\n# Spatial join with census data\nparcels_with_census = gpd.sjoin(\n    office_with_parking,\n    census_proj,\n    how='left',\n    predicate='within'\n)\n# Prioritize by educational attainment\n# Check what educational attainment columns exist\nif 'pct_adv_deg' in parcels_with_census.columns:\n    # If we have advanced degree percentage, use that\n    parcels_with_census = parcels_with_census.sort_values('pct_adv_deg', ascending=False)\nelif 'pct_bachelors' in parcels_with_census.columns:\n    # If we have bachelor's degree percentage, use that\n    parcels_with_census = parcels_with_census.sort_values('pct_bachelors', ascending=False)\nelif 'pct_college' in parcels_with_census.columns:\n    # If we have general college education percentage, use that\n    parcels_with_census = parcels_with_census.sort_values('pct_college', ascending=False)\nelse:\n    print(\"Warning: No educational attainment columns found, unable to prioritize by education\")\n# Convert back to original CRS\nfinal_parcels = parcels_with_census.to_crs(parcels.crs)\n# Display results\nresult_ids = final_parcels['ml'].tolist()\nprint(f\"Found {len(final_parcels)} office parcels >5000 sq ft with at least 2 parking spaces\")\nprint(f\"Parcel IDs (prioritized by educational attainment): {result_ids}\")"}]}
{"messages": [{"role": "system", "content": "You are an expert in geospatial data analysis using Python."}, {"role": "user", "content": "Generate Python code to answer this query: find parcels that are zoned for retail and within 300m of a subway station and not within 100m of a competitor."}, {"role": "assistant", "content": "import geopandas as gpd\nfrom shapely.geometry import Point\nfrom shapely.ops import unary_union\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n# Project to metric CRS for accurate distance measurement\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n# Define subway station locations\nsubway_stations = [\n    Point(-71.1189, 42.3736),  # Harvard Square\n    Point(-71.1031, 42.3656),  # Central Square\n    Point(-71.0865, 42.3625),  # Kendall/MIT\n    Point(-71.1226, 42.3782),  # Porter Square\n    Point(-71.1429, 42.3954)   # Alewife\n]\nsubway_gdf = gpd.GeoDataFrame(geometry=subway_stations, crs=parcels.crs)\nsubway_gdf_proj = subway_gdf.to_crs(epsg=26986)\n# Define retail use codes\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\n# CONSTRAINT 1: Filter for retail parcels\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_use_codes)].copy()\n# CONSTRAINT 2: Within 300m of a subway station\n# Create 300m buffer around subway stations\nsubway_buffers = [geom.buffer(300) for geom in subway_gdf_proj.geometry]\nsubway_union_buffer = unary_union(subway_buffers)\n# Filter for retail parcels within 300m of subway stations\nretail_near_subway = retail_parcels[retail_parcels.geometry.intersects(subway_union_buffer)].copy()\n# CONSTRAINT 3: NOT within 100m of a competitor\n# Filter for retail businesses from POI data (competitors)\nretail_poi = poi_proj[poi_proj['business_type'] == 'retail']\n# Function to check if a parcel is NOT within 100m of a competitor\ndef has_no_nearby_competitors(parcel_geom, parcel_id, competitor_geoms, buffer_distance=100):\n    # Create buffer around parcel\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    \n    # Check for any competitors within buffer\n    for geom in competitor_geoms:\n        if buffered_geom.contains(geom):\n            return False  # Has at least one competitor within range\n    \n    return True  # No competitors within range\n# Get retail POI geometries\nretail_poi_geoms = retail_poi['geometry'].tolist()\n# Filter for parcels without nearby competitors\nretail_no_competitors = []\nfor idx, row in retail_near_subway.iterrows():\n    if has_no_nearby_competitors(row['geometry'], row['ml'], retail_poi_geoms):\n        retail_no_competitors.append(row['ml'])\n# Filter for final result\nfinal_parcels = retail_near_subway[retail_near_subway['ml'].isin(retail_no_competitors)]\n# Convert back to original CRS\nfinal_parcels = final_parcels.to_crs(parcels.crs)\n# Sort by parcel ID for consistency\nfinal_parcels = final_parcels.sort_values('ml')\n# Display results\nresult_ids = final_parcels['ml'].tolist()\nprint(f\"Found {len(final_parcels)} retail parcels within 300m of subway stations and without competitors within 100m\")\nprint(f\"Parcel IDs: {result_ids}\")"}]}
