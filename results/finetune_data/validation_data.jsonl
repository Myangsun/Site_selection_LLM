{"messages": [{"role": "system", "content": "You are an expert in geospatial data analysis using Python."}, {"role": "user", "content": "Generate Python code to answer this query: find parcels that are either commercial places within 100m of harvard square or residential larger than 5000 square feet and within 200m of 50 restaurants."}, {"role": "assistant", "content": "import geopandas as gpd\nfrom shapely.geometry import Point\nfrom shapely.ops import unary_union\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n# Project to metric CRS for accurate distance measurement\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n# Define Harvard Square location\nharvard_square = Point(-71.1189, 42.3736)\nharvard_gdf = gpd.GeoDataFrame(geometry=[harvard_square], crs=parcels.crs)\nharvard_gdf_proj = harvard_gdf.to_crs(epsg=26986)\n# Define commercial and residential use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\nresidential_use_codes = [\n    '101', '1014', '102', '1028', '104', '105', '109', '1094', '1095', \n    '1098', '111', '112', '113', '114', '121', '970', '9700', '9421'\n]\n# CONDITION 1: Commercial parcels within 100m of Harvard Square\n# Create 100m buffer around Harvard Square\nharvard_buffer = harvard_gdf_proj.buffer(100).iloc[0]\n# Filter for commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)]\n# Find commercial parcels within 100m of Harvard Square\ncommercial_near_harvard = commercial_parcels[commercial_parcels.geometry.intersects(harvard_buffer)].copy()\n# CONDITION 2: Residential parcels larger than 5000 sq ft and within 200m of 50 restaurants\n# Filter for residential parcels > 5000 sq ft\nlarge_residential = parcels_proj[\n    (parcels_proj['use_code'].astype(str).isin(residential_use_codes)) & \n    (parcels_proj['land_area'] > 5000)\n].copy()\n# Filter for restaurants from POI data\nrestaurants = poi_proj[poi_proj['business_type'] == 'restaurant']\n# Find parcels with at least 50 restaurants within 200m\ndef count_nearby_restaurants(parcel_geom, restaurant_geoms, buffer_distance=200):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    count = sum(1 for geom in restaurant_geoms if buffered_geom.contains(geom))\n    return count\n# Get restaurant geometries\nrestaurant_geoms = restaurants['geometry'].tolist()\n# Calculate nearby restaurant count for each large residential parcel\nlarge_residential['nearby_restaurants'] = large_residential['geometry'].apply(\n    lambda geom: count_nearby_restaurants(geom, restaurant_geoms)\n)\n# Filter for parcels with at least 50 restaurants within 200m\nresidential_near_restaurants = large_residential[large_residential['nearby_restaurants'] >= 50]\n# Identify all parcels that meet either condition\ncommercial_ids = set(commercial_near_harvard['ml'].tolist())\nresidential_ids = set(residential_near_restaurants['ml'].tolist())\nall_ids = commercial_ids.union(residential_ids)\n# Filter the original parcels dataframe for these IDs\nresult_parcels = parcels_proj[parcels_proj['ml'].isin(all_ids)]\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} parcels meeting either condition\")\nprint(f\"Parcel IDs: {result_ids}\")"}]}
{"messages": [{"role": "system", "content": "You are an expert in geospatial data analysis using Python."}, {"role": "user", "content": "Generate Python code to answer this query: find commercial parcels larger than 8000 square feet in census tracts with at least 90% of residents aged 18-64."}, {"role": "assistant", "content": "import geopandas as gpd\nimport pandas as pd\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\ncensus = gpd.read_file('cambridge_census_cambridge_pct.geojson')\n# Filter for commercial parcels\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n# Filter for commercial parcels\ncommercial_parcels = parcels[parcels['use_code'].astype(str).isin(commercial_use_codes)].copy()\n# Filter for parcels larger than 8000 sq ft\nlarge_commercial = commercial_parcels[commercial_parcels['land_area'] > 8000]\n# Ensure both datasets have same CRS\nlarge_commercial = large_commercial.to_crs(census.crs)\n# Spatial join to connect parcels with census tracts (use 'predicate' instead of 'op')\nparcels_with_census = gpd.sjoin(\n    large_commercial,\n    census,\n    how='left',\n    predicate='within'\n)\n# Filter for census tracts with at least 90% in 18-64 age bracket\nresult_parcels = parcels_with_census[parcels_with_census['pct_18_64'] >= 0.9]\n# Sort by percentage of 18-64 year olds (higher is better)\nresult_parcels = result_parcels.sort_values('pct_18_64', ascending=False)\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f"}]}
{"messages": [{"role": "system", "content": "You are an expert in geospatial data analysis using Python."}, {"role": "user", "content": "Generate Python code to answer this query: find all parcels that have no more than 2 competing restaurants within 800 meters."}, {"role": "assistant", "content": "import geopandas as gpd\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n# Convert to projected CRS for accurate distance measurement\nparcels_proj = parcels.to_crs(epsg=26986)  # Massachusetts state plane\n# Filter restaurants from POI data\nrestaurants = poi[poi['business_type'] == 'restaurant']\nrestaurants_proj = restaurants.to_crs(epsg=26986)  # Massachusetts state plane\n# Count nearby restaurants for each parcel\ndef count_nearby_restaurants(parcel_geom, restaurant_geoms, buffer_distance=800):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    count = sum(1 for rest_geom in restaurant_geoms if buffered_geom.contains(rest_geom))\n    return count\n# Calculate restaurant count for each parcel\nrestaurant_geoms = restaurants_proj['geometry'].tolist()\nparcels_proj['nearby_restaurants'] = parcels_proj['geometry'].apply(\n    lambda geom: count_nearby_restaurants(geom, restaurant_geoms)\n)\n# Filter for parcels with 0, 1, or 2 restaurants within 800m\nresult_parcels = parcels_proj[parcels_proj['nearby_restaurants'] <= 2]\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f"}]}
{"messages": [{"role": "system", "content": "You are an expert in geospatial data analysis using Python."}, {"role": "user", "content": "Generate Python code to answer this query: find parcels that are zoned for mixed-use, within 400 meters of public transportation, and at least 200 meters away from industrial areas."}, {"role": "assistant", "content": "import geopandas as gpd\nfrom shapely.geometry import Point\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n# Define transit stops (subway and major bus stops)\ntransit_stops = [\n    Point(-71.1189, 42.3736),  # Harvard Square\n    Point(-71.1031, 42.3656),  # Central Square\n    Point(-71.0865, 42.3625),  # Kendall/MIT\n    Point(-71.1226, 42.3782),  # Porter Square\n    Point(-71.1429, 42.3954),  # Alewife\n    Point(-71.1195, 42.3703),  # Harvard Law School\n    Point(-71.1167, 42.3803),  # Cambridge Common\n    Point(-71.1055, 42.3720),  # Inman Square\n    Point(-71.0955, 42.3703),  # Lechmere\n    Point(-71.1066, 42.3589)   # MIT Central\n]\ntransit_gdf = gpd.GeoDataFrame(geometry=transit_stops, crs=parcels.crs)\n# Project to metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\ntransit_gdf_proj = transit_gdf.to_crs(epsg=26986)\n# CONSTRAINT 1: Mixed-use zoning\n# Define mixed-use codes from the provided land use table\nmixed_use_codes = ['0101', '0104', '0105', '0111', '0112', '0121', '013', '031', '0340', '0406', '041', '0942']\n# Filter for mixed-use parcels\nmixed_use_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(mixed_use_codes)].copy()\n# CONSTRAINT 2: Within 400m of public transportation\n# Create 400m buffer around transit stops\ntransit_buffers = [geom.buffer(400) for geom in transit_gdf_proj.geometry]\ntransit_union_buffer = gpd.GeoSeries(transit_buffers).unary_union\n# Find mixed-use parcels within buffer\ntransit_accessible_parcels = mixed_use_parcels[\n    mixed_use_parcels.geometry.intersects(transit_union_buffer)\n].copy()\n# CONSTRAINT 3: At least 200m away from industrial areas\n# Define industrial use codes from the provided land use table\nindustrial_use_codes = ['400', '401', '407', '413']\n# Filter for industrial parcels\nindustrial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(industrial_use_codes)].copy()\n# Create 200m buffer around industrial parcels\nindustrial_buffers = [geom.buffer(200) for geom in industrial_parcels.geometry]\nindustrial_union_buffer = gpd.GeoSeries(industrial_buffers).unary_union\n# Find parcels outside the industrial buffer\nfinal_parcels = transit_accessible_parcels[\n    ~transit_accessible_parcels.geometry.intersects(industrial_union_buffer)\n].copy()\n# Convert back to original CRS\nfinal_parcels = final_parcels.to_crs(parcels.crs)\n# Output results\nresult_ids = final_parcels['ml'].tolist()\nprint(f"}]}
