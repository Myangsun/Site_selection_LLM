{"messages": [{"role": "system", "content": "You are an expert in geospatial data analysis using Python."}, {"role": "user", "content": "Generate Python code to answer this query: find mixed-use parcels that, if north of massachusetts avenue, must have retail on the ground floor, otherwise must have at least 3000 sq ft of commercial space."}, {"role": "assistant", "content": "import geopandas as gpd\nfrom shapely.geometry import LineString\nfrom shapely.ops import unary_union\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\n# Project to metric CRS for accurate analysis\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n# Define Massachusetts Avenue as a line\nmass_ave_points = [\n    (-71.107894, 42.367672),  # Near Tanjore restaurant on Mass Ave\n    (-71.10564, 42.367132),   # Near Fire Department on Mass Ave\n    (-71.10144, 42.363676)    # Near The Boston Lamb Takedown on Mass Ave\n]\nmass_ave = LineString(mass_ave_points)\nmass_ave_gdf = gpd.GeoDataFrame(geometry=[mass_ave], crs=parcels.crs)\nmass_ave_proj = mass_ave_gdf.to_crs(epsg=26986)\n# Define mixed-use codes\nmixed_use_codes = [\n    '0101', '0104', '0105', '0111', '0112', '0121', '013', '031', '0340', \n    '0406', '041', '0942'\n]\n# Define retail use codes\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\n# Filter for mixed-use parcels\nmixed_use_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(mixed_use_codes)].copy()\n# Determine north/south of Massachusetts Avenue\n# Create a function to check if a parcel is north of Mass Ave\ndef is_north_of_mass_ave(parcel_geom, mass_ave_line):\n    # This is a simplified approach - for a more accurate approach,\n    # we would need to extend the line and use proper north/south calculation\n    # based on the perpendicular distance and direction\n    \n    # Get centroid of parcel\n    centroid = parcel_geom.centroid\n    \n    # Calculate y-coordinate (latitude) difference from Mass Ave\n    # If y-coordinate is greater than Mass Ave's average y, it's north\n    mass_ave_y = mass_ave_line.centroid.y\n    return centroid.y > mass_ave_y\n# Add a column indicating north/south of Mass Ave\nmixed_use_parcels['north_of_mass_ave'] = mixed_use_parcels.geometry.apply(\n    lambda geom: is_north_of_mass_ave(geom, mass_ave_proj.geometry.iloc[0])\n)\n# CONDITION 1: For parcels north of Mass Ave, check if they have retail on ground floor\n# Filter POI data for retail businesses\nretail_poi = poi_proj[poi_proj['business_type'].isin(['retail', 'grocery_store', 'convenience_store', 'department_store'])]\n# Function to check if a parcel has retail on ground floor\ndef has_retail_on_ground_floor(parcel_geom, retail_poi_geoms):\n    # This is a simplified approach - in reality, we would need building floor data\n    # Here we just check if any retail POI intersects with the parcel\n    return any(parcel_geom.intersects(geom) for geom in retail_poi_geoms)\n# Get retail POI geometries\nretail_poi_geoms = retail_poi.geometry.tolist()\n# Check for retail on ground floor for parcels north of Mass Ave\nnorth_parcels_with_retail = []\nfor idx, row in mixed_use_parcels[mixed_use_parcels['north_of_mass_ave']].iterrows():\n    if has_retail_on_ground_floor(row.geometry, retail_poi_geoms):\n        north_parcels_with_retail.append(row['ml'])\n# CONDITION 2: For parcels south of Mass Ave, check commercial space size\n# For our simplified model, assume 'commercial_space' might be a column\n# If not, estimate from land_area or other metrics\nsouth_parcels_with_space = []\nfor idx, row in mixed_use_parcels[~mixed_use_parcels['north_of_mass_ave']].iterrows():\n    # If commercial_space column exists, use it\n    if 'commercial_space' in row:\n        commercial_space = row['commercial_space']\n    else:\n        # Estimate commercial space as a percentage of land area\n        # For mixed-use, often 30-50% of the land area is commercial\n        commercial_space = row['land_area'] * 0.4  # 40% estimate\n    \n    if commercial_space >= 3000:\n        south_parcels_with_space.append(row['ml'])\n# Combine results from both conditions\nnorth_ids = set(north_parcels_with_retail)\nsouth_ids = set(south_parcels_with_space)\nall_ids = north_ids.union(south_ids)\n# Filter for final results\nresult_parcels = mixed_use_parcels[mixed_use_parcels['ml'].isin(all_ids)]\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n# Sort by parcel ID for consistency\nresult_parcels = result_parcels.sort_values('ml')\n# Display results\nresult_ids = result_parcels['ml'].tolist()\nprint(f\"Found {len(result_parcels)} mixed-use parcels meeting conditional criteria\")\nprint(f\"North of Mass Ave: {len(north_ids)}\")\nprint(f\"South of Mass Ave: {len(south_ids)}\")\nprint(f\"Parcel IDs: {result_ids}\")"}]}
{"messages": [{"role": "system", "content": "You are an expert in geospatial data analysis using Python."}, {"role": "user", "content": "Generate Python code to answer this query: find vacant commercial parcels larger than 3000 square feet that are within 800 meters of a subway station."}, {"role": "assistant", "content": "import geopandas as gpd\nfrom shapely.geometry import Point\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n# Define subway station locations\nsubway_stations = [\n    Point(-71.1189, 42.3736),  # Harvard Square\n    Point(-71.1031, 42.3656),  # Central Square\n    Point(-71.0865, 42.3625),  # Kendall/MIT\n    Point(-71.1226, 42.3782),  # Porter Square\n    Point(-71.1429, 42.3954)   # Alewife\n]\nsubway_gdf = gpd.GeoDataFrame(geometry=subway_stations, crs=parcels.crs)\n# Project to metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\nsubway_gdf_proj = subway_gdf.to_crs(epsg=26986)\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346',\n    '353', '362', '375', '404', '406', '0340', '0406'\n]\n# Define vacant commercial land use codes from the provided table\nvacant_commercial_codes = ['390', '391', '392', '3922']\n# Filter for commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n# Filter for vacant commercial parcels\nvacant_commercial = parcels_proj[parcels_proj['use_code'].astype(str).isin(vacant_commercial_codes)].copy()\n# Filter for parcels larger than 3000 sq ft\nlarge_vacant_commercial = vacant_commercial[vacant_commercial['land_area'] > 3000].copy()\n# Create 800m buffer around subway stations\nsubway_buffers = [geom.buffer(800) for geom in subway_gdf_proj.geometry]\nunion_buffer = gpd.GeoSeries(subway_buffers).unary_union\n# Find large vacant commercial parcels within 800m of subway stations\nresult_parcels = large_vacant_commercial[large_vacant_commercial.geometry.intersects(union_buffer)].copy()\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n# Output results\nresult_ids = result_parcels['ml'].tolist()\nprint(f"}]}
{"messages": [{"role": "system", "content": "You are an expert in geospatial data analysis using Python."}, {"role": "user", "content": "Generate Python code to answer this query: find parcels that are zoned for mixed-use, within 400 meters of public transportation, and at least 200 meters away from industrial areas."}, {"role": "assistant", "content": "import geopandas as gpd\nfrom shapely.geometry import Point\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\n# Define transit stops (subway and major bus stops)\ntransit_stops = [\n    Point(-71.1189, 42.3736),  # Harvard Square\n    Point(-71.1031, 42.3656),  # Central Square\n    Point(-71.0865, 42.3625),  # Kendall/MIT\n    Point(-71.1226, 42.3782),  # Porter Square\n    Point(-71.1429, 42.3954),  # Alewife\n    Point(-71.1195, 42.3703),  # Harvard Law School\n    Point(-71.1167, 42.3803),  # Cambridge Common\n    Point(-71.1055, 42.3720),  # Inman Square\n    Point(-71.0955, 42.3703),  # Lechmere\n    Point(-71.1066, 42.3589)   # MIT Central\n]\ntransit_gdf = gpd.GeoDataFrame(geometry=transit_stops, crs=parcels.crs)\n# Project to metric CRS for accurate buffering\nparcels_proj = parcels.to_crs(epsg=26986)\ntransit_gdf_proj = transit_gdf.to_crs(epsg=26986)\n# CONSTRAINT 1: Mixed-use zoning\n# Define mixed-use codes from the provided land use table\nmixed_use_codes = ['0101', '0104', '0105', '0111', '0112', '0121', '013', '031', '0340', '0406', '041', '0942']\n# Filter for mixed-use parcels\nmixed_use_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(mixed_use_codes)].copy()\n# CONSTRAINT 2: Within 400m of public transportation\n# Create 400m buffer around transit stops\ntransit_buffers = [geom.buffer(400) for geom in transit_gdf_proj.geometry]\ntransit_union_buffer = gpd.GeoSeries(transit_buffers).unary_union\n# Find mixed-use parcels within buffer\ntransit_accessible_parcels = mixed_use_parcels[\n    mixed_use_parcels.geometry.intersects(transit_union_buffer)\n].copy()\n# CONSTRAINT 3: At least 200m away from industrial areas\n# Define industrial use codes from the provided land use table\nindustrial_use_codes = ['400', '401', '407', '413']\n# Filter for industrial parcels\nindustrial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(industrial_use_codes)].copy()\n# Create 200m buffer around industrial parcels\nindustrial_buffers = [geom.buffer(200) for geom in industrial_parcels.geometry]\nindustrial_union_buffer = gpd.GeoSeries(industrial_buffers).unary_union\n# Find parcels outside the industrial buffer\nfinal_parcels = transit_accessible_parcels[\n    ~transit_accessible_parcels.geometry.intersects(industrial_union_buffer)\n].copy()\n# Convert back to original CRS\nfinal_parcels = final_parcels.to_crs(parcels.crs)\n# Output results\nresult_ids = final_parcels['ml'].tolist()\nprint(f"}]}
{"messages": [{"role": "system", "content": "You are an expert in geospatial data analysis using Python."}, {"role": "user", "content": "Generate Python code to answer this query: \u201cfind the top 20 parcels with the highest consumer spending in surrounding areas.\u201d"}, {"role": "assistant", "content": "import geopandas as gpd\nimport pandas as pd\n# Load data\nparcels = gpd.read_file('cambridge_parcels.geojson')\npoi = gpd.read_file('cambridge_poi_processed.geojson')\nspend = pd.read_csv('cambridge_spend_processed.csv')\n# Convert to projected CRS for accurate distance measurement\nparcels_proj = parcels.to_crs(epsg=26986)\n# Combine POI with spending data\npoi_with_spend = poi.merge(\n    spend,\n    left_on='PLACEKEY',\n    right_on='PLACEKEY',\n    how='left'\n)\n# Fill NaN values in spending with 0\nif 'RAW_TOTAL_SPEND' in poi_with_spend.columns:\n    poi_with_spend['RAW_TOTAL_SPEND'] = poi_with_spend['RAW_TOTAL_SPEND'].fillna(0)\nelse:\n    poi_with_spend['RAW_TOTAL_SPEND'] = 0\n# Convert POI to projected CRS\npoi_with_spend_proj = poi_with_spend.to_crs(epsg=26986)\n# Calculate area spending for each parcel\ndef calculate_area_spending(parcel_geom, poi_geoms, spend_values, radius=200):  # 200m radius\n    buffered_geom = parcel_geom.buffer(radius)\n    total_spend = 0\n    \n    for i, poi_geom in enumerate(poi_geoms):\n        if poi_geom is not None and buffered_geom.contains(poi_geom):\n            total_spend += spend_values[i]\n    \n    return total_spend\n# Calculate spending around each parcel\n# For computational efficiency, evaluate at regular intervals\nstep = max(1, len(parcels_proj) // 1000)  # Calculate for ~1000 parcels\nparcels_to_evaluate = parcels_proj.iloc[::step].copy()\npoi_geoms = poi_with_spend_proj['geometry'].tolist()\nspend_values = poi_with_spend_proj['RAW_TOTAL_SPEND'].tolist()\nparcels_to_evaluate['area_spending'] = parcels_to_evaluate.geometry.apply(\n    lambda geom: calculate_area_spending(geom, poi_geoms, spend_values)\n)\n# Sort by area spending (higher is better)\nresult_parcels = parcels_to_evaluate.sort_values('area_spending', ascending=False)\ntop_spending_parcels = result_parcels.head(20)\n# Convert back to original CRS\ntop_spending_parcels = top_spending_parcels.to_crs(parcels.crs)\n# Display results\nresult_ids = top_spending_parcels['ml'].tolist()\nprint(f"}]}
