[
  {
    "query": "find commercial parcels within 500 meters of harvard square.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load the POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter POIs to find Harvard Square\nharvard_square = poi[poi['name'].str.contains('Harvard Square', case=False, na=False)]\n\n# Ensure both GeoDataFrames use the same projected CRS for distance calculations\nparcels = parcels.to_crs(epsg=26986)\nharvard_square = harvard_square.to_crs(epsg=26986)\n\n# Buffer Harvard Square by 500 meters\nharvard_square_buffer = harvard_square.buffer(500)\n\n# Filter parcels that are commercial and within 500 meters of Harvard Square\ncommercial_parcels = parcels[parcels['land_use'] == 'Commercial']\ncommercial_parcels_within_buffer = commercial_parcels[commercial_parcels.intersects(harvard_square_buffer.unary_union)]\n\n# Extract and sort the parcel IDs\nparcel_ids = commercial_parcels_within_buffer['ml'].sort_values().tolist()\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "find parcels larger than 6000 square feet that are zoned for retail use.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Set the CRS to EPSG:26986 for accurate spatial operations\nparcels = parcels.to_crs(epsg=26986)\n\n# Filter parcels larger than 6000 square feet and zoned for retail use\nfiltered_parcels = parcels[(parcels['area'] > 6000) & (parcels['zoning'] == 'Retail')]\n\n# Sort the filtered parcels by parcel ID (ml column)\nsorted_parcels = filtered_parcels.sort_values(by='ml')\n\n# Extract the list of parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "find all parcels that have no more than 2 competing restaurants within 800 meters.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load the POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter POI to only include restaurants\nrestaurants = poi[poi['category'] == 'restaurant']\n\n# Set the CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\nrestaurants = restaurants.to_crs(epsg=26986)\n\n# Buffer the restaurants by 800 meters\nrestaurants_buffered = restaurants.buffer(800)\n\n# Spatial join to find parcels within 800 meters of restaurants\nparcels_within_800m = gpd.sjoin(parcels, gpd.GeoDataFrame(geometry=restaurants_buffered), how='inner', op='intersects')\n\n# Count the number of restaurants within 800 meters for each parcel\nparcel_restaurant_counts = parcels_within_800m.groupby('ml').size()\n\n# Filter parcels with no more than 2 restaurants within 800 meters\nsuitable_parcels = parcel_restaurant_counts[parcel_restaurant_counts <= 2].index\n\n# Sort the parcel IDs\nsorted_parcel_ids = sorted(suitable_parcels)\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find the top 20 parcels in cambridge with the most diverse mix of residential and commercial land uses within 500 meters.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson').to_crs(epsg=26986)\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson').to_crs(epsg=26986)\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson').to_crs(epsg=26986)\n\n# Filter POI for residential and commercial categories\nresidential_poi = poi[poi['category'].str.contains('residential', case=False)]\ncommercial_poi = poi[poi['category'].str.contains('commercial', case=False)]\n\n# Buffer parcels by 500 meters\nparcels['geometry'] = parcels.geometry.buffer(500)\n\n# Spatial join to find parcels with residential and commercial POIs within 500 meters\nresidential_join = gpd.sjoin(parcels, residential_poi, how='inner', op='intersects')\ncommercial_join = gpd.sjoin(parcels, commercial_poi, how='inner', op='intersects')\n\n# Count unique residential and commercial POIs per parcel\nresidential_counts = residential_join.groupby('index_left').size().rename('res_count')\ncommercial_counts = commercial_join.groupby('index_left').size().rename('com_count')\n\n# Merge counts back to parcels\nparcels = parcels.join(residential_counts, on=parcels.index)\nparcels = parcels.join(commercial_counts, on=parcels.index)\n\n# Fill NaN values with 0\nparcels['res_count'] = parcels['res_count'].fillna(0)\nparcels['com_count'] = parcels['com_count'].fillna(0)\n\n# Calculate diversity score as the product of residential and commercial counts\nparcels['diversity_score'] = parcels['res_count'] * parcels['com_count']\n\n# Sort parcels by diversity score in descending order and select top 20\ntop_parcels = parcels.sort_values(by='diversity_score', ascending=False).head(20)\n\n# Extract and print the list of parcel IDs\ntop_parcel_ids = top_parcels['ml'].tolist()\nprint(top_parcel_ids)"
  },
  {
    "query": "find the top 20 commercial parcels in areas with the highest percentage of residents with advanced degrees.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Ensure all data is in the same CRS for spatial operations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter census data for areas with the highest percentage of residents with advanced degrees\n# Assuming 'pct_advanced_degrees' is the column in census data representing this percentage\ntop_census_areas = census.nlargest(20, 'pct_advanced_degrees')\n\n# Spatial join to find parcels in these top census areas\nparcels_in_top_areas = gpd.sjoin(parcels, top_census_areas, how='inner', op='intersects')\n\n# Filter for commercial parcels\n# Assuming 'land_use' is the column in parcels data that indicates the type of parcel\ncommercial_parcels = parcels_in_top_areas[parcels_in_top_areas['land_use'] == 'commercial']\n\n# Sort parcels by the percentage of residents with advanced degrees in the area\nsorted_commercial_parcels = commercial_parcels.sort_values(by='pct_advanced_degrees', ascending=False)\n\n# Get the top 20 parcel IDs\ntop_20_parcel_ids = sorted_commercial_parcels.head(20)['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(top_20_parcel_ids)"
  },
  {
    "query": "\u201cfind the top 20 parcels with the highest consumer spending in surrounding areas.\u201d",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Ensure all GeoDataFrames are in the same CRS\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Merge spending data with census data\ncensus_spending = census.merge(spending, left_on='census_id', right_on='census_id')\n\n# Calculate total spending in surrounding areas for each parcel\ndef calculate_surrounding_spending(parcel, poi, census_spending, buffer_distance=500):\n    # Create a buffer around the parcel\n    buffer = parcel.geometry.buffer(buffer_distance)\n    # Find POIs within the buffer\n    poi_within_buffer = poi[poi.intersects(buffer)]\n    # Find census tracts that intersect with the buffer\n    census_within_buffer = census_spending[census_spending.intersects(buffer)]\n    # Sum the spending in these census tracts\n    total_spending = census_within_buffer['spending'].sum()\n    return total_spending\n\n# Apply the function to each parcel\nparcels['surrounding_spending'] = parcels.apply(\n    calculate_surrounding_spending, axis=1, args=(poi, census_spending)\n)\n\n# Sort parcels by surrounding spending and get top 20\ntop_parcels = parcels.nlargest(20, 'surrounding_spending')\n\n# Extract and print the parcel IDs\ntop_parcel_ids = top_parcels['ml'].tolist()\nprint(top_parcel_ids)"
  },
  {
    "query": "find vacant commercial parcels larger than 3000 square feet that are within 800 meters of a subway station.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load the POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter POI data for subway stations\nsubway_stations = poi[poi['type'] == 'subway_station']\n\n# Project both datasets to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\nsubway_stations = subway_stations.to_crs(epsg=26986)\n\n# Filter parcels for vacant commercial parcels larger than 3000 square feet\nvacant_commercial_parcels = parcels[(parcels['use'] == 'commercial') & \n                                    (parcels['status'] == 'vacant') & \n                                    (parcels['area'] > 3000)]\n\n# Perform a spatial join to find parcels within 800 meters of a subway station\nbuffered_stations = subway_stations.buffer(800)\nparcels_within_800m = gpd.sjoin(vacant_commercial_parcels, \n                                gpd.GeoDataFrame(geometry=buffered_stations), \n                                op='intersects')\n\n# Extract and sort the parcel IDs\nparcel_ids = parcels_within_800m['ml'].sort_values().unique()\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "find commercial parcels zoned for retail use with fewer than 3 competing retail businesses within 300 meters.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Set the CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter parcels for those zoned for retail use\nretail_parcels = parcels[parcels['zoning'] == 'Retail']\n\n# Filter POIs for retail businesses\nretail_poi = poi[poi['business_type'] == 'Retail']\n\n# Function to count competing businesses within 300 meters\ndef count_competing_businesses(parcel, retail_poi):\n    buffer = parcel.geometry.buffer(300)\n    competing_businesses = retail_poi[retail_poi.intersects(buffer)]\n    return len(competing_businesses)\n\n# Apply the function to each retail parcel\nretail_parcels['competing_count'] = retail_parcels.apply(\n    lambda parcel: count_competing_businesses(parcel, retail_poi), axis=1)\n\n# Filter parcels with fewer than 3 competing businesses\nsuitable_parcels = retail_parcels[retail_parcels['competing_count'] < 3]\n\n# Sort the parcels by parcel ID (ml column)\nsorted_parcels = suitable_parcels.sort_values(by='ml')\n\n# Print the final list of parcel IDs\nprint(sorted_parcels['ml'].tolist())"
  },
  {
    "query": "find the top 20 commercial parcels within 1km of massachusetts avenue, prioritizing areas with higher consumer spending.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Ensure all GeoDataFrames use the same CRS for spatial operations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter POI to find Massachusetts Avenue\nmass_ave_poi = poi[poi['name'].str.contains('Massachusetts Avenue', case=False, na=False)]\n\n# Create a buffer of 1km around Massachusetts Avenue\nmass_ave_buffer = mass_ave_poi.buffer(1000)\n\n# Filter parcels within 1km of Massachusetts Avenue\nparcels_within_1km = parcels[parcels.intersects(mass_ave_buffer.unary_union)]\n\n# Merge parcels with spending data\nparcels_with_spending = parcels_within_1km.merge(spending, left_on='ml', right_on='parcel_id')\n\n# Sort parcels by consumer spending in descending order\nsorted_parcels = parcels_with_spending.sort_values(by='consumer_spending', ascending=False)\n\n# Get top 20 parcel IDs\ntop_20_parcel_ids = sorted_parcels.head(20)['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(top_20_parcel_ids)"
  },
  {
    "query": "find commercial parcels larger than 8000 square feet in census tracts with at least 90% of residents aged 18-64.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load the census data\ncensus_data = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Ensure both datasets use the same CRS for spatial operations\nparcels = parcels.to_crs(epsg=26986)\ncensus_data = census_data.to_crs(epsg=26986)\n\n# Filter census tracts where at least 90% of residents are aged 18-64\ncensus_filtered = census_data[census_data['pct_18_64'] >= 90]\n\n# Spatial join to find parcels in the filtered census tracts\nparcels_in_filtered_tracts = gpd.sjoin(parcels, census_filtered, how='inner', op='intersects')\n\n# Filter parcels that are commercial and larger than 8000 square feet\ncommercial_parcels = parcels_in_filtered_tracts[\n    (parcels_in_filtered_tracts['land_use'] == 'Commercial') &\n    (parcels_in_filtered_tracts['area'] > 8000)\n]\n\n# Sort the parcels by their ID (ml column)\nsorted_parcel_ids = commercial_parcels['ml'].sort_values().tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find commercial parcels that are between 5000-10000 square feet, within 500 meters of a subway station, and have no more than 1 competitor within 500 meters.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter parcels by area\nfiltered_parcels = parcels[(parcels['land_use'] == 'commercial') & \n                           (parcels['area'] >= 5000) & \n                           (parcels['area'] <= 10000)]\n\n# Identify subway stations and competitors\nsubway_stations = poi[poi['type'] == 'subway_station']\ncompetitors = poi[poi['type'] == 'competitor']\n\n# Function to check proximity to subway stations and competitors\ndef is_valid_parcel(parcel):\n    # Check proximity to subway stations\n    near_subway = subway_stations.geometry.apply(lambda x: parcel.geometry.distance(x) <= 500).any()\n    if not near_subway:\n        return False\n    \n    # Check number of competitors within 500 meters\n    nearby_competitors = competitors.geometry.apply(lambda x: parcel.geometry.distance(x) <= 500).sum()\n    if nearby_competitors > 1:\n        return False\n    \n    return True\n\n# Filter parcels based on proximity criteria\nvalid_parcels = filtered_parcels[filtered_parcels.apply(is_valid_parcel, axis=1)]\n\n# Sort and extract parcel IDs\nsorted_parcel_ids = valid_parcels.sort_values(by='ml')['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find parcels that are zoned for mixed-use, within 400 meters of public transportation, and at least 200 meters away from industrial areas.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Ensure all data is in the same projected CRS for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels for mixed-use zoning\nmixed_use_parcels = parcels[parcels['zoning'] == 'mixed-use']\n\n# Filter POI for subway stations\nsubway_stations = poi[poi['type'] == 'subway_station']\n\n# Buffer subway stations by 400 meters\nsubway_buffer = subway_stations.buffer(400)\n\n# Find parcels within 400 meters of a subway station\nparcels_near_subway = mixed_use_parcels[mixed_use_parcels.geometry.apply(\n    lambda geom: any(geom.intersects(buffer) for buffer in subway_buffer))]\n\n# Filter census data for industrial areas\nindustrial_areas = census[census['land_use'] == 'industrial']\n\n# Buffer industrial areas by 200 meters\nindustrial_buffer = industrial_areas.buffer(200)\n\n# Find parcels at least 200 meters away from industrial areas\nparcels_far_from_industrial = parcels_near_subway[parcels_near_subway.geometry.apply(\n    lambda geom: all(not geom.intersects(buffer) for buffer in industrial_buffer))]\n\n# Extract and sort parcel IDs\nparcel_ids = sorted(parcels_far_from_industrial['ml'].tolist())\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "find retail parcels between 2000-5000 square feet within 500m of a residential area, prioritizing locations with high foot traffic and in census tracts with median income above $30,000.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project data to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels by size and type\nretail_parcels = parcels[(parcels['land_use'] == 'Retail') & \n                         (parcels['area'] >= 2000) & \n                         (parcels['area'] <= 5000)]\n\n# Identify residential areas\nresidential_parcels = parcels[parcels['land_use'] == 'Residential']\n\n# Buffer residential areas by 500m\nresidential_buffer = residential_parcels.geometry.unary_union.buffer(500)\n\n# Filter retail parcels within 500m of residential areas\nretail_near_residential = retail_parcels[retail_parcels.intersects(residential_buffer)]\n\n# Filter census tracts with median income above $30,000\nhigh_income_census = census[census['median_income'] > 30000]\n\n# Join retail parcels with census data to filter by income\nretail_income_filtered = gpd.sjoin(retail_near_residential, high_income_census, op='intersects')\n\n# Calculate foot traffic by counting POIs within 100m of each parcel\npoi_buffer = poi.geometry.buffer(100)\nretail_income_filtered['foot_traffic'] = retail_income_filtered.geometry.apply(\n    lambda geom: poi_buffer.intersects(geom).sum()\n)\n\n# Sort parcels by foot traffic in descending order\nsorted_parcels = retail_income_filtered.sort_values(by='foot_traffic', ascending=False)\n\n# Extract and print the list of parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\nprint(parcel_ids)"
  },
  {
    "query": "find office parcels larger than 5000 square feet with at least 2 parking spaces, prioritizing those in areas with high educational attainment.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Ensure all data is in the same CRS\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels larger than 5000 square feet and with at least 2 parking spaces\nfiltered_parcels = parcels[(parcels['area'] > 5000) & (parcels['parking_spaces'] >= 2)]\n\n# Merge parcels with census data to get educational attainment\nparcels_with_census = gpd.sjoin(filtered_parcels, census, how='inner', op='intersects')\n\n# Sort parcels by educational attainment (assuming 'education_attainment' is a column in census data)\nsorted_parcels = parcels_with_census.sort_values(by='education_attainment', ascending=False)\n\n# Extract and print the sorted list of parcel IDs\nsorted_parcel_ids = sorted_parcels['ml'].tolist()\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find parcels that are either commercial places within 100m of harvard square or residential larger than 5000 square feet and within 200m of 50 restaurants.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter POI for restaurants\nrestaurants = poi[poi['category'] == 'restaurant']\n\n# Buffer Harvard Square by 100m and filter commercial parcels\nharvard_square = poi[poi['name'] == 'Harvard Square'].geometry.iloc[0]\ncommercial_buffer = harvard_square.buffer(100)\ncommercial_parcels = parcels[(parcels['land_use'] == 'commercial') & (parcels.intersects(commercial_buffer))]\n\n# Buffer restaurants by 200m and filter residential parcels larger than 5000 sqft\nrestaurant_buffers = restaurants.buffer(200)\nresidential_parcels = parcels[(parcels['land_use'] == 'residential') & (parcels['area'] > 5000)]\n\n# Check if residential parcels are within 200m of at least 50 restaurants\nresidential_with_restaurants = residential_parcels[\n    residential_parcels.apply(lambda row: sum(restaurant_buffers.intersects(row.geometry)) >= 50, axis=1)\n]\n\n# Combine results and get unique parcel IDs\nresult_parcels = commercial_parcels['ml'].append(residential_with_restaurants['ml']).unique()\n\n# Sort and print the final list of parcel IDs\nsorted_parcel_ids = sorted(result_parcels)\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find parcels that are zoned for retail and within 300m of a subway station and not within 100m of a competitor.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Set the CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter POI for subway stations and competitors\nsubway_stations = poi[poi['type'] == 'subway_station']\ncompetitors = poi[poi['type'] == 'competitor']\n\n# Filter parcels for those zoned for Retail\nretail_parcels = parcels[parcels['zoning'] == 'Retail']\n\n# Find parcels within 300 meters of a subway station\nretail_parcels['near_subway'] = retail_parcels.geometry.apply(\n    lambda geom: subway_stations.distance(geom).min() <= 300\n)\n\n# Find parcels not within 100 meters of a competitor\nretail_parcels['far_from_competitor'] = retail_parcels.geometry.apply(\n    lambda geom: competitors.distance(geom).min() > 100\n)\n\n# Filter parcels based on the criteria\nselected_parcels = retail_parcels[\n    retail_parcels['near_subway'] & retail_parcels['far_from_competitor']\n]\n\n# Sort the parcels by 'ml' column\nsorted_parcels = selected_parcels.sort_values(by='ml')\n\n# Extract and print the list of parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\nprint(parcel_ids)"
  },
  {
    "query": "find parcels that are either office space larger than 10,000 sq ft or retail space within 500m of high-density residential areas.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels for office space larger than 10,000 sq ft\noffice_parcels = parcels[(parcels['use'] == 'office') & (parcels['area'] > 10000)]\n\n# Filter census data for high-density residential areas\nhigh_density_residential = census[census['density'] > threshold]  # Define a threshold for high density\n\n# Buffer high-density residential areas by 500 meters\nhigh_density_buffer = high_density_residential.buffer(500)\n\n# Find parcels that intersect with the high-density residential buffer\nretail_parcels = parcels[parcels['use'] == 'retail']\nretail_near_high_density = retail_parcels[retail_parcels.intersects(high_density_buffer.unary_union)]\n\n# Combine office and retail parcels\nselected_parcels = office_parcels.append(retail_near_high_density)\n\n# Sort by parcel ID\nsorted_parcels = selected_parcels.sort_values(by='ml')\n\n# Print the list of parcel IDs\nprint(sorted_parcels['ml'].tolist())\n"
  },
  {
    "query": "find commercial parcels that, if larger than 5000 sq ft, must be within 400m of public transit, or if smaller, must be within 200m of residential areas.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Filter POI for public transit locations\ntransit_stations = ['Harvard Square', 'Central Square', 'Kendall/MIT', 'Porter Square', 'Alewife']\ntransit_poi = poi[poi['name'].isin(transit_stations)]\n\n# Filter census data for residential areas\nresidential_areas = census[census['land_use'] == 'residential']\n\n# Project data to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\ntransit_poi = transit_poi.to_crs(epsg=26986)\nresidential_areas = residential_areas.to_crs(epsg=26986)\n\n# Filter parcels larger than 5000 sq ft and within 400m of public transit\nlarge_parcels = parcels[parcels['area'] > 5000]\nlarge_parcels_near_transit = large_parcels[large_parcels.geometry.apply(\n    lambda geom: transit_poi.distance(geom).min() <= 400\n)]\n\n# Filter parcels smaller than or equal to 5000 sq ft and within 200m of residential areas\nsmall_parcels = parcels[parcels['area'] <= 5000]\nsmall_parcels_near_residential = small_parcels[small_parcels.geometry.apply(\n    lambda geom: residential_areas.distance(geom).min() <= 200\n)]\n\n# Combine results\nselected_parcels = large_parcels_near_transit.append(small_parcels_near_residential)\n\n# Sort by parcel ID (ml column)\nsorted_parcels = selected_parcels.sort_values(by='ml')\n\n# Print the final list of parcel IDs\nprint(sorted_parcels['ml'].tolist())"
  },
  {
    "query": "find parcels that are: if zoned for commercial, must be larger than 8000 sq ft; if zoned for residential, must have less than 2 similar properties within 1000m",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load datasets\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter commercial parcels larger than 8000 sq ft\ncommercial_parcels = parcels[(parcels['zoning'] == 'commercial') & (parcels['area'] > 8000)]\n\n# Filter residential parcels\nresidential_parcels = parcels[parcels['zoning'] == 'residential']\n\n# Function to count similar properties within 1000 meters\ndef count_similar_properties(parcel, all_parcels):\n    buffer = parcel.geometry.buffer(1000)\n    similar_parcels = all_parcels[all_parcels.geometry.within(buffer)]\n    return len(similar_parcels) - 1  # Exclude the parcel itself\n\n# Find residential parcels with fewer than 2 similar properties within 1000 meters\nresidential_parcels['similar_count'] = residential_parcels.apply(\n    lambda row: count_similar_properties(row, residential_parcels), axis=1\n)\nfiltered_residential_parcels = residential_parcels[residential_parcels['similar_count'] < 2]\n\n# Get sorted list of parcel IDs\ncommercial_parcel_ids = commercial_parcels['ml'].sort_values().tolist()\nresidential_parcel_ids = filtered_residential_parcels['ml'].sort_values().tolist()\n\n# Print results\nprint(\"Commercial Parcel IDs:\", commercial_parcel_ids)\nprint(\"Residential Parcel IDs:\", residential_parcel_ids)"
  },
  {
    "query": "find mixed-use parcels that, if north of massachusetts avenue, must have retail on the ground floor, otherwise must have at least 3000 sq ft of commercial space.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Set CRS to EPSG:26986 for accurate spatial operations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels north of Massachusetts Avenue\nmass_ave = census[census['name'] == 'Massachusetts Avenue']\nmass_ave_north = parcels[parcels.centroid.y > mass_ave.geometry.centroid.y.iloc[0]]\n\n# Filter parcels with retail on the ground floor\nretail_poi = poi[poi['category'] == 'Retail']\nretail_parcels = parcels[parcels.intersects(retail_poi.unary_union)]\n\n# Filter parcels with at least 3000 sq ft of commercial space\ncommercial_parcels = parcels[parcels['commercial_sqft'] >= 3000]\n\n# Combine criteria\nselected_parcels = mass_ave_north[\n    (mass_ave_north['ml'].isin(retail_parcels['ml'])) |\n    (mass_ave_north['ml'].isin(commercial_parcels['ml']))\n]\n\n# Sort and get parcel IDs\nsorted_parcel_ids = selected_parcels['ml'].sort_values().tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  }
]