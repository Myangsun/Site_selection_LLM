[
  {
    "query": "find commercial parcels within 500 meters of harvard square.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load the POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter POI to find Harvard Square\nharvard_square = poi[poi['name'].str.contains('Harvard Square', case=False, na=False)]\n\n# Ensure the data is in the projected CRS for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\nharvard_square = harvard_square.to_crs(epsg=26986)\n\n# Buffer Harvard Square by 500 meters\nharvard_square_buffer = harvard_square.buffer(500)\n\n# Filter parcels that are commercial and within 500 meters of Harvard Square\ncommercial_parcels = parcels[parcels['land_use'] == 'Commercial']\ncommercial_parcels_within_buffer = commercial_parcels[commercial_parcels.intersects(harvard_square_buffer.unary_union)]\n\n# Sort the parcels by their ID (ml column)\nsorted_parcel_ids = commercial_parcels_within_buffer['ml'].sort_values()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids.tolist())"
  },
  {
    "query": "find parcels larger than 6000 square feet that are zoned for retail use.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Ensure the data is in the correct projected CRS for accurate area calculations\nparcels = parcels.to_crs(epsg=26986)\n\n# Filter parcels larger than 6000 square feet and zoned for retail use\nfiltered_parcels = parcels[(parcels['geometry'].area > 6000) & (parcels['zoning'] == 'Retail')]\n\n# Sort the filtered parcels by parcel ID (ml column)\nsorted_parcels = filtered_parcels.sort_values(by='ml')\n\n# Extract the list of parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "find all parcels that have no more than 2 competing restaurants within 800 meters.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load the POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter POI to only include restaurants\nrestaurants = poi[poi['category'] == 'restaurant']\n\n# Set the CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\nrestaurants = restaurants.to_crs(epsg=26986)\n\n# Buffer the restaurants by 800 meters\nrestaurants_buffered = restaurants.buffer(800)\n\n# Spatial join to find parcels within 800 meters of restaurants\nparcels_within_800m = gpd.sjoin(parcels, gpd.GeoDataFrame(geometry=restaurants_buffered), how='inner', op='intersects')\n\n# Count the number of restaurants within 800 meters for each parcel\nparcel_restaurant_counts = parcels_within_800m.groupby('ml').size()\n\n# Filter parcels with no more than 2 restaurants within 800 meters\neligible_parcels = parcel_restaurant_counts[parcel_restaurant_counts <= 2].index\n\n# Sort the eligible parcel IDs\nsorted_parcel_ids = sorted(eligible_parcels)\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find the top 20 parcels in cambridge with the most diverse mix of residential and commercial land uses within 500 meters.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter POI for residential and commercial categories\nresidential_poi = poi[poi['category'].str.contains('residential', case=False)]\ncommercial_poi = poi[poi['category'].str.contains('commercial', case=False)]\n\n# Buffer parcels by 500 meters\nparcels['geometry'] = parcels.geometry.buffer(500)\n\n# Spatial join to find parcels with residential and commercial POIs within 500 meters\nresidential_join = gpd.sjoin(parcels, residential_poi, how='inner', op='intersects')\ncommercial_join = gpd.sjoin(parcels, commercial_poi, how='inner', op='intersects')\n\n# Count unique residential and commercial POIs for each parcel\nresidential_counts = residential_join.groupby('ml').size().reset_index(name='residential_count')\ncommercial_counts = commercial_join.groupby('ml').size().reset_index(name='commercial_count')\n\n# Merge counts back to parcels\nparcel_counts = parcels[['ml']].drop_duplicates()\nparcel_counts = parcel_counts.merge(residential_counts, on='ml', how='left').fillna(0)\nparcel_counts = parcel_counts.merge(commercial_counts, on='ml', how='left').fillna(0)\n\n# Calculate diversity score as the product of residential and commercial counts\nparcel_counts['diversity_score'] = parcel_counts['residential_count'] * parcel_counts['commercial_count']\n\n# Sort parcels by diversity score and select top 20\ntop_parcels = parcel_counts.sort_values(by='diversity_score', ascending=False).head(20)\n\n# Print the list of top parcel IDs\nprint(top_parcels['ml'].tolist())"
  },
  {
    "query": "find the top 20 commercial parcels in areas with the highest percentage of residents with advanced degrees.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Ensure all data is in the same CRS for spatial operations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter census data for areas with the highest percentage of residents with advanced degrees\n# Assuming the column 'pct_advanced_degrees' contains the percentage of residents with advanced degrees\ntop_census_areas = census.nlargest(20, 'pct_advanced_degrees')\n\n# Spatial join to find parcels in top census areas\nparcels_in_top_areas = gpd.sjoin(parcels, top_census_areas, how='inner', op='intersects')\n\n# Filter parcels for commercial use\n# Assuming the column 'land_use' contains the land use type and 'commercial' indicates commercial parcels\ncommercial_parcels = parcels_in_top_areas[parcels_in_top_areas['land_use'] == 'commercial']\n\n# Sort parcels by the percentage of residents with advanced degrees in descending order\nsorted_commercial_parcels = commercial_parcels.sort_values(by='pct_advanced_degrees', ascending=False)\n\n# Get the top 20 parcel IDs\ntop_20_parcel_ids = sorted_commercial_parcels.head(20)['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(top_20_parcel_ids)"
  },
  {
    "query": "\u201cfind the top 20 parcels with the highest consumer spending in surrounding areas.\u201d",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson').to_crs(epsg=26986)\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson').to_crs(epsg=26986)\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson').to_crs(epsg=26986)\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Merge spending data with census data\ncensus = census.merge(spending, left_on='GEOID', right_on='census_geoid')\n\n# Calculate total spending in surrounding areas for each parcel\ndef calculate_surrounding_spending(parcel, poi, census, buffer_distance=500):\n    buffer = parcel.geometry.buffer(buffer_distance)\n    surrounding_poi = poi[poi.intersects(buffer)]\n    surrounding_census = census[census.intersects(buffer)]\n    total_spending = surrounding_census['spending'].sum()\n    return total_spending\n\nparcels['surrounding_spending'] = parcels.apply(\n    calculate_surrounding_spending, axis=1, poi=poi, census=census\n)\n\n# Sort parcels by surrounding spending and get top 20\ntop_parcels = parcels.nlargest(20, 'surrounding_spending')\n\n# Print the list of parcel IDs\nprint(top_parcels['ml'].tolist())"
  },
  {
    "query": "find vacant commercial parcels larger than 3000 square feet that are within 800 meters of a subway station.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load the POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter POI to get only subway stations\nsubway_stations = poi[poi['type'] == 'subway_station']\n\n# Convert CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\nsubway_stations = subway_stations.to_crs(epsg=26986)\n\n# Filter parcels for vacant commercial parcels larger than 3000 square feet\nvacant_commercial_parcels = parcels[(parcels['use'] == 'commercial') & \n                                    (parcels['status'] == 'vacant') & \n                                    (parcels['area'] > 3000)]\n\n# Perform spatial join to find parcels within 800 meters of a subway station\nbuffered_stations = subway_stations.buffer(800)\nparcels_within_800m = gpd.sjoin(vacant_commercial_parcels, gpd.GeoDataFrame(geometry=buffered_stations), op='intersects')\n\n# Get the unique parcel IDs and sort them\nmatching_parcel_ids = sorted(parcels_within_800m['ml'].unique())\n\n# Print the final list of parcel IDs\nprint(matching_parcel_ids)"
  },
  {
    "query": "find commercial parcels zoned for retail use with fewer than 3 competing retail businesses within 300 meters.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load the POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter parcels for commercial zoning and retail use\ncommercial_parcels = parcels[parcels['zoning'] == 'commercial']\nretail_parcels = commercial_parcels[commercial_parcels['use'] == 'retail']\n\n# Project both GeoDataFrames to EPSG:26986 for accurate distance calculations\nretail_parcels = retail_parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter POIs for retail businesses\nretail_poi = poi[poi['category'] == 'retail']\n\n# Function to count competing businesses within 300 meters\ndef count_competitors(parcel):\n    buffer = parcel.geometry.buffer(300)\n    competitors = retail_poi[retail_poi.intersects(buffer)]\n    return len(competitors)\n\n# Apply the function to each parcel and filter based on the criteria\nretail_parcels['competitors'] = retail_parcels.apply(count_competitors, axis=1)\nsuitable_parcels = retail_parcels[retail_parcels['competitors'] < 3]\n\n# Sort the parcels by parcel ID (ml column)\nsorted_parcels = suitable_parcels.sort_values(by='ml')\n\n# Print the list of parcel IDs\nprint(sorted_parcels['ml'].tolist())"
  },
  {
    "query": "find the top 20 commercial parcels within 1km of massachusetts avenue, prioritizing areas with higher consumer spending.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Ensure all GeoDataFrames use the same CRS for spatial operations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter POI for Massachusetts Avenue\nmass_ave_poi = poi[poi['name'].str.contains('Massachusetts Avenue', case=False, na=False)]\n\n# Create a buffer of 1km around Massachusetts Avenue POIs\nmass_ave_buffer = mass_ave_poi.buffer(1000)\n\n# Filter parcels within 1km of Massachusetts Avenue\nparcels_within_1km = parcels[parcels.geometry.apply(lambda x: any(x.intersects(buffer) for buffer in mass_ave_buffer))]\n\n# Merge parcels with census data to get consumer spending information\nparcels_with_census = parcels_within_1km.sjoin(census, how='left', predicate='intersects')\n\n# Merge with spending data\nparcels_with_spending = parcels_with_census.merge(spending, left_on='census_tract', right_on='census_tract', how='left')\n\n# Sort parcels by consumer spending in descending order\nsorted_parcels = parcels_with_spending.sort_values(by='consumer_spending', ascending=False)\n\n# Select top 20 parcels\ntop_20_parcels = sorted_parcels.head(20)\n\n# Extract parcel IDs\ntop_20_parcel_ids = top_20_parcels['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(top_20_parcel_ids)"
  },
  {
    "query": "find commercial parcels larger than 8000 square feet in census tracts with at least 90% of residents aged 18-64.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Set the CRS to EPSG:26986 for accurate spatial operations\nparcels = parcels.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter census tracts with at least 90% of residents aged 18-64\ncensus_filtered = census[census['pct_18_64'] >= 90]\n\n# Spatial join to find parcels within the filtered census tracts\nparcels_in_census = gpd.sjoin(parcels, census_filtered, how='inner', op='intersects')\n\n# Filter parcels that are commercial and larger than 8000 square feet\ncommercial_parcels = parcels_in_census[(parcels_in_census['land_use'] == 'Commercial') & \n                                        (parcels_in_census['area'] > 8000)]\n\n# Extract and sort the parcel IDs\nparcel_ids = commercial_parcels['ml'].sort_values().tolist()\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "find commercial parcels that are between 5000-10000 square feet, within 500 meters of a subway station, and have no more than 1 competitor within 500 meters.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter parcels by area\nfiltered_parcels = parcels[(parcels['area'] >= 5000) & (parcels['area'] <= 10000)]\n\n# Identify subway stations and competitors\nsubway_stations = poi[poi['type'] == 'subway_station']\ncompetitors = poi[poi['type'] == 'competitor']\n\n# Buffer subway stations by 500 meters\nsubway_buffer = subway_stations.buffer(500)\n\n# Filter parcels within 500 meters of a subway station\nparcels_near_subway = filtered_parcels[filtered_parcels.geometry.apply(\n    lambda geom: any(subway_buffer.contains(geom))\n)]\n\n# Function to count competitors within 500 meters\ndef count_competitors(parcel_geom):\n    buffer = parcel_geom.buffer(500)\n    return competitors[competitors.geometry.within(buffer)].shape[0]\n\n# Filter parcels with no more than 1 competitor within 500 meters\nfinal_parcels = parcels_near_subway[parcels_near_subway.geometry.apply(\n    lambda geom: count_competitors(geom) <= 1\n)]\n\n# Sort and extract parcel IDs\nsorted_parcel_ids = final_parcels.sort_values(by='ml')['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find parcels that are zoned for mixed-use, within 400 meters of public transportation, and at least 200 meters away from industrial areas.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels for mixed-use zoning\nmixed_use_parcels = parcels[parcels['zoning'] == 'mixed-use']\n\n# Filter POI for public transportation\npublic_transport_poi = poi[poi['type'] == 'public_transport']\n\n# Buffer public transportation POIs by 400 meters\npublic_transport_buffer = public_transport_poi.buffer(400)\n\n# Find parcels within 400 meters of public transportation\nparcels_near_transport = mixed_use_parcels[mixed_use_parcels.geometry.apply(\n    lambda x: any(public_transport_buffer.contains(x)))]\n\n# Filter census data for industrial areas\nindustrial_areas = census[census['land_use'] == 'industrial']\n\n# Buffer industrial areas by 200 meters\nindustrial_buffer = industrial_areas.buffer(200)\n\n# Find parcels at least 200 meters away from industrial areas\nparcels_away_from_industrial = parcels_near_transport[parcels_near_transport.geometry.apply(\n    lambda x: all(~industrial_buffer.contains(x)))]\n\n# Extract and sort parcel IDs\nparcel_ids = sorted(parcels_away_from_industrial['ml'].tolist())\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "find retail parcels between 2000-5000 square feet within 500m of a residential area, prioritizing locations with high foot traffic and in census tracts with median income above $30,000.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project data to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels by size and use\nretail_parcels = parcels[(parcels['land_use'] == 'Retail') & \n                         (parcels['area'] >= 2000) & \n                         (parcels['area'] <= 5000)]\n\n# Identify residential areas\nresidential_parcels = parcels[parcels['land_use'] == 'Residential']\n\n# Buffer residential areas by 500m\nresidential_buffer = residential_parcels.geometry.buffer(500)\n\n# Filter retail parcels within 500m of residential areas\nretail_near_residential = retail_parcels[retail_parcels.geometry.apply(\n    lambda x: any(x.intersects(buffer) for buffer in residential_buffer))]\n\n# Filter census tracts with median income above $30,000\nhigh_income_census = census[census['median_income'] > 30000]\n\n# Join parcels with census data to filter by income\nretail_near_residential = gpd.sjoin(retail_near_residential, high_income_census, op='within')\n\n# Calculate foot traffic by counting POIs within 100m of each parcel\ndef calculate_foot_traffic(parcel):\n    buffer = parcel.geometry.buffer(100)\n    return poi[poi.geometry.within(buffer)].shape[0]\n\nretail_near_residential['foot_traffic'] = retail_near_residential.apply(calculate_foot_traffic, axis=1)\n\n# Sort parcels by foot traffic in descending order\nsorted_parcels = retail_near_residential.sort_values(by='foot_traffic', ascending=False)\n\n# Extract and print the list of parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\nprint(parcel_ids)"
  },
  {
    "query": "find office parcels larger than 5000 square feet with at least 2 parking spaces, prioritizing those in areas with high educational attainment.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Ensure all data is in the same CRS for spatial operations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels larger than 5000 square feet with at least 2 parking spaces\nfiltered_parcels = parcels[(parcels['area'] > 5000) & (parcels['parking_spaces'] >= 2)]\n\n# Merge parcels with census data to get educational attainment\nparcels_with_census = gpd.sjoin(filtered_parcels, census, how='left', op='intersects')\n\n# Sort parcels by educational attainment (assuming 'education_attainment' is the column name)\nsorted_parcels = parcels_with_census.sort_values(by='education_attainment', ascending=False)\n\n# Extract sorted list of parcel IDs\nsorted_parcel_ids = sorted_parcels['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find parcels that are either commercial places within 100m of harvard square or residential larger than 5000 square feet and within 200m of 50 restaurants.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Define Harvard Square location\nharvard_square = Point(-71.1189, 42.3736)\nharvard_square = gpd.GeoSeries([harvard_square], crs='EPSG:4326').to_crs(epsg=26986)\n\n# Filter POIs for restaurants\nrestaurants = poi[poi['category'] == 'restaurant']\n\n# Filter parcels for commercial places within 100m of Harvard Square\ncommercial_near_harvard = parcels[\n    (parcels['land_use'] == 'commercial') &\n    (parcels.geometry.distance(harvard_square.iloc[0]) <= 100)\n]\n\n# Filter parcels for residential larger than 5000 sqft and within 200m of 50 restaurants\nresidential_large_near_restaurants = parcels[\n    (parcels['land_use'] == 'residential') &\n    (parcels['area'] > 5000)\n]\n\n# Calculate distance to restaurants and count how many are within 200m\nresidential_large_near_restaurants['restaurant_count'] = residential_large_near_restaurants.geometry.apply(\n    lambda geom: restaurants.geometry.distance(geom).lt(200).sum()\n)\n\n# Filter for parcels with at least 50 restaurants within 200m\nresidential_large_near_restaurants = residential_large_near_restaurants[\n    residential_large_near_restaurants['restaurant_count'] >= 50\n]\n\n# Combine results\nselected_parcels = commercial_near_harvard.append(residential_large_near_restaurants)\n\n# Sort and get parcel IDs\nselected_parcel_ids = selected_parcels['ml'].sort_values().tolist()\n\n# Print the final list of parcel IDs\nprint(selected_parcel_ids)"
  },
  {
    "query": "find parcels that are zoned for retail and within 300m of a subway station and not within 100m of a competitor.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Project data to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter POI for subway stations and competitors\nsubway_stations = poi[poi['category'] == 'subway_station']\ncompetitors = poi[poi['category'] == 'competitor']\n\n# Buffer subway stations by 300m and competitors by 100m\nsubway_buffer = subway_stations.buffer(300)\ncompetitor_buffer = competitors.buffer(100)\n\n# Filter parcels zoned for retail\nretail_parcels = parcels[parcels['zoning'] == 'retail']\n\n# Find parcels within 300m of a subway station\nparcels_near_subway = retail_parcels[retail_parcels.intersects(subway_buffer.unary_union)]\n\n# Find parcels not within 100m of a competitor\nparcels_not_near_competitor = parcels_near_subway[~parcels_near_subway.intersects(competitor_buffer.unary_union)]\n\n# Extract and sort parcel IDs\nparcel_ids = parcels_not_near_competitor['ml'].sort_values()\n\n# Print the final list of parcel IDs\nprint(parcel_ids.tolist())"
  },
  {
    "query": "find parcels that are either office space larger than 10,000 sq ft or retail space within 500m of high-density residential areas.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels for office space larger than 10,000 sq ft\noffice_parcels = parcels[(parcels['use'] == 'office') & (parcels['area'] > 10000)]\n\n# Filter POI for high-density residential areas\nhigh_density_residential = census[census['density'] > census['density'].quantile(0.75)]\n\n# Buffer high-density residential areas by 500 meters\nhigh_density_buffer = high_density_residential.buffer(500)\n\n# Filter parcels for retail space within 500m of high-density residential areas\nretail_parcels = parcels[parcels['use'] == 'retail']\nretail_near_high_density = retail_parcels[retail_parcels.intersects(high_density_buffer.unary_union)]\n\n# Combine the results\nselected_parcels = office_parcels.append(retail_near_high_density).drop_duplicates()\n\n# Sort by parcel ID\nselected_parcels_sorted = selected_parcels.sort_values(by='ml')\n\n# Print the list of parcel IDs\nprint(selected_parcels_sorted['ml'].tolist())"
  },
  {
    "query": "find commercial parcels that, if larger than 5000 sq ft, must be within 400m of public transit, or if smaller, must be within 200m of residential areas.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Define CRS for distance calculations\nprojected_crs = 'EPSG:26986'\n\n# Project data to the appropriate CRS\nparcels = parcels.to_crs(projected_crs)\npoi = poi.to_crs(projected_crs)\ncensus = census.to_crs(projected_crs)\n\n# Filter POI for public transit stations\ntransit_stations = poi[poi['name'].isin(['harvard_square', 'central_square', 'kendall_mit', 'porter_square', 'alewife'])]\n\n# Filter census data for residential parcels\nresidential_parcels = census[census['land_use'] == 'residential']\n\n# Spatial join to find parcels within 400m of transit stations\nlarge_parcels = parcels[parcels['area'] > 5000]\nlarge_parcels_buffered = large_parcels.copy()\nlarge_parcels_buffered['geometry'] = large_parcels_buffered.geometry.buffer(400)\nlarge_near_transit = gpd.sjoin(large_parcels_buffered, transit_stations, op='intersects')\n\n# Spatial join to find parcels within 200m of residential parcels\nsmall_parcels = parcels[parcels['area'] <= 5000]\nsmall_parcels_buffered = small_parcels.copy()\nsmall_parcels_buffered['geometry'] = small_parcels_buffered.geometry.buffer(200)\nsmall_near_residential = gpd.sjoin(small_parcels_buffered, residential_parcels, op='intersects')\n\n# Combine results and sort by parcel ID\nselected_parcels = large_near_transit['ml'].append(small_near_residential['ml']).drop_duplicates().sort_values()\n\n# Print the final list of parcel IDs\nprint(selected_parcels.tolist())"
  },
  {
    "query": "find parcels that are: if zoned for commercial, must be larger than 8000 sq ft; if zoned for residential, must have less than 2 similar properties within 1000m",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load the data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Ensure all data is in the same projected CRS for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels based on zoning and size\ncommercial_parcels = parcels[(parcels['zoning'] == 'commercial') & (parcels['area'] > 8000)]\n\n# Function to find residential parcels with less than 2 similar properties within 1000m\ndef filter_residential_parcels(parcel):\n    similar_parcels = parcels[(parcels['zoning'] == 'residential') & (parcels.geometry != parcel.geometry)]\n    similar_within_1000m = similar_parcels[similar_parcels.distance(parcel.geometry) < 1000]\n    return len(similar_within_1000m) < 2\n\nresidential_parcels = parcels[(parcels['zoning'] == 'residential') & parcels.apply(filter_residential_parcels, axis=1)]\n\n# Combine the results\nselected_parcels = commercial_parcels.append(residential_parcels)\n\n# Sort by parcel ID (ml column)\nsorted_parcels = selected_parcels.sort_values(by='ml')\n\n# Print the final list of parcel IDs\nprint(sorted_parcels['ml'].tolist())"
  },
  {
    "query": "find mixed-use parcels that, if north of massachusetts avenue, must have retail on the ground floor, otherwise must have at least 3000 sq ft of commercial space.",
    "method": "improved-zero-shot",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Ensure all data is in the same CRS for spatial operations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Define Massachusetts Avenue as a line for spatial operations\nmass_ave = census[census['name'].str.contains('Massachusetts Avenue')]\n\n# Filter parcels north of Massachusetts Avenue\nnorth_of_mass_ave = parcels[parcels.intersects(mass_ave.unary_union)]\n\n# Find parcels with retail on the ground floor north of Massachusetts Avenue\nretail_poi = poi[poi['category'] == 'Retail']\nnorth_with_retail = north_of_mass_ave[north_of_mass_ave.intersects(retail_poi.unary_union)]\n\n# Filter parcels south of Massachusetts Avenue\nsouth_of_mass_ave = parcels[~parcels.index.isin(north_of_mass_ave.index)]\n\n# Find parcels with at least 3000 sq ft of commercial space south of Massachusetts Avenue\nsouth_with_commercial = south_of_mass_ave[south_of_mass_ave['commercial_sqft'] >= 3000]\n\n# Combine the results\nselected_parcels = north_with_retail.append(south_with_commercial)\n\n# Sort the results by parcel ID\nsorted_parcels = selected_parcels.sort_values(by='ml')\n\n# Print the list of parcel IDs\nprint(sorted_parcels['ml'].tolist())"
  }
]