[
  {
    "exact_match": 0.0,
    "result_match_rate": 1.0,
    "precision": 1.0,
    "recall": 0.9139784946236559,
    "f1_score": 0.9550561797752808,
    "generated_count": 85,
    "ground_truth_count": 93,
    "correct_count": 85,
    "query": "Find commercial parcels within 500 meters of Harvard Square.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": true,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Define Harvard Square location\nharvard_square = gpd.GeoDataFrame(\n    geometry=[gpd.points_from_xy([-71.1189], [42.3736])[0]],\n    crs=parcels.crs\n)\n\n# Project to accurate CRS\nparcels_proj = parcels.to_crs(epsg=26986)\nharvard_square_proj = harvard_square.to_crs(epsg=26986)\n\n# Filter commercial parcels\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '330', \n    '332', '334', '340', '341', '343', '345', '346', '353', '362', \n    '375', '404', '406', '0340', '0406'\n]\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)]\n\n# Buffer Harvard Square by 500m\nharvard_buffer = harvard_square_proj.buffer(500)[0]\n\n# Find commercial parcels within 500m of Harvard Square\nnear_harvard = commercial_parcels[commercial_parcels.geometry.intersects(harvard_buffer)]\n\n# Sort by parcel ID (ml)\nresult_ids = near_harvard.sort_values('ml')['ml'].tolist()\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      "133-12",
      "133-14",
      "133-15",
      "133-20",
      "133-23",
      "133-27",
      "133-28",
      "133-36",
      "133-48",
      "133-49",
      "133-51",
      "133-52",
      "134-7",
      "136-15",
      "159-2",
      "160-11",
      "160-14",
      "160-48",
      "160-57",
      "160-58",
      "160-59",
      "160-63",
      "160-64",
      "160-66",
      "160-67",
      "160-69",
      "160-71",
      "160-72",
      "160-76",
      "160-77",
      "160-83",
      "160-84",
      "160-85",
      "162-17",
      "162-18",
      "162-19",
      "162-26",
      "162-29",
      "162-36",
      "162-54",
      "162-64",
      "162-65",
      "162-67",
      "162-68",
      "162-73",
      "165-34",
      "165-53",
      "165-55",
      "165-57",
      "166-24",
      "166-33",
      "166-35",
      "166-37",
      "166-52",
      "166-77",
      "168-13",
      "168-20",
      "168-21",
      "168-22",
      "168-25",
      "168-33",
      "168-36",
      "168-41",
      "168-48",
      "168-49",
      "168-59",
      "168-60",
      "168-64",
      "169-100",
      "169-102",
      "169-42",
      "169-46",
      "169-47",
      "169-50",
      "169-67",
      "169-68",
      "169-7",
      "169-81",
      "169-82",
      "169-84",
      "169-86",
      "169-93",
      "169-98",
      "169-99",
      "170-39"
    ]
  },
  {
    "exact_match": 1.0,
    "result_match_rate": 1.0,
    "precision": 1.0,
    "recall": 1.0,
    "f1_score": 1.0,
    "generated_count": 81,
    "ground_truth_count": 81,
    "correct_count": 81,
    "query": "Find parcels larger than 6000 square feet that are zoned for retail use.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": true,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\n\n# Filter for retail use codes\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_use_codes)]\n\n# Filter for parcels larger than 6000 sq ft\nlarge_retail_parcels = retail_parcels[retail_parcels['land_area'] > 6000]\n\n# Sort by parcel ID (ml)\nresult_ids = large_retail_parcels['ml'].sort_values().tolist()\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      "100-62",
      "105-68",
      "105-82",
      "106-124",
      "107-117",
      "107-9",
      "109-50",
      "110-91",
      "116-12",
      "120-48",
      "125-73",
      "128-63",
      "128-72",
      "134-33",
      "136-15",
      "140-148",
      "152-25",
      "156-25",
      "157-26",
      "16-11",
      "162-26",
      "162-54",
      "169-46",
      "169-47",
      "174-37",
      "175-37",
      "175-75",
      "175-84",
      "176-15",
      "176-64",
      "179-87",
      "18-64",
      "18-65",
      "180-57",
      "182-88",
      "183-100",
      "184-159",
      "189-72",
      "191-65",
      "191-85",
      "192-121",
      "192-177",
      "196-154",
      "199-30",
      "199-31",
      "199-67",
      "1A-189",
      "1A-192",
      "1A-211",
      "20-75",
      "200-22",
      "21-121",
      "226-46",
      "229-117",
      "230-71",
      "234-178",
      "236-95",
      "252-172",
      "260-46",
      "260-76",
      "265B-26",
      "265B-28",
      "265B-61",
      "265C-25",
      "267E-234",
      "268B-15",
      "273-2",
      "273-20",
      "34-8",
      "70-91",
      "70-92",
      "74-1",
      "8-88",
      "81-100",
      "83-80",
      "84-101",
      "84-91",
      "90-155",
      "90-162",
      "92-88",
      "93-78"
    ]
  },
  {
    "exact_match": 1.0,
    "result_match_rate": 1.0,
    "precision": 1.0,
    "recall": 1.0,
    "f1_score": 1.0,
    "generated_count": 57,
    "ground_truth_count": 57,
    "correct_count": 57,
    "query": "Find all parcels that have no more than 2 competing restaurants within 800 meters.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": true,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspend = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter for restaurants in POI data\nrestaurant_types = ['restaurant', 'cafe', 'diner', 'fast_food', 'pizzeria']\nrestaurants = poi_proj[poi_proj['business_type'].isin(restaurant_types)].copy()\n\n# Function to count restaurants within 800m\ndef count_competing_restaurants(parcel_geom, restaurant_geoms, buffer_distance=800):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    count = sum(1 for geom in restaurant_geoms if geom is not None and buffered_geom.contains(geom))\n    return count\n\n# Get restaurant geometries\nrestaurant_geoms = restaurants['geometry'].tolist()\n\n# Calculate restaurant counts for each parcel\nparcels_proj['restaurant_count'] = parcels_proj.apply(\n    lambda row: count_competing_restaurants(row['geometry'], restaurant_geoms),\n    axis=1\n)\n\n# Filter parcels with 2 or fewer competing restaurants\nfiltered_parcels = parcels_proj[parcels_proj['restaurant_count'] <= 2].copy()\n\n# Sort by parcel ID (ml)\nresult_ids = sorted(filtered_parcels['ml'].tolist())\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      "242-33",
      "242-34",
      "242-36",
      "242-38",
      "242A-100",
      "242A-102",
      "242A-105",
      "242A-107",
      "242A-109",
      "242A-110",
      "242A-111",
      "242A-112",
      "242A-113",
      "242A-115",
      "242A-116",
      "242A-126",
      "242A-127",
      "242A-131",
      "242A-148",
      "242A-158",
      "242A-159",
      "242A-160",
      "242A-161",
      "242A-162",
      "242A-59",
      "242A-68",
      "242A-72",
      "242A-73",
      "242A-75",
      "242A-91",
      "242A-99",
      "242B-999",
      "243-1",
      "266-1",
      "266-10",
      "266-12",
      "266-13",
      "266-14",
      "266-15",
      "266-16",
      "266-17",
      "266-18",
      "266-19",
      "266-2",
      "266-20",
      "266-21",
      "266-3",
      "266-35",
      "266-36",
      "266-37",
      "266-38",
      "266-4",
      "266-5",
      "266-6",
      "266-7",
      "266-8",
      "266-9"
    ]
  },
  {
    "query": "Find the top 20 parcels in Cambridge with the most diverse mix of residential and commercial land uses within 500 meters.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to accurate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define land use codes\nresidential_codes = ['101', '1013', '1014', '102', '1021', '1022', '103', '104', '109', '123', '124', '125', '130', '131', '132', '133', '134', '137', '140', '141', '142', '143', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '161', '162', '163', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '186', '187', '192', '193', '194', '195', '196', '197', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '253', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '281', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '292', '293', '294', '295', '296', '297', '298', '299', '300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999']\ncommercial_codes = ['300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999']\n# Filter residential and commercial parcels\nresidential_parcels = parcels_proj[parcels_proj['use_code'].isin(residential_codes)].copy()\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].isin(commercial_codes)].copy()\n\n# Function to calculate diversity score\ndef calculate_diversity_score(parcel_geom, poi_geoms, residential_parcels, commercial_parcels, buffer_distance=500):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    nearby_poi = poi_geoms[poi_geoms.geometry.intersects(buffered_geom)].copy()\n    \n    if len(nearby_poi) == 0:\n        return 0\n    \n    residential_count = sum(1 for geom in nearby_poi.geometry if geom in residential_parcels.geometry.values)\n    commercial_count = sum(1 for geom in nearby_poi.geometry if geom in commercial_parcels.geometry.values)\n    \n    if residential_count + commercial_count == 0:\n        return 0\n    \n    return min(residential_count, commercial_count)\n\n# Calculate diversity scores\nresidential_parcels['diversity_score'] = residential_parcels.geometry.apply(\n    lambda geom: calculate_diversity_score(geom, poi_proj, residential_parcels, commercial_parcels)\n)\n\n# Sort by diversity score (higher is better)\ntop_diverse_parcels = residential_parcels.sort_values('diversity_score', ascending=False).head(20)\n\n# Get parcel IDs\nresult_ids = top_diverse_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)"
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.9,
    "precision": 0.9,
    "recall": 0.9,
    "f1_score": 0.9,
    "generated_count": 20,
    "ground_truth_count": 20,
    "correct_count": 18,
    "query": "Find the top 20 commercial parcels in areas with the highest percentage of residents with advanced degrees.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": true,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Filter for commercial parcels\ncommercial_use_codes = ['300', '302', '316', '323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '353', '362', '375', '404']\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Join with census data to get pct_adv_deg\njoined = gpd.sjoin(commercial_parcels, census_proj, how='left', predicate='within')\njoined = joined[joined['pct_adv_deg'].notnull()]\n\n# Sort by pct_adv_deg (higher is better)\nsorted_parcels = joined.sort_values('pct_adv_deg', ascending=False)\n\n# Get top 20 parcel IDs\ntop_parcels = sorted_parcels.head(20)\ntop_ids = top_parcels['ml'].tolist()\n\n# Print results\nprint(top_ids)",
    "generated_ids": [
      "133-15",
      "133-14",
      "160-84",
      "133-52",
      "160-77",
      "133-20",
      "160-14",
      "160-85",
      "160-58",
      "160-59",
      "160-69",
      "160-48",
      "160-67",
      "160-11",
      "160-76",
      "133-51",
      "160-83",
      "128-63",
      "128-72",
      "125-73"
    ]
  },
  {
    "query": "Find the top 20 parcels with the highest consumer spending in surrounding areas.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Convert to projected CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter for retail parcels\nretail_codes = ['300', '302', '316', '323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '353', '362', '375', '404']\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_codes)].copy()\n\n# Calculate spending for each retail parcel\ndef calculate_spending(parcel_geom, poi_geoms, spending_df):\n    buffer = parcel_geom.buffer(100)  # 100m buffer\n    nearby_poi = poi_geoms[poi_geoms.geometry.intersects(buffer)].copy()\n    \n    if nearby_poi.empty:\n        return 0\n    \n    total_spending = 0\n    for _, row in nearby_poi.iterrows():\n        poi_type = row['poi_type']\n        if poi_type in spending_df['poi_type'].values:\n            spending_value = spending_df.loc[spending_df['poi_type'] == poi_type, 'spending'].values[0]\n            total_spending += spending_value\n    \n    return total_spending\n\n# Calculate spending for each retail parcel\npoi_geoms = poi_proj[['geometry']].copy()\nspending_values = []\nfor _, parcel in retail_parcels.iterrows():\n    spending = calculate_spending(parcel.geometry, poi_geoms, spending)\n    spending_values.append(spending)\n\n# Add spending to parcels\nretail_parcels['spending'] = spending_values\n\n# Sort by spending (higher is better)\nresult_parcels = retail_parcels.sort_values('spending', ascending=False)\n\n# Get top 20 parcel IDs\ntop_parcels = result_parcels.head(20)\ntop_ids = top_parcels['ml'].tolist()\n\n# Print results\nprint(top_ids)"
  },
  {
    "query": "Find vacant commercial parcels larger than 3000 square feet that are within 800 meters of a subway station.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Define projected CRS for Cambridge, MA\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter for commercial parcels\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '330', \n    '332', '334', '340', '341', '343', '345', '346', '353', '362', \n    '375', '404', '406', '0340', '0406', '0400', '0401', '0402', \n    '0403', '0410', '0411', '0412', '0413', '0414', '0415', '0416'\n]\ncommercial_parcels = parcels[parcels['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Filter for vacant parcels\nvacant_parcels = commercial_parcels[commercial_parcels['status'] == 'vacant'].copy()\n\n# Filter for parcels larger than 3000 square feet\nlarge_vacant_parcels = vacant_parcels[vacant_parcels['land_area'] > 3000].copy()\n\n# Define subway station locations (approximate coordinates)\nsubway_stations = gpd.GeoDataFrame({\n    'station': ['Alewife', 'Davis', 'Porter', 'Harvard', 'Central', 'Kendall', 'Charles', 'Park', 'South'],\n    'geometry': [\n        gpd.points_from_xy([-71.1429, 42.3954]),\n        gpd.points_from_xy([-71.1215, 42.3734]),\n        gpd.points_from_xy([-71.1189, 42.3738]),\n        gpd.points_from_xy([-71.1183, 42.3656]),\n        gpd.points_from_xy([-71.1032, 42.3623]),\n        gpd.points_from_xy([-71.0865, 42.3629]),\n        gpd.points_from_xy([-71.0783, 42.3584]),\n        gpd.points_from_xy([-71.0572, 42.3584]),\n        gpd.points_from_xy([-71.0615, 42.3523])\n    ]\n})\nsubway_stations = gpd.GeoDataFrame(subway_stations, geometry='geometry', crs='EPSG:4326')\nsubway_stations = subway_stations.to_crs(epsg=26986)\n\n# Create buffer of 800m around subway stations\nsubway_buffers = [geom.buffer(800) for geom in subway_stations.geometry]\nsubway_union_buffer = gpd.GeoSeries(subway_buffers).union_all()\nsubway_union_buffer = gpd.GeoSeries([subway_union_buffer]).set_crs(epsg=26986)\n\n# Filter for parcels within 800m of subway stations\nparcels_near_subway = large_vacant_parcels[large_vacant_parcels.geometry.intersects(subway_union_buffer.iloc[0])].copy()\n\n# Sort by parcel ID (ml column)\nresult_ids = sorted(parcels_near_subway['ml'].tolist())\n\n# Print results\nprint(result_ids)"
  },
  {
    "query": "Find commercial parcels zoned for retail use with fewer than 3 competing retail businesses within 300 meters.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to accurate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter retail parcels\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_use_codes)].copy()\n\n# Count competing retail businesses within 300m\ndef count_competing_retail(parcel_geom, poi_geoms, buffer_distance=300):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    competing_retail = 0\n    for poi_geom in poi_geoms:\n        if buffered_geom.contains(poi_geom) and poi_geom['business_type'] == 'retail':\n            competing_retail += 1\n    return competing_retail\n\n# Get retail POI geometries\nretail_poi = poi_proj[poi_proj['business_type'] == 'retail']\nretail_poi_geoms = retail_poi.geometry.tolist()\n\n# Calculate competing retail businesses for each parcel\nretail_parcels['competing_retail'] = retail_parcels.geometry.apply(\n    lambda geom: count_competing_retail(geom, retail_poi_geoms)\n)\n\n# Filter parcels with fewer than 3 competing retail businesses\nresult_parcels = retail_parcels[retail_parcels['competing_retail'] < 3].copy()\n\n# Sort by parcel ID (ml)\nresult_parcels = result_parcels.sort_values('ml')\n\n# Get parcel IDs\nresult_ids = result_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)"
  },
  {
    "query": "find the top 20 commercial parcels within 1km of massachusetts avenue, prioritizing areas with higher consumer spending.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Project to accurate CRS\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter commercial parcels\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '330', \n    '332', '334', '340', '341', '343', '345', '346', '353', '362', \n    '375', '404', '406', '0340', '0406', '0404'\n]\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Define Massachusetts Avenue\nmass_ave_coords = [\n    (-71.1189, 42.3736), (-71.1036, 42.3736), (-71.0865, 42.3736),\n    (-71.1189, 42.3745), (-71.1036, 42.3745), (-71.0865, 42.3745)\n]\nmass_ave_geom = gpd.GeoSeries.from_xy(*zip(*mass_ave_coords), crs='EPSG:4326').to_crs(epsg=26986)\nmass_ave_line = mass_ave_geom.unary_union\n\n# Create buffer for 1km\nmass_ave_buffer = mass_ave_line.buffer(1000)\n\n# Filter parcels within 1km of Mass Ave\nparcels_near_mass_ave = commercial_parcels[commercial_parcels.geometry.intersects(mass_ave_buffer)].copy()\n\n# Join POI data to parcels\npoi_near_parcels = gpd.sjoin(poi_proj, parcels_near_mass_ave, how='inner', predicate='intersects')\npoi_counts = poi_near_parcels.groupby('ml').size().reset_index(name='poi_count')\nparcels_near_mass_ave = parcels_near_mass_ave.merge(poi_counts, on='ml', how='left').fillna({'poi_count': 0})\n\n# Join spending data to parcels\nspending = spending.rename(columns={'ml': 'ml'})\nparcels_near_mass_ave = parcels_near_mass_ave.merge(spending, on='ml', how='left')\n\n# Sort by spending and poi_count\nresult_parcels = parcels_near_mass_ave.sort_values(by=['spend', 'poi_count'], ascending=False)\n\n# Get top 20 parcel IDs\ntop_parcels = result_parcels.head(20)['ml'].tolist()\n\n# Print results\nprint(top_parcels)"
  },
  {
    "query": "find commercial parcels larger than 8000 square feet in census tracts with at least 90% of residents aged 18-64.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Filter commercial parcels larger than 8000 sq ft\nlarge_commercial = parcels_proj[\n    (parcels_proj['use_code'].astype(str).str.startswith('3')) & \n    (parcels_proj['land_area'] > 8000)\n].copy()\n\n# Spatial join with census tracts\njoined = gpd.sjoin(\n    large_commercial,\n    census_proj,\n    how='left',\n    predicate='within',\n    rsuffix='census'\n)\n\n# Filter for tracts with at least 90% aged 18-64\nresult = joined[joined['pct_age_18_64'] >= 0.90].copy()\n\n# Sort by parcel ID (ml)\nresult_sorted = result.sort_values('ml')\n\n# Extract parcel IDs\nparcel_ids = result_sorted['ml'].tolist()\n\n# Print results\nprint(parcel_ids)"
  },
  {
    "query": "find commercial parcels that are between 5000-10000 square feet, within 500 meters of a subway station, and have no more than 1 competitor within 500 meters.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspend = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\n\n# Filter commercial parcels\ncommercial_use_codes = ['300', '302', '316', '323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '353', '362', '375', '404', '406', '0340', '0406']\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Filter by size (5000-10000 sq ft)\nsize_filtered = commercial_parcels[(commercial_parcels['land_area'] >= 5000) & (commercial_parcels['land_area'] <= 10000)].copy()\n\n# Define subway station locations (approximate)\nsubway_stations = gpd.GeoDataFrame({\n    'name': ['Alewife', 'Davis', 'Porter', 'Harvard', 'Central', 'Kendall', 'Park St', 'South Station'],\n    'geometry': [\n        gpd.points_from_xy([-71.1425, -71.1215, -71.1187, -71.1183, -71.1036, -71.0865, -71.0622, -71.0589], [42.3954, 42.3734, 42.3755, 42.3770, 42.3625, 42.3623, 42.3584, 42.3601])\n    ]\n}, geometry='geometry', crs='EPSG:4326').to_crs(epsg=26986)\n\n# Filter by proximity to subway stations (within 500m)\nsubway_buffer = subway_stations.buffer(500).union_all()\nnear_subway = size_filtered[size_filtered.geometry.intersects(subway_buffer)].copy()\n\n# Count competitors (other commercial parcels) within 500m\ndef count_competitors(parcel_geom, all_parcels, buffer_distance=500):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    competitors = all_parcels[all_parcels.geometry.intersects(buffered_geom)]\n    return len(competitors) - 1  # Exclude self\n\nnear_subway['competitor_count'] = near_subway.apply(lambda row: count_competitors(row.geometry, near_subway), axis=1)\n\n# Filter by competitor count (no more than 1 competitor within 500m)\nfinal_parcels = near_subway[near_subway['competitor_count'] <= 1].copy()\n\n# Sort by parcel ID (ml)\nfinal_parcels = final_parcels.sort_values('ml')\n\n# Get parcel IDs\nresult_ids = final_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)"
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.0,
    "precision": 0.0,
    "recall": 0.0,
    "f1_score": 0.0,
    "generated_count": 1,
    "ground_truth_count": 123,
    "correct_count": 0,
    "query": "find parcels that are zoned for mixed-use, within 400 meters of public transportation, and at least 200 meters away from industrial areas.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": true,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\n\n# Filter for mixed-use parcels\nmixed_use_codes = ['100', '101', '102', '104', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '120', '121', '130', '131', '132', '134', '135', '136', '140', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '160', '162', '170', '171', '172', '174', '175', '176', '177', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199']\nmixed_use_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(mixed_use_codes)]\n\n# Filter for parcels within 400m of public transportation (bus stops)\nbus_stops = poi[poi['business_type'] == 'bus_stop']\nbus_buffer = bus_stops.geometry.buffer(400).union_all()\nparcels_near_bus = mixed_use_parcels[mixed_use_parcels.geometry.intersects(bus_buffer)]\n\n# Filter for parcels at least 200m away from industrial areas\nindustrial_codes = ['300', '302', '303', '304', '306', '307', '308', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999']\nindustrial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(industrial_codes)]\nindustrial_buffer = industrial_parcels.geometry.buffer(200).union_all()\nfinal_parcels = parcels_near_bus[~parcels_near_bus.geometry.intersects(industrial_buffer)]\n\n# Sort by parcel ID (ml)\nfinal_ids = sorted(final_parcels['ml'].astype(str).tolist())\n\n# Print results\nprint(final_ids)",
    "generated_ids": [
      ""
    ]
  },
  {
    "query": "find parcels that are either commercial places within 100m of harvard square or residential larger than 5000 square feet and within 200m of 50 restaurants.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspend = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '330', '332', \n    '334', '340', '341', '343', '345', '346', '353', '362', '375', '404', \n    '406', '0340', '0406', '0404', '0410', '0420', '0430', '0440', '0450', \n    '0460', '0470', '0480', '0490', '850', '851', '852', '853', '854', \n    '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', \n    '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', \n    '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', \n    '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', \n    '895', '896', '897', '898', '899'\n]\n\n# Filter commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Filter POI for restaurants\nrestaurant_types = ['restaurant', 'cafe', 'diner', 'fast_food']\nrestaurants = poi_proj[poi_proj['business_type'].str.lower().isin(restaurant_types)].copy()\n\n# Condition 1: Commercial parcels within 100m of Harvard Square\nharvard_square = gpd.GeoDataFrame(geometry=[gpd.points_from_xy([-71.1189], [42.3736])], crs=parcels.crs).to_crs(epsg=26986)\ncommercial_near_harvard = commercial_parcels[commercial_parcels.geometry.distance(harvard_square.geometry[0]) <= 100].copy()\n\n# Condition 2: Residential parcels >5000 sqft within 200m of 50 restaurants\n# Filter residential parcels >5000 sqft\nresidential_parcels = parcels_proj[~parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\nlarge_residential = residential_parcels[residential_parcels['land_area'] > 5000].copy()\n\n# Function to count restaurants within buffer\ndef count_restaurants_within_buffer(parcel_geom, restaurants, buffer_distance):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    count = restaurants[restaurants.geometry.intersects(buffered_geom)].shape[0]\n    return count\n\n# Count restaurants within 200m for each large residential parcel\nlarge_residential = large_residential.copy()\nlarge_residential['restaurant_count_200m'] = large_residential.geometry.apply(lambda geom: count_restaurants_within_buffer(geom, restaurants, 200))\n\n# Filter for parcels with at least 50 restaurants within 200m\nresidential_near_restaurants = large_residential[large_residential['restaurant_count_200m'] >= 50].copy()\n\n# Combine results\nresult_parcels = pd.concat([commercial_near_harvard, residential_near_restaurants]).drop_duplicates(subset='ml', keep='first')\n\n# Sort by parcel ID\nresult_parcels = result_parcels.sort_values('ml')\n\n# Get parcel IDs\nresult_ids = result_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)"
  },
  {
    "query": "find parcels that are zoned for retail and within 300m of a subway station and not within 100m of a competitor.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspend = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter for retail parcels\nretail_use_codes = ['323', '324', '325', '326', '327', '330']\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_use_codes)].copy()\n\n# Filter subway stations from POI\nsubway_stations = ['Alewife', 'Davis', 'Porter', 'Harvard', 'Central', 'Kendall', 'Charles', 'Park', 'South']\nsubway_poi = poi_proj[poi_proj['name'].isin(subway_stations)].copy()\n\n# If no subway POI, use general transit POI\nif subway_poi.empty:\n    transit_types = ['bus_station', 'subway_station', 'train_station', 'transit_station']\n    subway_poi = poi_proj[poi_proj['business_type'].isin(transit_types)].copy()\n\n# Buffer subway stations by 300m\nsubway_buffers = [geom.buffer(300) for geom in subway_poi.geometry]\nsubway_union_buffer = gpd.GeoSeries(subway_buffers).union_all()\n\n# Retail parcels within 300m of subway\nretail_near_subway = retail_parcels[retail_parcels.geometry.intersects(subway_union_buffer)].copy()\n\n# Filter for competitor retail parcels (same use codes)\ncompetitor_parcels = retail_parcels.copy()\n\n# Buffer competitor parcels by 100m\ncompetitor_buffers = [geom.buffer(100) for geom in competitor_parcels.geometry]\ncompetitor_union_buffer = gpd.GeoSeries(competitor_buffers).union_all()\n\n# Retail near subway but NOT within 100m of competitor\nfinal_parcels = retail_near_subway[~retail_near_subway.geometry.intersects(competitor_union_buffer)].copy()\n\n# Sort by parcel ID (ml)\nfinal_ids = sorted(final_parcels['ml'].tolist())\n\n# Print results\nprint(final_ids)"
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.6408227848101266,
    "precision": 0.6408227848101266,
    "recall": 0.9854014598540146,
    "f1_score": 0.7766059443911794,
    "generated_count": 632,
    "ground_truth_count": 411,
    "correct_count": 405,
    "query": "find parcels that are either office space larger than 10,000 sq ft or retail space within 500m of high-density residential areas.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": true,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\n\n# Define office and retail use codes\noffice_use_codes = ['340', '343', '345', '346', '353', '362', '404', '405', '406', '0340', '0343', '0345', '0346', '0353', '0362']\nretail_use_codes = ['324', '325', '326', '327', '330', '332', '334', '335', '336', '337', '338', '340', '341', '343', '0340', '0341', '0343']\n\n# Filter office parcels > 10,000 sq ft\noffice_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(office_use_codes) & (parcels_proj['land_area'] > 10000)]\n\n# Filter retail parcels within 500m of high-density residential\n# Define high-density residential use codes\nhigh_density_residential_codes = ['101', '1013', '1014', '102', '1020', '1021', '1022', '1023', '1024', '1025', '1026', '1027', '1028', '103', '104', '105', '109', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '253', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '281', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '292', '293', '294', '295', '296', '297', '298', '299', '300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999']\nhigh_density_residential = parcels_proj[parcels_proj['use_code'].astype(str).isin(high_density_residential_codes)]\n\n# Retail parcels within 500m of high-density residential\nretail_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(retail_use_codes)]\nbuffered_residential = high_density_residential.geometry.buffer(500).union_all()\nnearby_retail = retail_parcels[retail_parcels.geometry.intersects(buffered_residential)]\n\n# Combine criteria\ncombined_ids = set(office_parcels['ml']).union(set(nearby_retail['ml']))\n\n# Sort and return\nresult_ids = sorted(combined_ids)\nprint(result_ids)",
    "generated_ids": [
      "10-16",
      "10-31",
      "10-38",
      "10-39",
      "100-86",
      "102-25",
      "102-46",
      "105-123",
      "105-53",
      "105-58",
      "105-67",
      "105-68",
      "105-77",
      "105-81",
      "105-82",
      "105-93",
      "106-109",
      "106-123",
      "106-124",
      "106-42",
      "106-60",
      "107-117",
      "107-136",
      "107-137",
      "107-9",
      "108-54",
      "108-80",
      "109-22",
      "109-50",
      "109-51",
      "11-146",
      "11-40",
      "110-16",
      "110-53",
      "110-63",
      "110-87",
      "110-91",
      "111-43",
      "114A-120",
      "114A-66",
      "116-100",
      "116-117",
      "116-12",
      "116-13",
      "116-94",
      "117-1",
      "117-25",
      "117-29",
      "117-56",
      "118-1",
      "118-34",
      "118-79",
      "119-46",
      "119-47",
      "119-5",
      "119-51",
      "119-89",
      "119-90",
      "119-93",
      "119-95",
      "12-19",
      "120-17",
      "120-48",
      "120-74",
      "121-13",
      "121-2",
      "121-94",
      "122-12",
      "125-73",
      "125-80",
      "126-27",
      "128-63",
      "128-70",
      "128-71",
      "128-72",
      "129-11",
      "129-55",
      "129-58",
      "13-16",
      "13-23",
      "133-12",
      "133-23",
      "133-28",
      "133-33",
      "133-36",
      "133-48",
      "133-49",
      "133-51",
      "133-52",
      "133-54",
      "133-56",
      "134-33",
      "134-59",
      "136-15",
      "137-13",
      "139-83",
      "14-26",
      "14-36",
      "14-39",
      "14-44",
      "14-45",
      "14-47",
      "14-58",
      "14-64",
      "140-148",
      "141-80",
      "15-28",
      "15-29",
      "15-3",
      "15-30",
      "15-31",
      "150-114",
      "152-17",
      "152-25",
      "152-52",
      "154-101",
      "154-111",
      "154-64",
      "154-65",
      "154-73",
      "154-89",
      "154-97",
      "155-42",
      "156-25",
      "156-55",
      "156-60",
      "157-26",
      "159-2",
      "16-11",
      "16-23",
      "16-32",
      "160-11",
      "160-14",
      "160-48",
      "160-57",
      "160-58",
      "160-63",
      "160-66",
      "160-69",
      "160-76",
      "160-83",
      "160-84",
      "160-85",
      "161-92",
      "162-18",
      "162-19",
      "162-26",
      "162-29",
      "162-54",
      "162-66",
      "165-53",
      "165-55",
      "165-57",
      "165-60",
      "166-106",
      "166-13",
      "166-24",
      "166-31",
      "166-33",
      "166-35",
      "166-37",
      "166-77",
      "168-13",
      "168-20",
      "168-22",
      "168-25",
      "168-33",
      "168-36",
      "168-41",
      "168-48",
      "168-49",
      "168-60",
      "169-100",
      "169-102",
      "169-42",
      "169-46",
      "169-47",
      "169-67",
      "169-68",
      "169-7",
      "169-84",
      "169-86",
      "169-98",
      "169-99",
      "17-10",
      "17-74",
      "17-84",
      "172-29",
      "173-65",
      "174-26",
      "174-27",
      "174-30",
      "174-33",
      "174-36",
      "174-37",
      "174-73",
      "175-37",
      "175-68",
      "175-75",
      "175-77",
      "175-84",
      "176-15",
      "176-64",
      "177-71",
      "177-79",
      "178-106",
      "178-117",
      "178-118",
      "178-133",
      "178-43",
      "178-79",
      "179-75",
      "18-64",
      "18-65",
      "18-73",
      "18-74",
      "18-75",
      "18-76",
      "18-77",
      "180-57",
      "181-65",
      "181-80",
      "181-88",
      "182-84",
      "182-88",
      "182-89",
      "182-90",
      "182-98",
      "183-100",
      "183-119",
      "183-97",
      "184-109",
      "184-155",
      "184-159",
      "184-168",
      "184-191",
      "184-193",
      "184-27",
      "184-31",
      "186-14",
      "186-85",
      "186-96",
      "189-4",
      "189-57",
      "189-72",
      "189-88",
      "19-10",
      "19-22",
      "19-23",
      "190-33",
      "191-112",
      "191-65",
      "191-85",
      "192-121",
      "192-177",
      "192-39",
      "192-73",
      "192-74",
      "195-59",
      "196-123",
      "196-153",
      "196-154",
      "199-30",
      "199-31",
      "199-67",
      "199-90",
      "1A-105",
      "1A-172",
      "1A-189",
      "1A-190",
      "1A-192",
      "1A-200",
      "1A-201",
      "1A-209",
      "1A-211",
      "1A-213",
      "1A-70",
      "20-31",
      "20-75",
      "20-82",
      "20-83",
      "20-92",
      "200-22",
      "200-79",
      "200-91",
      "203A-76",
      "203B-52",
      "21-115",
      "21-118",
      "21-120",
      "21-121",
      "21-124",
      "21-16",
      "216-7",
      "226-46",
      "226-67",
      "228-33",
      "228-55",
      "229-117",
      "229-131",
      "229-135",
      "229-150",
      "23-149",
      "23-156",
      "23-157",
      "23-90",
      "230-116",
      "230-41",
      "230-42",
      "230-71",
      "230-97",
      "231-27",
      "233-147",
      "233-175",
      "233-89",
      "234-177",
      "234-178",
      "234-193",
      "236-146",
      "236-148",
      "236-84",
      "236-95",
      "24-133",
      "24-139",
      "248-82",
      "251-221",
      "251-9",
      "252-114",
      "252-147",
      "252-158",
      "252-160",
      "252A-155",
      "252A-157",
      "254-76",
      "254-78",
      "254-82",
      "254-86",
      "255-21",
      "260-32",
      "260-46",
      "260-73",
      "260-74",
      "260-76",
      "261-112",
      "261-186",
      "261-6",
      "261-65",
      "261-7",
      "261-77",
      "262-116",
      "265A-29",
      "265A-31",
      "265A-35",
      "265A-40",
      "265A-46",
      "265A-7",
      "265B-26",
      "265B-28",
      "265B-57",
      "265B-59",
      "265B-61",
      "265D-53",
      "267.1-278",
      "267.1-279",
      "267.2-267",
      "267.2-270",
      "267.2-272",
      "267.2-273",
      "267.3-253",
      "267.3-285",
      "267.4-288",
      "267.4-305",
      "267.4-307",
      "267.4-312",
      "267.4-313",
      "267.4-319",
      "267.4-322",
      "267.4-323",
      "267C-70",
      "267C-71",
      "267D-259",
      "267D-282",
      "267D-284",
      "267D-285",
      "267D-286",
      "267D-293",
      "267D-299",
      "267D-300",
      "267D-305",
      "267D-310",
      "267D-311",
      "267D-313",
      "267D-315",
      "267D-316",
      "267D-319",
      "267D-325",
      "267D-329",
      "267E-234",
      "267E-279",
      "267E-280",
      "267E-282",
      "267E-284",
      "267E-285",
      "267F-274",
      "267F-279",
      "267F-281",
      "267F-283",
      "267F-291",
      "267F-293",
      "267F-295",
      "267F-296",
      "267F-301",
      "267F-391",
      "268B-15",
      "268B-8",
      "268C-30",
      "268C-32",
      "268C-35",
      "269-138",
      "27-34",
      "27-82",
      "271-32",
      "271-44",
      "273-2",
      "273-20",
      "273-29",
      "273-35",
      "273-40",
      "273-51",
      "28-23",
      "28-31",
      "29-50",
      "30-35",
      "30-38",
      "30-40",
      "30-41",
      "30-42",
      "31-15",
      "31-20",
      "32-53",
      "34-116",
      "34-8",
      "35-87",
      "35-88",
      "36-137",
      "36-247",
      "39-173",
      "39-174",
      "39-179",
      "39-88",
      "40-153",
      "40-197",
      "41-26",
      "41-29",
      "41-36",
      "41-37",
      "41-38",
      "42-13",
      "42-70",
      "42-81",
      "42-86",
      "42-87",
      "42-91",
      "42-94",
      "42-97",
      "42-99",
      "43-70",
      "43-73",
      "43-76",
      "43-77",
      "43-78",
      "43A-16",
      "43A-19",
      "43A-21",
      "43A-24",
      "43A-28",
      "44-100",
      "44-104",
      "44-105",
      "44-95",
      "44-99",
      "46-12",
      "47-94",
      "47-97",
      "48-160",
      "53-54",
      "54-19",
      "54-25",
      "55-18",
      "63-128",
      "63-132",
      "63-135",
      "64-6",
      "66-153",
      "66-94",
      "66-99",
      "67-14",
      "67-47",
      "67-48",
      "67-56",
      "67-61",
      "67-65",
      "67-66",
      "67-67",
      "68-47",
      "68-60",
      "68-75",
      "68-76",
      "68-77",
      "69-148",
      "69-159",
      "69-161",
      "69-162",
      "69-165",
      "69-173",
      "69-179",
      "69-182",
      "69-183",
      "7-37",
      "70-12",
      "70-22",
      "70-74",
      "70-86",
      "70-88",
      "70-9",
      "70-91",
      "70-92",
      "71-55",
      "74-1",
      "74-6",
      "74-8",
      "75-128",
      "75-130",
      "75-44",
      "75-57",
      "77-41",
      "79-22",
      "8-75",
      "8-76",
      "8-91",
      "80-142",
      "80-175",
      "80-3",
      "81-100",
      "81-103",
      "81-109",
      "81-50",
      "81-99",
      "82-31",
      "83-1",
      "83-12",
      "83-13",
      "83-15",
      "83-80",
      "83-90",
      "83-92",
      "83-98",
      "83-99",
      "84-100",
      "84-101",
      "84-12",
      "84-66",
      "84-85",
      "84-91",
      "84-97",
      "84-99",
      "85-13",
      "85-66",
      "85-76",
      "86-84",
      "87-109",
      "87-153",
      "87-19",
      "88-48",
      "88-53",
      "89-17",
      "89-95",
      "9-41",
      "90-125",
      "90-127",
      "90-133",
      "90-14",
      "90-155",
      "90-162",
      "90-169",
      "90-170",
      "90-184",
      "90-193",
      "90-20",
      "90-55",
      "91-118",
      "91-119",
      "91-191",
      "91-195",
      "91-200",
      "91-208",
      "91-52",
      "91-63",
      "91-64",
      "91-65",
      "91-68",
      "91-82",
      "91-83",
      "91-98",
      "92-125",
      "92-127",
      "92-88",
      "93-48",
      "93-73",
      "93-76",
      "93-78",
      "93-79",
      "93-80",
      "93-99",
      "94-6",
      "95-51",
      "95-60",
      "95-71",
      "95-72",
      "95-74",
      "95-75",
      "95-76",
      "95-77",
      "95-78",
      "95-79",
      "96-109",
      "96-110",
      "96-124",
      "96-152",
      "96-153",
      "96-98",
      "97-111"
    ]
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.5030674846625767,
    "precision": 0.5030674846625767,
    "recall": 0.19951338199513383,
    "f1_score": 0.2857142857142857,
    "generated_count": 163,
    "ground_truth_count": 411,
    "correct_count": 82,
    "query": "find commercial parcels that, if larger than 5000 sq ft, must be within 400m of public transit, or if smaller, must be within 200m of residential areas.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": true,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '330', \n    '332', '334', '340', '341', '343', '345', '346', '353', '362', \n    '375', '404', '406', '0340', '0406', '0405', '0411', '0412', \n    '0413', '0414', '0415', '0416', '0417', '0418', '0420', '0421'\n]\n\n# Filter for commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Define public transit locations (bus stops)\nbus_stops = poi_proj[poi_proj['business_type'] == 'bus_stop']\n\n# Define residential parcels\nresidential_parcels = parcels_proj[parcels_proj['use_code'].astype(str).str.startswith('1')].copy()\n\n# Define large and small commercial parcels\nlarge_commercial = commercial_parcels[commercial_parcels['land_area'] > 5000].copy()\nsmall_commercial = commercial_parcels[commercial_parcels['land_area'] <= 5000].copy()\n\n# Large parcels within 400m of public transit\nif not bus_stops.empty:\n    bus_buffer = bus_stops.geometry.unary_union.buffer(400)\n    large_near_transit = large_commercial[large_commercial.geometry.intersects(bus_buffer)].copy()\nelse:\n    large_near_transit = large_commercial.iloc[:0].copy()\n\n# Small parcels within 200m of residential areas\nif not residential_parcels.empty:\n    res_buffer = residential_parcels.geometry.unary_union.buffer(200)\n    small_near_res = small_commercial[small_commercial.geometry.intersects(res_buffer)].copy()\nelse:\n    small_near_res = small_commercial.iloc[:0].copy()\n\n# Combine results\nvalid_parcels = pd.concat([large_near_transit, small_near_res]).drop_duplicates(subset='ml', keep='first')\n\n# Sort by parcel ID\nvalid_parcels = valid_parcels.sort_values('ml')\n\n# Convert back to original CRS\nvalid_parcels = valid_parcels.to_crs(parcels.crs)\n\n# Output results\nresult_ids = valid_parcels['ml'].tolist()\nprint(result_ids)",
    "generated_ids": [
      "10-39",
      "102-25",
      "102-46",
      "105-123",
      "105-58",
      "105-74",
      "106-109",
      "108-54",
      "110-18",
      "110-21",
      "110-55",
      "110-90",
      "114A-120",
      "116-94",
      "117-25",
      "118-1",
      "118-79",
      "120-17",
      "120-74",
      "122-12",
      "126-131",
      "126-27",
      "127-139",
      "133-12",
      "133-14",
      "133-15",
      "133-20",
      "133-27",
      "133-28",
      "133-30",
      "133-48",
      "133-52",
      "139-83",
      "14-49",
      "150-114",
      "154-111",
      "154-64",
      "154-65",
      "154-73",
      "154-89",
      "159-2",
      "160-63",
      "160-66",
      "160-67",
      "160-76",
      "160-77",
      "160-83",
      "160-84",
      "162-17",
      "162-18",
      "162-19",
      "162-29",
      "162-64",
      "162-65",
      "162-73",
      "166-106",
      "166-33",
      "166-35",
      "166-37",
      "166-52",
      "166-77",
      "168-49",
      "169-67",
      "169-68",
      "169-7",
      "169-81",
      "17-10",
      "173-65",
      "174-30",
      "174-31",
      "174-33",
      "174-73",
      "175-77",
      "178-79",
      "178-91",
      "18-73",
      "182-89",
      "182-90",
      "184-109",
      "184-155",
      "186-14",
      "189-4",
      "192-74",
      "196-123",
      "196-153",
      "20-83",
      "20-92",
      "200-79",
      "21-115",
      "21-124",
      "228-33",
      "228-55",
      "229-131",
      "229-150",
      "23-146",
      "23-156",
      "230-116",
      "230-41",
      "230-42",
      "230-97",
      "231-27",
      "233-147",
      "233-175",
      "234-193",
      "236-146",
      "242B-998",
      "252-158",
      "254-76",
      "254-78",
      "255-21",
      "261-112",
      "261-186",
      "261-6",
      "261-7",
      "265A-35",
      "265A-46",
      "27-34",
      "271-32",
      "34-116",
      "34-28",
      "35-34",
      "36-137",
      "36-189",
      "36-248",
      "37-20",
      "40-153",
      "42-13",
      "42-81",
      "42-94",
      "69-162",
      "74-6",
      "74-8",
      "75-128",
      "75-44",
      "79-22",
      "80-172",
      "80-3",
      "80-51",
      "81-104",
      "82-31",
      "83-15",
      "83-7",
      "83-90",
      "83-98",
      "83-99",
      "84-67",
      "86-84",
      "90-125",
      "90-127",
      "90-52",
      "91-191",
      "91-52",
      "91-63",
      "91-64",
      "93-48",
      "93-72",
      "93-74",
      "93-76",
      "93-79",
      "94-6",
      "96-152",
      "97-111",
      "99-51"
    ]
  },
  {
    "query": "find parcels that are: if zoned for commercial, must be larger than 8000 sq ft; if zoned for residential, must have less than 2 similar properties within 1000m",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": false,
    "code": ""
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.0,
    "precision": 0.0,
    "recall": 0.0,
    "f1_score": 0.0,
    "generated_count": 1,
    "ground_truth_count": 30,
    "correct_count": 0,
    "query": "find mixed-use parcels that, if north of massachusetts avenue, must have retail on the ground floor, otherwise must have at least 3000 sq ft of commercial space.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": true,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to accurate CRS\nparcels_proj = parcels.to_crs(epsg=26986)\n\n# Define retail use codes\nretail_use_codes = ['300', '302', '316', '323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '353', '362', '375']\n\n# Mixed-use parcels\nmixed_use = parcels_proj[parcels_proj['use_code'].astype(str).str.startswith('1')]\nmixed_use = mixed_use[mixed_use['ml'].astype(str).str.startswith('1')]\n\n# Split by location\nnorth_of_ma = mixed_use[mixed_use.geometry.centroid.y > 42.373611]\nsouth_of_ma = mixed_use[mixed_use.geometry.centroid.y <= 42.373611]\n\n# North of MA: must have retail on ground floor\ndef has_retail_on_ground_floor(parcel):\n    # Check if any retail use codes are present\n    return any(code in retail_use_codes for code in parcel['use_code'])\n\nnorth_valid = north_of_ma[north_of_ma.apply(has_retail_on_ground_floor, axis=1)]\n\n# South of MA: must have at least 3000 sq ft of commercial space\nsouth_valid = south_of_ma[south_of_ma['land_area'] >= 3000]\n\n# Combine results\nvalid_parcels = gpd.GeoDataFrame(pd.concat([north_valid, south_valid], ignore_index=True))\n\n# Sort by ml\nresult_ids = valid_parcels['ml'].sort_values().tolist()\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      ""
    ]
  },
  {
    "query": "Find parcels between 1000-10000 square feet within 800 meters of Kendall/MIT station in census tracts where at least 5% of residents have advanced degrees.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Filter parcels by size\nparcels_filtered = parcels_proj[(parcels_proj['land_area'] >= 1000) & (parcels_proj['land_area'] <= 10000)]\n\n# Define Kendall/MIT station location\nkendall_location = (-71.0825, 42.3625)\nkendall_point = gpd.GeoDataFrame(geometry=[gpd.points_from_xy([kendall_location[0]], [kendall_location[1]])[0]], crs=parcels.crs)\nkendall_point_proj = kendall_point.to_crs(epsg=26986)\n\n# Filter parcels within 800m of Kendall/MIT station\nparcels_near_kendall = parcels_filtered[parcels_filtered.geometry.distance(kendall_point_proj.geometry[0]) <= 800]\n\n# Filter census data for advanced degree percentage\ncensus_filtered = census_proj[census_proj['pct_adv_degree'] >= 0.05]\n\n# Spatial join: parcels near Kendall within tracts with >=5% advanced degrees\nparcels_near_kendall_with_degrees = gpd.sjoin(parcels_near_kendall, census_filtered, how='inner', predicate='within')\n\n# Sort by parcel ID (ml)\nresult_ids = parcels_near_kendall_with_degrees['ml'].sort_values().tolist()\n\n# Print results\nprint(result_ids)"
  },
  {
    "query": "Find office parcels with at least 7500 square feet that are within 400 meters of both a restaurant and a coffee shop.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-011708:BUo8aWbm",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter office parcels >7500 sq ft\noffice_codes = ['340','345','346','347','353','362','363','364','365','370','371','372','404','405','406','','','','']\noffice_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(office_codes)].copy()\nlarge_office_parcels = office_parcels[office_parcels['land_area'] > 7500].copy()\n\n# Filter POI for restaurants and coffee shops\nrestaurants = poi_proj[poi_proj['business_type'].str.contains('restaurant|cafe|coffee', case=False, na=False)]\ncoffee_shops = poi_proj[poi_proj['business_type'].str.contains('coffee', case=False, na=False)]\n\n# Function to check both POI within 400m\ndef has_restaurant_and_coffee(parcel_geom, restaurants, coffee_shops, buffer_distance=400):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    has_rest = any(buffered_geom.intersects(r) for r in restaurants.geometry)\n    has_coffee = any(buffered_geom.intersects(c) for c in coffee_shops.geometry)\n    return has_rest and has_coffee\n\n# Filter parcels\nvalid_parcels = large_office_parcels[large_office_parcels.geometry.apply(\n    lambda geom: has_restaurant_and_coffee(geom, restaurants.geometry.tolist(), coffee_shops.geometry.tolist())\n)].copy()\n\n# Sort by ml\nresult_ids = valid_parcels['ml'].sort_values().tolist()\n\n# Print results\nprint(result_ids)"
  }
]