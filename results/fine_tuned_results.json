[
  {
    "query": "Find commercial parcels within 500 meters of Harvard Square.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Define Harvard Square location (approximate)\nharvard_square_coords = (-71.1189, 42.3736)\nharvard_square_point = gpd.GeoSeries([gpd.points_from_xy([harvard_square_coords[0]], [harvard_square_coords[1]])[0]], crs='EPSG:4326')\nharvard_square_point = harvard_square_point.to_crs(epsg=26986)\n\n# Buffer Harvard Square by 500 meters\nbuffer_500m = harvard_square_point.buffer(500).iloc[0]\n\n# Filter parcels within 500 meters of Harvard Square\nparcels_near_harvard = parcels[parcels.geometry.intersects(buffer_500m)]\n\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310',\n    '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321',\n    '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332',\n    '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343',\n    '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354',\n    '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365',\n    '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376',\n    '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387',\n    '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398',\n    '399'\n]\n\n# Filter for commercial parcels\ncommercial_parcels = parcels_near_harvard[parcels_near_harvard['lu'].astype(str).isin(commercial_use_codes)]\n\n# Sort by parcel ID (ml)\nsorted_parcels = commercial_parcels.sort_values('ml')\n\n# Extract parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "Find parcels larger than 6000 square feet that are zoned for retail use.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to EPSG:26986 for accurate spatial operations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels larger than 6000 square feet\nlarge_parcels = parcels[parcels['land_sqft'] > 6000]\n\n# Define retail zoning codes\nretail_zones = ['BA', 'BA-1', 'BA-2', 'BA-3', 'BB', 'BC', 'BC-1', 'BC-2', 'BC-3', 'BD', 'C']\n\n# Filter for retail-zoned parcels\nretail_parcels = large_parcels[large_parcels['zoning'].isin(retail_zones)]\n\n# Sort by parcel ID (ml)\nsorted_parcels = retail_parcels.sort_values('ml')\n\n# Extract parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "Find all parcels that have no more than 2 competing restaurants within 800 meters.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Define competing restaurant categories\nrestaurant_categories = [\n    'restaurant', 'fast_food', 'cafe', 'bar', 'pub', 'bakery'\n]\n\n# Filter POI for competing restaurants\ncompeting_restaurants = poi[poi['category'].isin(restaurant_categories)]\n\n# Function to count competing restaurants within 800m\ndef count_competing_restaurants(parcel_geom, restaurants):\n    buffer_geom = parcel_geom.buffer(800)\n    count = restaurants[restaurants.geometry.within(buffer_geom)].shape[0]\n    return count\n\n# Apply function to each parcel\nparcels['competing_count'] = parcels.geometry.apply(\n    lambda geom: count_competing_restaurants(geom, competing_restaurants)\n)\n\n# Filter parcels with no more than 2 competing restaurants\nfiltered_parcels = parcels[parcels['competing_count'] <= 2]\n\n# Sort by parcel ID (ml)\nsorted_parcels = filtered_parcels.sort_values('ml')\n\n# Extract parcel IDs\nresult_ids = sorted_parcels['ml'].tolist()\n\n# Print result\nprint(result_ids)"
  },
  {
    "query": "Find the top 20 parcels in Cambridge with the most diverse mix of residential and commercial land uses within 500 meters.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Define residential and commercial use codes\nresidential_codes = {'101', '102', '104', '105', '109', '111', '112', '113', '114', '121', '122', '130', '131', '132', '133', '106'}\ncommercial_codes = {'300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399'}\n\n# Filter parcels with residential and commercial uses\nresidential_parcels = parcels[parcels['lu'].astype(str).isin(residential_codes)]\ncommercial_parcels = parcels[parcels['lu'].astype(str).isin(commercial_codes)]\n\n# Create a buffer of 500 meters around each parcel\nparcels['buffer'] = parcels.geometry.buffer(500)\n\n# Function to calculate diversity score\ndef calculate_diversity_score(parcel, poi):\n    buffer_geom = parcel['buffer']\n    nearby_poi = poi[poi.geometry.within(buffer_geom)]\n    categories = nearby_poi['category'].unique()\n    return len(categories)\n\n# Calculate diversity scores\nparcels['diversity_score'] = parcels.apply(lambda row: calculate_diversity_score(row, poi), axis=1)\n\n# Filter parcels with both residential and commercial uses\nmixed_use_parcels = parcels[parcels['ml'].isin(residential_parcels['ml']) & parcels['ml'].isin(commercial_parcels['ml'])]\n\n# Sort by diversity score and select top 20\ntop_parcels = mixed_use_parcels.sort_values(by='diversity_score', ascending=False).head(20)\n\n# Get the list of parcel IDs\ntop_parcel_ids = top_parcels['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(top_parcel_ids)"
  },
  {
    "query": "Find the top 20 commercial parcels in areas with the highest percentage of residents with advanced degrees.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter for commercial parcels\ncommercial_codes = ['300', '316', '316C', '316R', '316S', '316T', '316U', '316V', '316W', '316X', '316Y', '316Z']\ncommercial_parcels = parcels[parcels['lu'].astype(str).isin(commercial_codes)].copy()\n\n# Join census data to parcels\ncensus = census[['geoid', 'pct_advanced_degree']]\nparcels_with_census = gpd.sjoin(commercial_parcels, census, how='left', predicate='within')\n\n# Fill NaN values with 0 for pct_advanced_degree\nparcels_with_census['pct_advanced_degree'] = parcels_with_census['pct_advanced_degree'].fillna(0)\n\n# Sort by percentage of advanced degrees\nsorted_parcels = parcels_with_census.sort_values(by='pct_advanced_degree', ascending=False)\n\n# Get top 20 parcel IDs\ntop_20_parcels = sorted_parcels.head(20)['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(top_20_parcels)"
  },
  {
    "query": "Find the top 20 parcels with the highest consumer spending in surrounding areas.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\nimport numpy as np\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Merge spending data with census data\ncensus = census.merge(spending, on='geoid', how='left')\ncensus['total_spending'] = census['total_spending'].fillna(0)\n\n# Calculate centroid of each parcel\nparcels['centroid'] = parcels.geometry.centroid\n\n# Function to calculate spending in surrounding areas\ndef calculate_surrounding_spending(parcel_geom, census_data, buffer_radius=500):\n    buffer = parcel_geom.buffer(buffer_radius)\n    relevant_census = census_data[census_data.geometry.intersects(buffer)]\n    return relevant_census['total_spending'].sum()\n\n# Calculate surrounding spending for each parcel\nparcels['surrounding_spending'] = parcels['centroid'].apply(\n    lambda geom: calculate_surrounding_spending(geom, census)\n)\n\n# Sort parcels by surrounding spending and get top 20\ntop_parcels = parcels.sort_values(by='surrounding_spending', ascending=False).head(20)\n\n# Get list of parcel IDs\ntop_parcel_ids = top_parcels['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(top_parcel_ids)"
  },
  {
    "query": "Find vacant commercial parcels larger than 3000 square feet that are within 800 meters of a subway station.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '301', '302', '303', '304', '305', '306', '307', '308', '309',\n    '310', '311', '312', '313', '314', '315', '316', '317', '318', '319',\n    '320', '321', '322', '323', '324', '325', '326', '327', '328', '329',\n    '330', '331', '332', '333', '334', '335', '336', '337', '338', '339',\n    '340', '341', '342', '343', '344', '345', '346', '347', '348', '349',\n    '350', '351', '352', '353', '354', '355', '356', '357', '358', '359',\n    '360', '361', '362', '363', '364', '365', '366', '367', '368', '369',\n    '370', '371', '372', '373', '374', '375', '376', '377', '378', '379',\n    '380', '381', '382', '383', '384', '385', '386', '387', '388', '389',\n    '390', '391', '392', '393', '394', '395', '396', '397', '398', '399'\n]\n\n# Filter for vacant commercial parcels\nvacant_commercial_parcels = parcels[\n    (parcels['use_code'].astype(str).isin(commercial_use_codes)) &\n    (parcels['land_area'] > 3000) &\n    (parcels['bldg_val'] == 0)\n]\n\n# Filter for subway stations\nsubway_stations = poi[poi['poi_type'] == 'subway_station']\n\n# Buffer subway stations by 800 meters\nsubway_buffer = subway_stations.geometry.buffer(800)\n\n# Combine buffers into a single geometry\ncombined_buffer = gpd.GeoSeries(subway_buffer).unary_union\n\n# Filter parcels within 800 meters of a subway station\nparcels_near_subway = vacant_commercial_parcels[\n    vacant_commercial_parcels.geometry.intersects(combined_buffer)\n]\n\n# Sort by parcel ID\nresult_parcels = parcels_near_subway.sort_values('ml')\n\n# Extract parcel IDs\nresult_ids = result_parcels['ml'].tolist()\n\n# Print result\nprint(result_ids)"
  },
  {
    "query": "Find commercial parcels zoned for retail use with fewer than 3 competing retail businesses within 300 meters.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Define retail NAICS codes\nretail_naics = [\n    '441110', '441120', '441210', '441222', '441228', '441310', '441320',\n    '442110', '442210', '442291', '442299', '443141', '443142', '444110',\n    '444120', '444130', '444190', '444210', '444220', '445110', '445120',\n    '445210', '445220', '445230', '445291', '445292', '445299', '445310',\n    '446110', '446120', '446130', '446191', '446199', '447110', '447190',\n    '448110', '448120', '448130', '448140', '448150', '448190', '448210',\n    '448310', '448320', '451110', '451120', '451130', '451140', '451211',\n    '451212', '451220', '452210', '452311', '452319', '453110', '453210',\n    '453220', '453310', '453910', '453920', '453930', '453991', '453998',\n    '454110', '454210', '454310'\n]\n\n# Filter retail POIs\nretail_poi = poi[poi['naics_code'].astype(str).isin(retail_naics)]\n\n# Filter commercial parcels zoned for retail use\ncommercial_parcels = parcels[parcels['lu'].isin(['325', '326', '327', '328', '329'])]\n\n# Function to count competing businesses within 300 meters\ndef count_competitors(parcel_geom, retail_poi):\n    buffer = parcel_geom.buffer(300)\n    competitors = retail_poi[retail_poi.geometry.within(buffer)]\n    return len(competitors)\n\n# Filter parcels with fewer than 3 competitors\nselected_parcels = []\nfor idx, row in commercial_parcels.iterrows():\n    count = count_competitors(row.geometry, retail_poi)\n    if count < 3:\n        selected_parcels.append(row['ml'])\n\n# Sort parcel IDs\nselected_parcels.sort()\n\n# Print result\nprint(selected_parcels)"
  },
  {
    "query": "find the top 20 commercial parcels within 1km of massachusetts avenue, prioritizing areas with higher consumer spending.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Define Massachusetts Avenue as a line\nmass_ave_coords = [\n    (-71.1193, 42.3736), (-71.1181, 42.3731), (-71.1169, 42.3726),\n    (-71.1157, 42.3721), (-71.1145, 42.3716), (-71.1133, 42.3711),\n    (-71.1121, 42.3706), (-71.1109, 42.3701), (-71.1097, 42.3696),\n    (-71.1085, 42.3691), (-71.1073, 42.3686), (-71.1061, 42.3681),\n    (-71.1049, 42.3676), (-71.1037, 42.3671), (-71.1025, 42.3666),\n    (-71.1013, 42.3661), (-71.1001, 42.3656), (-71.0989, 42.3651),\n    (-71.0977, 42.3646), (-71.0965, 42.3641), (-71.0953, 42.3636),\n    (-71.0941, 42.3631), (-71.0929, 42.3626), (-71.0917, 42.3621),\n    (-71.0905, 42.3616), (-71.0893, 42.3611), (-71.0881, 42.3606),\n    (-71.0869, 42.3601), (-71.0857, 42.3596), (-71.0845, 42.3591),\n    (-71.0833, 42.3586), (-71.0821, 42.3581), (-71.0809, 42.3576),\n    (-71.0797, 42.3571), (-71.0785, 42.3566), (-71.0773, 42.3561),\n    (-71.0761, 42.3556), (-71.0749, 42.3551), (-71.0737, 42.3546),\n    (-71.0725, 42.3541), (-71.0713, 42.3536), (-71.0701, 42.3531),\n    (-71.0689, 42.3526), (-71.0677, 42.3521), (-71.0665, 42.3516),\n    (-71.0653, 42.3511), (-71.0641, 42.3506), (-71.0629, 42.3501),\n    (-71.0617, 42.3496), (-71.0605, 42.3491), (-71.0593, 42.3486),\n    (-71.0581, 42.3481), (-71.0569, 42.3476), (-71.0557, 42.3471),\n    (-71.0545, 42.3466), (-71.0533, 42.3461), (-71.0521, 42.3456),\n    (-71.0509, 42.3451), (-71.0497, 42.3446), (-71.0485, 42.3441),\n    (-71.0473, 42.3436), (-71.0461, 42.3431), (-71.0449, 42.3426),\n    (-71.0437, 42.3421), (-71.0425, 42.3416), (-71.0413, 42.3411),\n    (-71.0401, 42.3406), (-71.0389, 42.3401), (-71.0377, 42.3396),\n    (-71.0365, 42.3391), (-71.0353, 42.3386), (-71.0341, 42.3381),\n    (-71.0329, 42.3376), (-71.0317, 42.3371), (-71.0305, 42.3366),\n    (-71.0293, 42.3361), (-71.0281, 42.3356), (-71.0269, 42.3351),\n    (-71.0257, 42.3346), (-71.0245, 42.3341), (-71.0233, 42.3336),\n    (-71.0221, 42.3331), (-71.0209, 42.3326), (-71.0197, 42.3321),\n    (-71.0185, 42.3316), (-71.0173, 42.3311), (-71.0161, 42.3306),\n    (-71.0149, 42.3301), (-71.0137, 42.3296), (-71.0125, 42.3291),\n    (-71.0113, 42.3286), (-71.0101, 42.3281), (-71.0089, 42.3276),\n    (-71.0077, 42.3271), (-71.0065, 42.3266), (-71.0053, 42.3261),\n    (-71.0041, 42.3256), (-71.0029, 42.3251), (-71.0017, 42.3246),\n    (-71.0005, 42.3241), (-70.9993, 42.3236), (-70.9981, 42.3231),\n    (-70.9969, 42.3226), (-70.9957, 42.3221), (-70.9945, 42.3216),\n    (-70.9933, 42.3211), (-70.9921, 42.3206), (-70.9909, 42.3201),\n    (-70.9897, 42.3196), (-70.9885, 42.3191), (-70.9873, 42.3186),\n    (-70.9861, 42.3181), (-70.9849, 42.3176), (-70.9837, 42.3171),\n    (-70.9825, 42.3166), (-70.9813, 42.3161), (-70.9801, 42.3156),\n    (-70.9789, 42.3151), (-70.9777, 42.3146), (-70.9765, 42.3141),\n    (-70.9753, 42.3136), (-70.9741, 42.3131), (-70.9729, 42.3126),\n    (-70.9717, 42.3121), (-70.9705, 42.3116), (-70.9693, 42.3111),\n    (-70.9681, 42.3106), (-70.9669, 42.3101), (-70.9657, 42.3096),\n    (-70.9645, 42.3091), (-70.9633, 42.3086), (-70.9621, 42.3081),\n    (-70.9609, 42.3076), (-70.9597, 42.3071), (-70.9585, 42.3066),\n    (-70.9573, 42.3061), (-70.9561, 42.3056), (-70.9549, 42.3051),\n    (-70.9537, 42.3046), (-70.9525, 42.3041), (-70.9513, 42.3036),\n    (-70.9501, 42.3031), (-70.9489, 42.3026), (-70.9477, 42.3021),\n    (-70.9465, 42.3016), (-70.9453, 42.3011), (-70.9441, 42.3006),\n    (-70.9429, 42.3001), (-70.9417, 42.2996), (-70.9405, 42.2991),\n    (-70.9393, 42.2986), (-70.9381, 42.2981), (-70.9369, 42.2976),\n    (-70.9357, 42.2971), (-70.9345, 42.2966), (-70.9333, 42.2961),\n    (-70.9321, 42.2956), (-70.9309, 42.2951), (-70.9297, 42.2946),\n    (-70.9285, 42.2941), (-70.9273, 42.2936), (-70.9261, 42.2931),\n    (-70.9249, 42.2926), (-70.9237, 42.2921), (-70.9225, 42.2916),\n    (-70.9213, 42.2911), (-70.9201, 42.2906), (-70.9189, 42.2901),\n    (-70.9177, 42.2896), (-70.9165, 42.2891), (-70.9153, 42.2886),\n    (-70.9141, 42.2881), (-70.9129, 42.2876), (-70.9117, 42.2871),\n    (-70.9105, 42.2866), (-70.9093, 42.2861), (-70.9081, 42.2856),\n    (-70.9069, 42.2851), (-70.9057, 42.2846), (-70.9045, 42.2841),\n    (-70.9033, 42.2836), (-70.9021, 42.2831), (-70.9009, 42.2826),\n    (-70.8997, 42.2821), (-70.8985, 42.2816), (-70.8973, 42.2811),\n    (-70.8961, 42.2806), (-70.8949, 42.2801), (-70.8937, 42.2796),\n    (-70.8925, 42.2791), (-70.8913, 42.2786), (-70.8901, 42.2781),\n    (-70.8889, 42.2776), (-70.8877, 42.2771), (-70.8865, 42.2766),\n    (-70.8853, 42.2761), (-70.8841, 42.2756), (-70.8829, 42.2751),\n    (-70.8817, 42.2746), (-70.8805, 42.2741), (-70.8793, 42.2736),\n    (-70.8781, 42.2731), (-70.8769, 42.2726), (-70.8757, 42.2721),\n    (-70.8745, 42.2716), (-70.8733, 42.2711), (-70.8721, 42.2706),\n    (-70.8709, 42.2701), (-70.8697, 42.2696), (-70.8685, 42.2691),\n    (-70.8673, 42.2686), (-70.8661, 42.2681), (-70.8649, 42.2676),\n    (-70.8637, 42.2671), (-70.8625, 42.2666), (-70.8613, 42.2661),\n    (-70.8601, 42.2656), (-70.8589, 42.2651), (-70.8577, 42.2646),\n    (-70.8565, 42.2641), (-70.8553, 42.2636), (-70.8541, 42.2631),\n    (-70.8529, 42.2626), (-70.8517, 42.2621), (-70.8505, 42.2616),\n    (-70.8493, 42.2611), (-70.8481, 42.2606), (-70.8469, 42.2601),\n    (-70.8457, 42.2596), (-70.8445, 42.2591), (-70.8433, 42.2586),\n    (-70.8421, 42.2581), (-70.8409, 42.2576), (-70.8397, 42.2571),\n    (-70.8385, 42.2566), (-70.8373, 42.2561), (-70.8361, 42.2556),\n    (-70.8349, 42.2551), (-70.8337, 42.2546), (-70.8325, 42.2541),\n    (-70.8313, 42.2536), (-70.8301, 42.2531), (-70.8289, 42.2526),\n    (-70.8277, 42.2521), (-70.8265, 42.2516), (-70.8253, 42.2511),\n    (-70.8241, 42.2506), (-70.8229, 42.2501), (-70.8217, 42.2496),\n    (-70.8205, 42.2491), (-70.8193, 42.2486), (-70.8181, 42.2481),\n    (-70.8169, 42.2476), (-70.8157, 42.2471), (-70.8145, 42.2466),\n    (-70.8133, 42.2461), (-70.8121, 42.2456), (-70.8109, 42.2451),\n    (-70.8097, 42.2446), (-70.8085, 42.2441), (-70.8073, 42.2436),\n    (-70.8061, 42.2431), (-70.8049, 42.2426), (-70.8037, 42.2421),\n    (-70.8025, 42.2416), (-70.8013, 42.2411), (-70.8001, 42.2406),\n    (-70.7989, 42.2401), (-70.7977, 42.2396), (-70.7965, 42.2391),\n    (-70.7953, 42.2386), (-70.7941, 42.2381), (-70.7929, 42.2376),\n    (-70.7917, 42.2371), (-70.7905, 42.2366), (-70.7893, 42.2361),\n    (-70.7881, 42.2356), (-70.7869, 42.2351), (-70.7857, 42.2346),\n    (-70.7845, 42.2341), (-70.7833, 42.2336), (-70.7821, 42.2331),\n    (-70.7809, 42.2326), (-70.7797, 42.2321), (-70.7785, 42.2316),\n    (-70.7773, 42.2311), (-70.7761, 42.2306), (-70.7749, 42.2301),\n    (-70.7737, 42.2296), (-70.7725, 42.2291), (-70.7713, 42.2286),\n    (-70.7701, 42.2281), (-70.7689, 42.2276), (-70.7677, 42.2271),\n    (-70.7665, 42.2266), (-70.7653, 42.2261), (-70.7641, 42.2256),\n    (-70.7629, 42.2251), (-70.7617, 42.2246), (-70.7605, 42.2241),\n    (-70.7593, 42.2236), (-70.7581, 42.2231), (-70.7569, 42.2226),\n    (-70.7557, 42.2221), (-70.7545, 42.2216), (-70.7533, 42.2211),\n    (-70.7521, 42.2206), (-70.7509, 42.2201), (-70.7497, 42.2196),\n    (-70.7485, 42.2191), (-70.7473, 42.2186), (-70.7461, 42.2181),\n    (-70.7449, 42.2176), (-70.7437, 42.2171), (-70.7425, 42.2166),\n    (-70.7413, 42.2161), (-70.7401, 42.2156), (-70.7389, 42.2151),\n    (-70.7377, 42.2146), (-70.7365, 42.2141), (-70.7353, 42.2136),\n    (-70.7341, 42.2131), (-70.7329, 42.2126), (-70.7317, 42.2121),\n    (-70.7305, 42.2116), (-70.7293, 42.2111), (-70.7281, 42.2106),\n    (-70.7269, 42.2101), (-70.7257, 42.2096), (-70.7245, 42.2091),\n    (-70.7233, 42.2086), (-70.7221, 42.2081), (-70.7209, 42.2076),\n    (-70.7197, 42.2071), (-70.7185, 42.2066), (-70.7173, 42.2061),\n    (-70.7161, 42.2056), (-70.7149, 42.2051), (-70.7137, 42.2046),\n    (-70.7125, 42.2041), (-70.7113, 42.2036), (-70.7101, 42.2031),\n    (-70.7089, 42.2026), (-70.7077, 42.2021), (-70.7065, 42.2016),\n    (-70.7053, 42.2011), (-70.7041, 42.2006), (-70.7029, 42.2001),\n    (-70.7017, 42.1996), (-70.7005, 42.1991), (-70.6993, 42.1986),\n    (-70.6981, 42.1981), (-70.6969, 42.1976), (-70.6957, 42.1971),\n    (-70.6945, 42.1966), (-70.6933, 42.1961), (-70.6921, 42.1956),\n    (-70.6909, 42.1951), (-70.6897, 42.1946), (-70.6885, 42.1941),\n    (-70.6873, 42.1936), (-70.6861, 42.1931), (-70.6849, 42.1926),\n    (-70.6837, 42.1921), (-70.6825, 42.1916), (-70.6813, 42.1911),\n    (-70.6801, 42.1906), (-70.6789, 42.1901), (-70.6777, 42.1896),\n    (-70.6765, 42.1891), (-70.6753, 42.1886), (-70.6741, 42.1881),\n    (-70.6729, 42.1876), (-70.6717, 42.1871), (-70.6705, 42.1866),\n    (-70.6693, 42.1861), (-70.6681, 42.1856), (-70.6669, 42.1851),\n    (-70.6657, 42.1846), (-70.6645, 42.1841), (-70.6633, 42.1836),\n    (-70.6621, 42.1831), (-70.6609, 42.1826), (-70.6597, 42.1821),\n    (-70.6585, 42.1816), (-70.6573, 42.1811), (-70.6561, 42.1806),\n    (-70.6549, 42.1801), (-70.6537, 42.1796), (-70.6525, 42.1791),\n    (-70.6513, 42.1786), (-70.6501, 42.1781), (-70.6489, 42.1776),\n    (-70.6477, 42.1771), (-70.6465, 42.1766), (-70.6453, 42.1761),\n    (-70.6441, 42.1756), (-70.6429, 42.1751), (-70.6417, 42.1746),\n    (-70.6405, 42.1741), (-70.6393, 42.1736), (-70.6381, 42.1731),\n    (-70.6369, 42.1726), (-70.6357, 42.1721), (-70.6345, 42.1716),\n    (-70.6333, 42.1711), (-70.6321, 42.1706), (-70.6309, 42.1701),\n    (-70.6297, 42.1696), (-70.6285, 42.1691), (-70.6273, 42.1686),\n    (-70.6261, 42.1681), (-70.6249, 42.1676), (-70.6237, 42.1671),\n    (-70.6225, 42.1666), (-70.6213, 42.1661), (-70.6201, 42.1656),\n    (-70.6189, 42.1651), (-70.6177, 42.1646), (-70.6165, 42.1641),\n    (-70.6153, 42.1636), (-70.6141, 42.1631), (-70.6129, 42.1626),\n    (-70.6117, 42.1621), (-70.6105, 42.1616), (-70.6093, 42.1611),\n    (-70.6081, 42.1606), (-70.6069, 42.1601), (-70.6057, 42.1596),\n    (-70.6045, 42.1591), (-70.6033, 42.1586), (-70.6021, 42.1581),\n    (-70.6009, 42.1576), (-70.5997, 42.1571), (-70.5985, 42.1566),\n    (-70.5973, 42.1561), (-70.5961, 42.1556), (-70.5949, 42.1551),\n    (-70.5937, 42.1546), (-70.5925, 42.1541), (-70.5913, 42.1536),\n    (-70.5901, 42.1531), (-70.5889, 42.1526), (-70.5877, 42.1521),\n    (-70.5865, 42.1516), (-70.5853, 42.1511), (-70.5841, 42.1506),\n    (-70.5829, 42.1501), (-70.5817, 42.1496), (-70.5805, 42.1491),\n    (-70.5793, 42.1486), (-70.5781, 42.1481), (-70.5769, 42.1476),\n    (-70.5757, 42.1471), (-70.5745, 42.1466), (-70.5733, 42.1461),\n    (-70.5721, 42.1456), (-70.5709, 42.1451), (-70.5697, 42.1446),\n    (-70.5685, 42.1441), (-70.5673, 42.1436), (-70.5661, 42.1431),\n    (-70.5649, 42.1426), (-70.5637, 42.1421), (-70.5625, 42.1416),\n    (-70.5613, 42.1411), (-70.5601, 42.1406), (-70.5589, 42.1401),\n    (-70.5577, 42.1396), (-70.5565, 42.1391), (-70.5553, 42.1386),\n    (-70.5541, 42.1381), (-70.5529, 42.1376), (-70.5517, 42.1371),\n    (-70.5505, 42.1366), (-70.5493, 42.1361), (-70.5481, 42.1356),\n    (-70.5469, 42.1351), (-70.5457, 42.1346), (-70.5445, 42.1341),\n    (-70.5433, 42.1336), (-70.5421, 42.1331), (-70.5409, 42.1326),\n    (-70.5397, 42.1321), (-70.5385, 42.1316), (-70.5373, 42.1311),\n    (-70.5361, 42.1306), (-70.5349, 42.1301), (-70.5337, 42.1296),\n    (-70.5325, 42.1291), (-70.5313, 42.1286), (-70.5301, 42.1281),\n    (-70.5289, 42.1276), (-70.5277, 42.1271), (-70.5265, 42.1266),\n    (-70.5253, 42.1261), (-70.5241, 42.1256), (-70.5229, 42.1251),\n    (-70.5217, 42.1246), (-70.5205, 42.1241), (-70.5193, 42.1236),\n    (-70.5181, 42.1231), (-70.5169, 42.1226), (-70.5157, 42.1221),\n    (-70.5145, 42.1216), (-70.5133, 42.1211), (-70.5121, 42.1206),\n    (-70.5109, 42.1201), (-70.5097, 42.1196), (-70.5085, 42.1191),\n    (-70.5073, 42.1186), (-70.5061, 42.1181), (-70.5049, 42.1176),\n    (-70.5037, 42.1171), (-70.5025, 42.1166), (-70.5013, 42.1161),\n    (-70.5001, 42.1156), (-70.4989, 42.1151), (-70.4977, 42.1146),\n    (-70.4965, 42.1141), (-70.4953, 42.1136), (-70.4941, 42.1131),\n    (-70.4929, 42.1126), (-70.4917, 42.1121), (-70.4905, 42.1116),\n    (-70.4893, 42.1111), (-70.4881, 42.1106), (-70.4869, 42.1101),\n    (-70.4857, 42.1096), (-70.4845, 42.1091), (-70.4833, 42.1086),\n    (-70.4821, 42.1081), (-70.4809, 42.1076), (-70.4797, 42.1071),\n    (-70.4785, 42.1066), (-70.4773, 42.1061), (-70.4761, 42.1056),\n    (-70.4749, 42.1051), (-70.4737, 42.1046), (-70.4725, 42.1041),\n    (-70.4713, 42.1036), (-70.4701, 42.1031), (-70.4689, 42.1026),\n    (-70.4677, 42.1021), (-70.4665, 42.1016), (-70.4653, 42.1011),\n    (-70.4641, 42.1006), (-70.4629, 42.1001), (-70.4617, 42.0996),\n    (-70.4605, 42.0991), (-70.4593, 42.0986), (-70.4581, 42.0981),\n    (-70.4569, 42.0976), (-70.4557, 42.0971), (-70.4545, 42.0966),\n    (-70.4533, 42.0961), (-70.4521, 42.0956), (-70.4509, 42.0951),\n    (-70.4497, 42.0946), (-70.4485, 42.0941), (-70.4473, 42.0936),\n    (-70.4461, 42.0931), (-70.4449, 42.0926), (-70.4437, 42.0921),\n    (-70.4425, 42.0916), (-70.4413, 42.0911), (-70.4401, 42.0906),\n    (-70.4389, 42.0901), (-70.4377, 42.0896), (-70.4365, 42.0891),\n    (-70.4353, 42.0886), (-70.4341, 42.0881), (-70.4329, 42.0876),\n    (-70.4317, 42.0871), (-70.4305, 42.0866), (-70.4293, 42.0861),\n    (-70.4281, 42.0856), (-70.4269, 42.0851), (-70.4257, 42.0846),\n    (-70.4245, 42.0841), (-70.4233, 42.0836), (-70.4221, 42.0831),\n    (-70.4209, 42.0826), (-70.4197, 42.0821), (-70.4185, 42.0816),\n    (-70.4173, 42.0811), (-70.4161, 42.0806), (-70.4149, 42.0801),\n    (-70.4137, 42.0796), (-70.4125, 42.0791), (-70.4113, 42.0786),\n    (-70.4101, 42.0781), (-70.4089, 42.0776), (-70.4077, 42.0771),\n    (-70.4065, 42.0766), (-70.4053, 42.0761), (-70.4041, 42.0756),\n    (-70.4029, 42.0751), (-70.4017, 42.0746), (-70.4005, 42.0741),\n    (-70.3993, 42.0736), (-70.3981, 42.0731), (-70.3969, 42.0726),\n    (-70.3957, 42.0721), (-70.3945, 42.0716), (-70.3933, 42.0711),\n    (-70.3921, 42.0706), (-70.3909, 42.0701), (-70.3897, 42.0696),\n    (-70.3885, 42.0691), (-70.3873, 42.0686), (-70.3861, 42.0681),\n    (-70.3849, 42.0676), (-70.3837, 42.0671), (-70.3825, 42.0666),\n    (-70.3813, 42.0661), (-70.3801, 42.0656), (-70.3789, 42.0651),\n    (-70.3777, 42.0646), (-70.3765, 42.0641), (-70.3753, 42.0636),\n    (-70.3741, 42.0631), (-70.3729, 42.0626), (-70.3717, 42.0621),\n    (-70.3705, 42.0616), (-70.3693, 42.0611), (-70.3681, 42.0606),\n    (-70.3669, 42.0601), (-70.3657, 42.0596), (-70.3645, 42.0591),\n    (-70.3633, 42.0586), (-70.3621, 42.0581), (-70.3609, 42.0576),\n    (-70.3597, 42.0571), (-70.3585, 42.0566), (-70.3573, 42.0561),\n    (-70.3561, 42.0556), (-70.3549, 42.0551), (-70.3537, 42.0546),\n    (-70.3525, 42.0541), (-70.3513, 42.0536), (-70.3501, 42.0531),\n    (-70.3489, 42.0526), (-70.3477, 42.0521), (-70.3465, 42.0516),\n    (-70.3453, 42.0511), (-70.3441, 42.0506), (-70.3429, 42.0501),\n    (-70.3417, 42.0496), (-70.3405, 42.0491), (-70.3393, 42.0486),\n    (-70.3381, 42.0481), (-70.3369, 42.0476), (-70.3357, 42.0471),\n    (-70.3345, 42.0466), (-70.3333, 42.0461), (-70.3321, 42.0456),\n    (-70.3309, 42.0451), (-70.3297, 42.0446), (-70.3285, 42.0441),\n    (-70.3273, 42.0436), (-70.3261, 42.0431), (-70.3249, 42.0426),\n    (-70.3237, 42.0421), (-70.3225, 42.0416), (-70.3213, 42.0411),\n    (-70.3201, 42.0406), (-70.3189, 42.0401), (-70.3177, 42.0396),\n    (-70.3165, 42.0391), (-70.3153, 42.0386), (-70.3141, 42.0381),\n    (-70.3129, 42.0376), (-70.3117, 42.0371), (-70.3105, 42.0366),\n    (-70.3093, 42.0361), (-70.3081, 42.0356), (-70.3069, 42.0351),\n    (-70.3057, 42.0346), (-70.3045, 42.0341), (-70.3033, 42.0336),\n    (-70.3021, 42.0331), (-70.3009, 42.0326), (-70.2997, 42.0321),\n    (-70.2985, 42.0316), (-70.2973, 42.0311), (-70.2961, 42.0306),\n    (-70.2949, 42.0301), (-70.2937, 42.0296), (-70.2925, 42.0291),\n    (-70.2913, 42.0286), (-70.2901, 42.0281), (-70.2889, 42.0276),\n    (-70.2877, 42.0271), (-70.2865, 42.0266), (-70.2853, 42.0261),\n    (-70.2841, 42.0256), (-70.2829, 42.0251), (-70.2817, 42.0246),\n    (-70.2805, 42.0241), (-70.2793, 42.0236), (-70.2781, 42.0231),\n    (-70.2769, 42.0226), (-70.2757, 42.0221), (-70.2745, 42.0216),\n    (-70.2733, 42.0211), (-70.2721, 42.0206), (-70.2709, 42.0201),\n    (-70.2697, 42.0196), (-70.2685, 42.0191), (-70.2673, 42.0186),\n    (-70.2661, 42.0181), (-70.2649, 42.0176), (-70.2637, 42.0171),\n    (-70.2625, 42.0166), (-70.2613, 42.0161), (-70.2601, 42.0156),\n    (-70.2589, 42.0151), (-70.2577, 42.0146), (-70.2565, 42.0141),\n    (-70.2553, 42.0136), (-70.2541, 42.0131), (-70.2529, 42.0126),\n    (-70.2517, 42.0121), (-70.2505, 42.0116), (-70.2493, 42.0111),\n    (-70.2481, 42.0106), (-70.2469, 42.0101), (-70.2457, 42.0096),\n    (-70.2445, 42.0091), (-70.2433, 42.0086), (-70.2421, 42.0081),\n    (-70.2409, 42.0076), (-70.2397, 42.0071), (-70.2385, 42.0066),\n    (-70.2373, 42.0061), (-70.2361, 42.0056), (-70.2349, 42.0051),\n    (-70.2337, 42.0046), (-70.2325, 42.0041), (-70.2313, 42.0036),\n    (-70.2301, 42.0031), (-70.2289, 42.0026), (-70.2277, 42.0021),\n    (-70.2265, 42.0016), (-70.2253, 42.0011), (-70.2241, 42.0006),\n    (-70.2229, 42.0001), (-70.2217, 41.9996), (-70.2205, 41.9991),\n    (-70.2193, 41.9986), (-70.2181, 41.9981), (-70.2169, 41.9976),\n    (-70.2157, 41.9971), (-70.2145, 41.9966), (-70.2133, 41.9961),\n    (-70.2121, 41.9956), (-70.2109, 41.9951), (-70.2097, 41.9946),\n    (-70.2085, 41.9941), (-70.2073, 41.9936), (-70.2061, 41.9931),\n    (-70.2049, 41.9926), (-70.2037, 41.9921), (-70.2025, 41.9916),\n    (-70.2013, 41.9911), (-70.2001, 41.9906), (-70.1989, 41.9901),\n    (-70.1977, 41.9896), (-70.1965, 41.9891), (-70.1953, 41.9886),\n    (-70.1941, 41.9881), (-70.1929, 41.9876), (-70.1917, 41.9871),\n    (-70.1905, 41.9866), (-70.1893, 41.9861), (-70.1881, 41.9856),\n    (-70.1869, 41.9851), (-70.1857, 41.9846), (-70.1845, 41.9841),\n    (-70.1833, 41.9836), (-70.1821, 41.9831), (-70.1809, 41.9826),\n    (-70.1797, 41.9821), (-70.1785, 41.9816), (-70.1773, 41.9811),\n    (-70.1761, 41.9806), (-70.1749, 41.9801), (-70.1737, 41.9796),\n    (-70.1725, 41.9791), (-70.1713, 41.9786), (-70.1701, 41.9781),\n    (-70.1689, 41.9776), (-70.1677, 41.9771), (-70.1665, 41.9766),\n    (-70.1653, 41.9761), (-70.1641, 41.9756), (-70.1629, 41.9751),\n    (-70.1617, 41.9746), (-70.1605, 41.9741), (-70.1593, 41.9736),\n    (-70.1581, 41.9731), (-70.1569, 41.9726), (-70.1557, 41.9721),\n    (-70.1545, 41.9716), (-70.1533, 41.9711), (-70.1521, 41.9706),\n    (-70.1509, 41.9701), (-70.1497, 41.9696), (-70.1485, 41.9691),\n    (-70.1473, 41.9686), (-70.1461, 41.9681), (-70.1449, 41.9676),\n    (-70.1437, 41.9671), (-70.1425, 41.9666), (-70.1413, 41.9661),\n    (-70.1401, 41.9656), (-70.1389, 41.9651), (-70.1377, 41.9646),\n    (-70.1365, 41.9641), (-70.1353, 41.9636), (-70.1341, 41.9631),\n    (-70.1329, 41.9626), (-70.1317, 41.9621), (-70.1305, 41.9616),\n    (-70.1293, 41.9611), (-70.1281, 41.9606), (-70.1269, 41.9601),\n    (-70.1257, 41.9596), (-70.1245, 41.9591), (-70.1233, 41.9586),\n    (-70.1221, 41.9581), (-70.1209, 41.9576), (-70.1197, 41.9571),\n    (-70.1185, 41.9566), (-70.1173, 41.9561), (-70.1161, 41.9556),\n    (-70.1149, 41.9551), (-70.1137, 41.9546), (-70.1125, 41.9541),\n    (-70.1113, 41.9536), (-70.1101, 41.9531), (-70.1089, 41.9526),\n    (-70.1077, 41.9521), (-70.1065, 41.9516), (-70.1053, 41.9511),\n    (-70.1041, 41.9506), (-70.1029, 41.9501), (-70.1017, 41.9496),\n    (-70.1005, 41.9491), (-70.0993, 41.9486), (-70.0981, 41.9481),\n    (-70.0969, 41.9476), (-70.0957, 41.9471), (-70.0945, 41.9466),\n    (-70.0933, 41.9461), (-70.0921, 41.9456), (-70.0909, 41.9451),\n    (-70.0897, 41.9446), (-70.0885, 41.9441), (-70.0873, 41.9436),\n    (-70.0861, 41.9431), (-70.0849, 41.9426), (-70.0837, 41.9421),\n    (-70.0825, 41.9416), (-70.0813, 41.9411), (-70.0801, 41.9406),\n    (-70.0789, 41.9401), (-70.0777, 41.9396), (-70.0765, 41.9391),\n    (-70.0753, 41.9386), (-70.0741, 41.9381), (-70.0729, 41.9376),\n    (-70.0717, 41.9371), (-70.0705, 41.9366), (-70.0693, 41.9361),\n    (-70.0681, 41.9356), (-70.0669, 41.9351), (-70.0657, 41.9346),\n    (-70.0645, 41.9341), (-70.0633, 41.9336), (-70.0621, 41.9331),\n    (-70.0609, 41.9326), (-70.0597, 41.9321), (-70.0585, 41.9316),\n    (-70.0573, 41.9311), (-70.0561, 41.9306), (-70.0549, 41.9301),\n    (-70.0537, 41.9296), (-70.0525, 41.9291), (-70.0513, 41.9286),\n    (-70.0501, 41.9281), (-70.0489, 41.9276), (-70.0477, 41.9271),\n    (-70.0465, 41.9266), (-70.0453, 41.9261), (-70.0441, 41.9256),\n    (-70.0429, 41.9251), (-70.0417, 41.9246), (-70.0405, 41.9241),\n    (-70.0393, 41.9236), (-70.0381, 41.9231), (-70.0369, 41.9226),\n    (-70.0357, 41.9221), (-70.0345, 41.9216), (-70.0333, 41.9211),\n    (-70.0321, 41.9206), (-70.0309, 41.9201), (-70.0297, 41.9196),\n    (-70.0285, 41.9191), (-70.0273, 41.9186), (-70.0261, 41.9181),\n    (-70.0249, 41.9176), (-70.0237, 41.9171), (-70.0225, 41.9166),\n    (-70.0213, 41.9161), (-70.0201, 41.9156), (-70.0189, 41.9151),\n    (-70.0177, 41.9146), (-70.0165, 41.9141), (-70.0153, 41.9136),\n    (-70.0141, 41.9131), (-70.0129, 41.9126), (-70.0117, 41.9121),\n    (-70.0105, 41.9116), (-70.0093, 41.9111), (-70.0081, 41.9106),\n    (-70.0069, 41.9101), (-70.0057, 41.9096), (-70.0045, 41.9091),\n    (-70.0033, 41.9086), (-70.0021, 41.9081), (-70.0009, 41.9076),\n    (-69.9997, 41.9071), (-69.9985, 41.9066), (-69.9973, 41.9061),\n    (-69.9961, 41.9056), (-69.9949, 41.9051), (-69.9937, 41.9046),\n    (-69.9925, 41.9041), (-69.9913, 41.9036), (-69.9901, 41.9031),\n    (-69.9889, 41.9026), (-69.9877, 41.9021), (-69.9865, 41.9016),\n    (-69.9853, 41.9011), (-69.9841, 41.9006), (-69.9829, 41.9001),\n    (-69.9817, 41.8996), (-69.9805, 41.8991), (-69.9793, 41.8986),\n    (-69.9781, 41.8981), (-69.9769, 41.8976), (-69.9757, 41.8971),\n    (-69.9745, 41.8966), (-69.9733, 41.8961), (-69.9721, 41.8956),\n    (-69.9709, 41.8951), (-69.9697, 41.8946), (-69.9685, 41.8941),\n    (-69.9673, 41.8936), (-69.9661, 41.8931), (-69.9649, 41.8926),\n    (-69.9637, 41.8921), (-69.9625, 41.8916), (-69.9613, 41.8911),\n    (-69.9601, 41.8906), (-69.9589, 41.8901), (-69.9577, 41.8896),\n    (-69.9565, 41.8891), (-69.9553, 41.8886), (-69.9541, 41.8881),\n    (-69.9529, 41.8876), (-69.9517, 41.8871), (-69.9505, 41.8866),\n    (-69.9493, 41.8861), (-69.9481, 41.8856), (-69.9469, 41.8851),\n    (-69.9457, 41.8846), (-69.9445, 41.8841), (-69.9433, 41.8836),\n    (-69.9421, 41.8831), (-69.9409, 41.8826), (-69.9397, 41.8821),\n    (-69.9385, 41.8816), (-69.9373, 41.8811), (-69.9361, 41.8806),\n    (-69.9349, 41.8801), (-69.9337, 41.8796), (-69.9325, 41.8791),\n    (-69.9313, 41.8786), (-69.9301, 41.8781), (-69.9289, 41.8776),\n    (-69.9277, 41.8771), (-69.9265, 41.8766), (-69.9253, 41.8761),\n    (-69.9241, 41.8756), (-69.9229, 41.8751), (-69.9217, 41.8746),\n    (-69.9205, 41.8741), (-69.9193, 41.8736), (-69.9181, 41.8731),\n    (-69.9169, 41.8726), (-69.9157, 41.8721), (-69.9145, 41.8716),\n    (-69.9133, 41.8711), (-69.9121, 41.8706), (-69.9109, 41.8701),\n    (-69.9097, 41.8696), (-69.9085, 41.8691), (-69.9073, 41.8686),\n    (-69.9061, 41.8681), (-69.9049, 41.8676), (-69.9037, 41.8671),\n    (-69.9025, 41.8666), (-69.9013, 41.8661), (-69.9001, 41.8656),\n    (-69.8989, 41.8651), (-69.8977, 41.8646), (-69.8965, 41.8641),\n    (-69.8953, 41.8636), (-69.8941, 41.8631), (-69.8929, 41.8626),\n    (-69.8917, 41.8621), (-69.8905, 41.8616), (-69.8893, 41.8611),\n    (-69.8881, 41.8606), (-69.8869, 41.8601), (-69.8857, 41.8596),\n    (-69.8845, 41.8591), (-69.8833, 41.8586), (-69.8821, 41.8581),\n    (-69.8809, 41.8576), (-69.8797, 41.8571), (-69.8785, 41.8566),\n    (-69.8773, 41.8561), (-69.8761, 41.8556), (-69.8749, 41.8551),\n    (-69.8737, 41.8546), (-69.8725, 41.8541), (-69.8713, 41.8536),\n    (-69.8701, 41.8531), (-69.8689, 41.8526), (-69.8677, 41.8521),\n    (-69.8665, 41.8516), (-69.8653, 41.8511), (-69.8641, 41.8506),\n    (-69.8629, 41.8501), (-69.8617, 41.8496), (-69.8605, 41.8491),\n    (-69.8593, 41.8486), (-69.8581, 41.8481), (-69.8569, 41.8476),\n    (-69.8557, 41.8471), (-69.8545, 41.8466), (-69.8533, 41.8461),\n    (-69.8521, 41.8456), (-69.8509, 41.8451), (-69.8497, 41.8446),\n    (-69.8485, 41.8441), (-69.8473, 41.8436), (-69.8461, 41.8431),\n    (-69.8449, 41.8426), (-69.8437, 41.8421), (-69.8425, 41.8416),\n    (-69.8413, 41.8411), (-69.8401, 41.8406), (-69.8389, 41.8401),\n    (-69.8377, 41.8396), (-69.8365, 41.8391), (-69.8353, 41.8386),\n    (-69.8341, 41.8381), (-69.8329, 41.8376), (-69.8317, 41.8371),\n    (-69.8305, 41.8366), (-69.8293, 41.8361), (-69.8281, 41.8356),\n    (-69.8269, 41.8351), (-69.8257, 41.8346), (-69.8245, 41.8341),\n    (-69.8233, 41.8336), (-69.8221, 41.8331), (-69.8209, 41.8326),\n    (-69.8197, 41.8321), (-69.8185, 41.8316), (-69.8173, 41.8311),\n    (-69.8161, 41.8306), (-69.8149, 41.8301), (-69.8137, 41.8296),\n    (-69.8125, 41.8291), (-69.8113, 41.8286), (-69.8101, 41.8281),\n    (-69.8089, 41.8276), (-69.8077, 41.8271), (-69.8065, 41.8266),\n    (-69.8053, 41.8261), (-69.8041, 41.8256), (-69.8029, 41.8251),\n    (-69.8017, 41.8246), (-69.8005, 41.8241), (-69.7993, 41.8236),\n    (-69.7981, 41.8231), (-69.7969, 41.8226), (-69.7957, 41.8221),\n    (-69.7945, 41.8216), (-69.7933, 41.8211), (-69.7921, 41.8206),\n    (-69.7909, 41.8201), (-69.7897, 41.8196), (-69.7885, 41.8191),\n    (-69.7873, 41.8186), (-69.7861, 41.8181), (-69.7849, 41.8176),\n    (-69.7837, 41.8171), (-69.7825, 41.8166), (-69.7813, 41.8161),\n    (-69.7801, 41.8156), (-69.7789, 41.8151), (-69.7777, 41.8146),\n    (-69.7765, 41.8141), (-69.7753, 41.8136), (-69.7741, 41.8131),\n    (-69.7729, 41.8126), (-69.7717, 41.8121), (-69.7705, 41.8116),\n    (-69.7693, 41.8111), (-69.7681, 41.8106), (-69.7669, 41.8101),\n    (-69.7657, 41.8096), (-69.7645, 41.8091), (-69.7633, 41.8086),\n    (-69.7621, 41.8081), (-69.7609, 41.8076), (-69.7597, 41.8071),\n    (-69.7585, 41.8066), (-69.7573, 41.8061), (-69.7561, 41.8056),\n    (-69.7549, 41.8051), (-69.7537, 41.8046), (-69.7525, 41.8041),\n    (-69.7513, 41.8036), (-69.7501, 41.8031), (-69.7489, 41.8026),\n    (-69.7477, 41.8021), (-69.7465, 41.8016), (-69.7453, 41.8011),\n    (-69.7441, 41.8006), (-69.7429, 41.8001), (-69.7417, 41.7996),\n    (-69.7405, 41.7991), (-69.7393, 41.7986), (-69.7381, 41.7981),\n    (-69.7369, 41.7976), (-69.7357, 41.7971), (-69.7345, 41.7966),\n    (-69.7333, 41.7961), (-69.7321, 41.7956), (-69.7309, 41.7951),\n    (-69.7297, 41.7946), (-69.7285, 41.7941), (-69.7273, 41.7936),\n    (-69.7261, 41.7931), (-69.7249, 41.7926), (-69.7237, 41.7921),\n    (-69.7225, 41.7916), (-69.7213, 41.7911), (-69.7201, 41.7906),\n    (-69.7189, 41.7901), (-69.7177, 41.7896), (-69.7165, 41.7891),\n    (-69.7153, 41.7886), (-69.7141, 41.7881), (-69.7129, 41.7876),\n    (-69.7117, 41.7871), (-69.7105, 41.7866), (-69.7093, 41.7861),\n    (-69.7081, 41.7856), (-69.7069, 41.7851), (-69.7057, 41.7846),\n    (-69.7045, 41.7841), (-69.7033, 41.7836), (-69.7021, 41.7831),\n    (-69.7009, 41.7826), (-69.6997, 41.7821), (-69.6985, 41.7816),\n    (-69.6973, 41.7811), (-69.6961, 41.7806), (-69.6949, 41.7801),\n    (-69.6937, 41.7796), (-69.6925, 41.7791), (-69.6913, 41.7786),\n    (-69.6901, 41.7781), (-69.6889, 41.7776), (-69.6877, 41.7771),\n    (-69.6865, 41.7766), (-69.6853, 41.7761), (-69.6841, 41.7756),\n    (-69.6829, 41.7751), (-69.6817, 41.7746), (-69.6805, 41.7741),\n    (-69.6793, 41.7736), (-69.6781, 41.7731), (-69.6769, 41.7726),\n    (-69.6757, 41.7721), (-69.6745, 41.7716), (-69.6733, 41.7711),\n    (-69.6721, 41.7706), (-69.6709, 41.7701), (-69.6697, 41.7696),\n    (-69.6685, 41.7691), (-69.6673, 41.7686), (-69.6661, 41.7681),\n    (-69.6649, 41.7676), (-69.6637, 41.7671), (-69.6625, 41.7666),\n    (-69.6613, 41.7661), (-69.6601, 41.7656), (-69.6589, 41.7651),\n    (-69.6577, 41.7646), (-69.6565, 41.7641), (-69.6553, 41.7636),\n    (-69.6541, 41.7631), (-69.6529, 41.7626), (-69.6517, 41.7621),\n    (-69.6505, 41.7616), (-69.6493, 41.7611), (-69.6481, 41.7606),\n    (-69.6469, 41.7601), (-69.6457, 41.7596), (-69.6445, 41.7591),\n    (-69.6433, 41.7586), (-69.6421, 41.7581), (-69.6409, 41.7576),\n    (-69.6397, 41.7571), (-69.6385, 41.7566), (-69.6373, 41.7561),\n    (-69.6361, 41.7556), (-69.6349, 41.7551), (-69.6337, 41.7546),\n    (-69.6325, 41.7541), (-69.6313, 41.7536), (-69.6301, 41.7531),\n    (-69.6289, 41.7526), (-69.6277, 41.7521), (-69.6265, 41.7516),\n    (-69.6253, 41.7511), (-69.6241, 41.7506), (-69.6229, 41.7501),\n    (-69.6217, 41.7496), (-69.6205, 41.7491), (-69.6193, 41.7486),\n    (-69.6181, 41.7481), (-69.6169, 41.7476), (-69.6157, 41.7471),\n    (-69.6145, 41.7466), (-69.6133, 41.7461), (-69.6121, 41.7456),\n    (-69.6109, 41.7451), (-69.6097, 41.7446), (-69.6085, 41.7441),\n    (-69.6073, 41.7436), (-69.6061, 41.7431), (-69.6049, 41.7426),\n    (-69.6037, 41.7421), (-69.6025, 41.7416), (-69.6013, 41.7411),\n    (-69.6001, 41.7406), (-69.5989, 41.7401), (-69.5977, 41.7396),\n    (-69.5965, 41.7391), (-69.5953, 41.7386), (-69.5941, 41.7381),\n    (-69.5929, 41.7376), (-69.5917, 41.7371), (-69.5905, 41.7366),\n    (-69.5893, 41.7361), (-69.5881, 41.7356), (-69.5869, 41.7351),\n    (-69.5857, 41.7346), (-69.5845, 41.7341), (-69.5833, 41.7336),\n    (-69.5821, 41.7331), (-69.5809, 41.7326), (-69.5797, 41.7321),\n    (-69.5785, 41.7316), (-69.5773, 41.7311), (-69.5761, 41.7306),\n    (-69.5749, 41.7301), (-69.5737, 41.7296), (-69.5725, 41.7291),\n    (-69.5713, 41.7286), (-69.5701, 41.7281), (-69.5689, 41.7276),\n    (-69.5677, 41.7271), (-69.5665, 41.7266), (-69.5653, 41.7261),\n    (-69.5641, 41.7256), (-69.5629, 41.7251), (-69.5617, 41.7246),\n    (-69.5605, 41.7241), (-69.5593, 41.7236), (-69.5581, 41.7231),\n    (-69.5569, 41.7226), (-69.5557, 41.7221), (-69.5545, 41.7216),\n    (-69.5533, 41.7211), (-69.5521, 41.7206), (-69.5509, 41.7201),\n    (-69.5497, 41.7196), (-69.5485, 41.7191), (-69.5473, 41.7186),\n    (-69.5461, 41.7181), (-69.5449, 41.7176), (-69.5437, 41.7171),\n    (-69.5425, 41.716"
  },
  {
    "query": "find commercial parcels larger than 8000 square feet in census tracts with at least 90% of residents aged 18-64.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to EPSG:26986 for accurate spatial operations\nparcels = parcels.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter commercial parcels\ncommercial_parcels = parcels[parcels['lu'].astype(str).str.startswith('3')]\n\n# Filter parcels larger than 8000 square feet\nlarge_commercial_parcels = commercial_parcels[commercial_parcels['land_area'] > 8000]\n\n# Filter census tracts with at least 90% of residents aged 18-64\ncensus_filtered = census[census['pct_18_64'] >= 90]\n\n# Spatial join to find parcels in the filtered census tracts\njoined = gpd.sjoin(large_commercial_parcels, census_filtered, how='inner', predicate='within')\n\n# Get unique parcel IDs\nresult_ids = sorted(joined['ml'].unique())\n\n# Print the result\nprint(result_ids)"
  },
  {
    "query": "find commercial parcels that are between 5000-10000 square feet, within 500 meters of a subway station, and have no more than 1 competitor within 500 meters.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter commercial parcels\ncommercial_parcels = parcels[parcels['lu'].str.startswith('3')]\n\n# Filter by size\nsize_filtered = commercial_parcels[\n    (commercial_parcels['land_area'] >= 5000) & \n    (commercial_parcels['land_area'] <= 10000)\n]\n\n# Identify subway stations\nsubway_stations = poi[poi['category'] == 'subway_station']\n\n# Buffer for proximity to subway stations\nsubway_buffer = subway_stations.geometry.buffer(500)\nsubway_union = gpd.GeoSeries(subway_buffer).unary_union\n\n# Filter parcels within 500m of a subway station\nnear_subway = size_filtered[size_filtered.geometry.intersects(subway_union)]\n\n# Identify competitors (other commercial parcels)\ncompetitors = commercial_parcels[commercial_parcels['ml'].isin(near_subway['ml']) == False]\n\n# Function to count competitors within 500m\ndef count_competitors(parcel_geom, competitors_geom):\n    buffer = parcel_geom.buffer(500)\n    return sum(1 for geom in competitors_geom if buffer.intersects(geom))\n\n# Filter parcels with no more than 1 competitor within 500m\ncompetitors_geom = competitors.geometry.tolist()\nfinal_parcels = [\n    parcel for parcel in near_subway.itertuples()\n    if count_competitors(parcel.geometry, competitors_geom) <= 1\n]\n\n# Extract and sort parcel IDs\nfinal_ids = sorted([parcel.ml for parcel in final_parcels])\n\n# Print results\nprint(final_ids)"
  },
  {
    "query": "find parcels that are zoned for mixed-use, within 400 meters of public transportation, and at least 200 meters away from industrial areas.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Define zoning codes for mixed-use\nmixed_use_codes = ['MXD', 'BUS', 'OFF', 'COM']\n\n# Filter for mixed-use parcels\nmixed_use_parcels = parcels[parcels['zoning'].isin(mixed_use_codes)]\n\n# Define public transportation POI categories\ntransit_categories = ['subway', 'bus_stop', 'train_station']\n\n# Filter for public transportation POIs\ntransit_poi = poi[poi['category'].isin(transit_categories)]\n\n# Buffer transit POIs by 400 meters\ntransit_buffer = transit_poi.geometry.buffer(400)\ntransit_union = gpd.GeoSeries(transit_buffer).unary_union\n\n# Find parcels within 400 meters of public transportation\nnear_transit_parcels = mixed_use_parcels[mixed_use_parcels.geometry.intersects(transit_union)]\n\n# Define industrial zoning codes\nindustrial_codes = ['IND', 'MAN']\n\n# Filter for industrial parcels\nindustrial_parcels = parcels[parcels['zoning'].isin(industrial_codes)]\n\n# Buffer industrial parcels by 200 meters\nindustrial_buffer = industrial_parcels.geometry.buffer(200)\nindustrial_union = gpd.GeoSeries(industrial_buffer).unary_union\n\n# Find parcels at least 200 meters away from industrial areas\nfinal_parcels = near_transit_parcels[~near_transit_parcels.geometry.intersects(industrial_union)]\n\n# Sort by parcel ID (ml column)\nfinal_parcels_sorted = final_parcels.sort_values('ml')\n\n# Extract parcel IDs\nparcel_ids = final_parcels_sorted['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "find parcels that are either commercial places within 100m of harvard square or residential larger than 5000 square feet and within 200m of 50 restaurants.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Define Harvard Square location\nharvard_square = Point(-71.1189, 42.3736)\nharvard_square_proj = gpd.GeoSeries([harvard_square], crs='EPSG:4326').to_crs(epsg=26986).iloc[0]\n\n# Define criteria\ncommercial_codes = ['031', '032', '033', '034', '035', '036', '037', '038', '039', '040', '041', '042', '043', '044', '045', '046', '047', '048', '049', '050', '051', '052', '053', '054', '055', '056', '057', '058', '059', '060', '061', '062', '063', '064', '065', '066', '067', '068', '069', '070', '071', '072', '073', '074', '075', '076', '077', '078', '079', '080', '081', '082', '083', '084', '085', '086', '087', '088', '089', '090', '091', '092', '093', '094', '095', '096', '097', '098', '099', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '253', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '281', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '292', '293', '294', '295', '296', '297', '298', '299', '300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '993', '994', '995', '996', '997', '998', '999', '1000', '1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1026', '1027', '1028', '1029', '1030', '1031', '1032', '1033', '1034', '1035', '1036', '1037', '1038', '1039', '1040', '1041', '1042', '1043', '1044', '1045', '1046', '1047', '1048', '1049', '1050', '1051', '1052', '1053', '1054', '1055', '1056', '1057', '1058', '1059', '1060', '1061', '1062', '1063', '1064', '1065', '1066', '1067', '1068', '1069', '1070', '1071', '1072', '1073', '1074', '1075', '1076', '1077', '1078', '1079', '1080', '1081', '1082', '1083', '1084', '1085', '1086', '1087', '1088', '1089', '1090', '1091', '1092', '1093', '1094', '1095', '1096', '1097', '1098', '1099', '1100', '1101', '1102', '1103', '1104', '1105', '1106', '1107', '1108', '1109', '1110', '1111', '1112', '1113', '1114', '1115', '1116', '1117', '1118', '1119', '1120', '1121', '1122', '1123', '1124', '1125', '1126', '1127', '1128', '1129', '1130', '1131', '1132', '1133', '1134', '1135', '1136', '1137', '1138', '1139', '1140', '1141', '1142', '1143', '1144', '1145', '1146', '1147', '1148', '1149', '1150', '1151', '1152', '1153', '1154', '1155', '1156', '1157', '1158', '1159', '1160', '1161', '1162', '1163', '1164', '1165', '1166', '1167', '1168', '1169', '1170', '1171', '1172', '1173', '1174', '1175', '1176', '1177', '1178', '1179', '1180', '1181', '1182', '1183', '1184', '1185', '1186', '1187', '1188', '1189', '1190', '1191', '1192', '1193', '1194', '1195', '1196', '1197', '1198', '1199', '1200', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1219', '1220', '1221', '1222', '1223', '1224', '1225', '1226', '1227', '1228', '1229', '1230', '1231', '1232', '1233', '1234', '1235', '1236', '1237', '1238', '1239', '1240', '1241', '1242', '1243', '1244', '1245', '1246', '1247', '1248', '1249', '1250', '1251', '1252', '1253', '1254', '1255', '1256', '1257', '1258', '1259', '1260', '1261', '1262', '1263', '1264', '1265', '1266', '1267', '1268', '1269', '1270', '1271', '1272', '1273', '1274', '1275', '1276', '1277', '1278', '1279', '1280', '1281', '1282', '1283', '1284', '1285', '1286', '1287', '1288', '1289', '1290', '1291', '1292', '1293', '1294', '1295', '1296', '1297', '1298', '1299', '1300', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1324', '1325', '1326', '1327', '1328', '1329', '1330', '1331', '1332', '1333', '1334', '1335', '1336', '1337', '1338', '1339', '1340', '1341', '1342', '1343', '1344', '1345', '1346', '1347', '1348', '1349', '1350', '1351', '1352', '1353', '1354', '1355', '1356', '1357', '1358', '1359', '1360', '1361', '1362', '1363', '1364', '1365', '1366', '1367', '1368', '1369', '1370', '1371', '1372', '1373', '1374', '1375', '1376', '1377', '1378', '1379', '1380', '1381', '1382', '1383', '1384', '1385', '1386', '1387', '1388', '1389', '1390', '1391', '1392', '1393', '1394', '1395', '1396', '1397', '1398', '1399', '1400', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1439', '1440', '1441', '1442', '1443', '1444', '1445', '1446', '1447', '1448', '1449', '1450', '1451', '1452', '1453', '1454', '1455', '1456', '1457', '1458', '1459', '1460', '1461', '1462', '1463', '1464', '1465', '1466', '1467', '1468', '1469', '1470', '1471', '1472', '1473', '1474', '1475', '1476', '1477', '1478', '1479', '1480', '1481', '1482', '1483', '1484', '1485', '1486', '1487', '1488', '1489', '1490', '1491', '1492', '1493', '1494', '1495', '1496', '1497', '1498', '1499', '1500', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1510', '1511', '1512', '1513', '1514', '1515', '1516', '1517', '1518', '1519', '1520', '1521', '1522', '1523', '1524', '1525', '1526', '1527', '1528', '1529', '1530', '1531', '1532', '1533', '1534', '1535', '1536', '1537', '1538', '1539', '1540', '1541', '1542', '1543', '1544', '1545', '1546', '1547', '1548', '1549', '1550', '1551', '1552', '1553', '1554', '1555', '1556', '1557', '1558', '1559', '1560', '1561', '1562', '1563', '1564', '1565', '1566', '1567', '1568', '1569', '1570', '1571', '1572', '1573', '1574', '1575', '1576', '1577', '1578', '1579', '1580', '1581', '1582', '1583', '1584', '1585', '1586', '1587', '1588', '1589', '1590', '1591', '1592', '1593', '1594', '1595', '1596', '1597', '1598', '1599', '1600', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1616', '1617', '1618', '1619', '1620', '1621', '1622', '1623', '1624', '1625', '1626', '1627', '1628', '1629', '1630', '1631', '1632', '1633', '1634', '1635', '1636', '1637', '1638', '1639', '1640', '1641', '1642', '1643', '1644', '1645', '1646', '1647', '1648', '1649', '1650', '1651', '1652', '1653', '1654', '1655', '1656', '1657', '1658', '1659', '1660', '1661', '1662', '1663', '1664', '1665', '1666', '1667', '1668', '1669', '1670', '1671', '1672', '1673', '1674', '1675', '1676', '1677', '1678', '1679', '1680', '1681', '1682', '1683', '1684', '1685', '1686', '1687', '1688', '1689', '1690', '1691', '1692', '1693', '1694', '1695', '1696', '1697', '1698', '1699', '1700', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1750', '1751', '1752', '1753', '1754', '1755', '1756', '1757', '1758', '1759', '1760', '1761', '1762', '1763', '1764', '1765', '1766', '1767', '1768', '1769', '1770', '1771', '1772', '1773', '1774', '1775', '1776', '1777', '1778', '1779', '1780', '1781', '1782', '1783', '1784', '1785', '1786', '1787', '1788', '1789', '1790', '1791', '1792', '1793', '1794', '1795', '1796', '1797', '1798', '1799', '1800', '1801', '1802', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1811', '1812', '1813', '1814', '1815', '1816', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1826', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1835', '1836', '1837', '1838', '1839', '1840', '1841', '1842', '1843', '1844', '1845', '1846', '1847', '1848', '1849', '1850', '1851', '1852', '1853', '1854', '1855', '1856', '1857', '1858', '1859', '1860', '1861', '1862', '1863', '1864', '1865', '1866', '1867', '1868', '1869', '1870', '1871', '1872', '1873', '1874', '1875', '1876', '1877', '1878', '1879', '1880', '1881', '1882', '1883', '1884', '1885', '1886', '1887', '1888', '1889', '1890', '1891', '1892', '1893', '1894', '1895', '1896', '1897', '1898', '1899', '1900', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '1919', '1920', '1921', '1922', '1923', '1924', '1925', '1926', '1927', '1928', '1929', '1930', '1931', '1932', '1933', '1934', '1935', '1936', '1937', '1938', '1939', '1940', '1941', '1942', '1943', '1944', '1945', '1946', '1947', '1948', '1949', '1950', '1951', '1952', '1953', '1954', '1955', '1956', '1957', '1958', '1959', '1960', '1961', '1962', '1963', '1964', '1965', '1966', '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975', '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984', '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992', '1993', '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024', '2025', '2026', '2027', '2028', '2029', '2030', '2031', '2032', '2033', '2034', '2035', '2036', '2037', '2038', '2039', '2040', '2041', '2042', '2043', '2044', '2045', '2046', '2047', '2048', '2049', '2050', '2051', '2052', '2053', '2054', '2055', '2056', '2057', '2058', '2059', '2060', '2061', '2062', '2063', '2064', '2065', '2066', '2067', '2068', '2069', '2070', '2071', '2072', '2073', '2074', '2075', '2076', '2077', '2078', '2079', '2080', '2081', '2082', '2083', '2084', '2085', '2086', '2087', '2088', '2089', '2090', '2091', '2092', '2093', '2094', '2095', '2096', '2097', '2098', '2099', '2100', '2101', '2102', '2103', '2104', '2105', '2106', '2107', '2108', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2116', '2117', '2118', '2119', '2120', '2121', '2122', '2123', '2124', '2125', '2126', '2127', '2128', '2129', '2130', '2131', '2132', '2133', '2134', '2135', '2136', '2137', '2138', '2139', '2140', '2141', '2142', '2143', '2144', '2145', '2146', '2147', '2148', '2149', '2150', '2151', '2152', '2153', '2154', '2155', '2156', '2157', '2158', '2159', '2160', '2161', '2162', '2163', '2164', '2165', '2166', '2167', '2168', '2169', '2170', '2171', '2172', '2173', '2174', '2175', '2176', '2177', '2178', '2179', '2180', '2181', '2182', '2183', '2184', '2185', '2186', '2187', '2188', '2189', '2190', '2191', '2192', '2193', '2194', '2195', '2196', '2197', '2198', '2199', '2200', '2201', '2202', '2203', '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213', '2214', '2215', '2216', '2217', '2218', '2219', '2220', '2221', '2222', '2223', '2224', '2225', '2226', '2227', '2228', '2229', '2230', '2231', '2232', '2233', '2234', '2235', '2236', '2237', '2238', '2239', '2240', '2241', '2242', '2243', '2244', '2245', '2246', '2247', '2248', '2249', '2250', '2251', '2252', '2253', '2254', '2255', '2256', '2257', '2258', '2259', '2260', '2261', '2262', '2263', '2264', '2265', '2266', '2267', '2268', '2269', '2270', '2271', '2272', '2273', '2274', '2275', '2276', '2277', '2278', '2279', '2280', '2281', '2282', '2283', '2284', '2285', '2286', '2287', '2288', '2289', '2290', '2291', '2292', '2293', '2294', '2295', '2296', '2297', '2298', '2299', '2300', '2301', '2302', '2303', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2311', '2312', '2313', '2314', '2315', '2316', '2317', '2318', '2319', '2320', '2321', '2322', '2323', '2324', '2325', '2326', '2327', '2328', '2329', '2330', '2331', '2332', '2333', '2334', '2335', '2336', '2337', '2338', '2339', '2340', '2341', '2342', '2343', '2344', '2345', '2346', '2347', '2348', '2349', '2350', '2351', '2352', '2353', '2354', '2355', '2356', '2357', '2358', '2359', '2360', '2361', '2362', '2363', '2364', '2365', '2366', '2367', '2368', '2369', '2370', '2371', '2372', '2373', '2374', '2375', '2376', '2377', '2378', '2379', '2380', '2381', '2382', '2383', '2384', '2385', '2386', '2387', '2388', '2389', '2390', '2391', '2392', '2393', '2394', '2395', '2396', '2397', '2398', '2399', '2400', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2425', '2426', '2427', '2428', '2429', '2430', '2431', '2432', '2433', '2434', '2435', '2436', '2437', '2438', '2439', '2440', '2441', '2442', '2443', '2444', '2445', '2446', '2447', '2448', '2449', '2450', '2451', '2452', '2453', '2454', '2455', '2456', '2457', '2458', '2459', '2460', '2461', '2462', '2463', '2464', '2465', '2466', '2467', '2468', '2469', '2470', '2471', '2472', '2473', '2474', '2475', '2476', '2477', '2478', '2479', '2480', '2481', '2482', '2483', '2484', '2485', '2486', '2487', '2488', '2489', '2490', '2491', '2492', '2493', '2494', '2495', '2496', '2497', '2498', '2499', '2500', '2501', '2502', '2503', '2504', '2505', '2506', '2507', '2508', '2509', '2510', '2511', '2512', '2513', '2514', '2515', '2516', '2517', '2518', '2519', '2520', '2521', '2522', '2523', '2524', '2525', '2526', '2527', '2528', '2529', '2530', '2531', '2532', '2533', '2534', '2535', '2536', '2537', '2538', '2539', '2540', '2541', '2542', '2543', '2544', '2545', '2546', '2547', '2548', '2549', '2550', '2551', '2552', '2553', '2554', '2555', '2556', '2557', '2558', '2559', '2560', '2561', '2562', '2563', '2564', '2565', '2566', '2567', '2568', '2569', '2570', '2571', '2572', '2573', '2574', '2575', '2576', '2577', '2578', '2579', '2580', '2581', '2582', '2583', '2584', '2585', '2586', '2587', '2588', '2589', '2590', '2591', '2592', '2593', '2594', '2595', '2596', '2597', '2598', '2599', '2600', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2615', '2616', '2617', '2618', '2619', '2620', '2621', '2622', '2623', '2624', '2625', '2626', '2627', '2628', '2629', '2630', '2631', '2632', '2633', '2634', '2635', '2636', '2637', '2638', '2639', '2640', '2641', '2642', '2643', '2644', '2645', '2646', '2647', '2648', '2649', '2650', '2651', '2652', '2653', '2654', '2655', '2656', '2657', '2658', '2659', '2660', '2661', '2662', '2663', '2664', '2665', '2666', '2667', '2668', '2669', '2670', '2671', '2672', '2673', '2674', '2675', '2676', '2677', '2678', '2679', '2680', '2681', '2682', '2683', '2684', '2685', '2686', '2687', '2688', '2689', '2690', '2691', '2692', '2693', '2694', '2695', '2696', '2697', '2698', '2699', '2700', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2719', '2720', '2721', '2722', '2723', '2724', '2725', '2726', '2727', '2728', '2729', '2730', '2731', '2732', '2733', '2734', '2735', '2736', '2737', '2738', '2739', '2740', '2741', '2742', '2743', '2744', '2745', '2746', '2747', '2748', '2749', '2750', '2751', '2752', '2753', '2754', '2755', '2756', '2757', '2758', '2759', '2760', '2761', '2762', '2763', '2764', '2765', '2766', '2767', '2768', '2769', '2770', '2771', '2772', '2773', '2774', '2775', '2776', '2777', '2778', '2779', '2780', '2781', '2782', '2783', '2784', '2785', '2786', '2787', '2788', '2789', '2790', '2791', '2792', '2793', '2794', '2795', '2796', '2797', '2798', '2799', '2800', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2823', '2824', '2825', '2826', '2827', '2828', '2829', '2830', '2831', '2832', '2833', '2834', '2835', '2836', '2837', '2838', '2839', '2840', '2841', '2842', '2843', '2844', '2845', '2846', '2847', '2848', '2849', '2850', '2851', '2852', '2853', '2854', '2855', '2856', '2857', '2858', '2859', '2860', '2861', '2862', '2863', '2864', '2865', '2866', '2867', '2868', '2869', '2870', '2871', '2872', '2873', '2874', '2875', '2876', '2877', '2878', '2879', '2880', '2881', '2882', '2883', '2884', '2885', '2886', '2887', '2888', '2889', '2890', '2891', '2892', '2893', '2894', '2895', '2896', '2897', '2898', '2899', '2900', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '2910', '2911', '2912', '2913', '2914', '2915', '2916', '2917', '2918', '2919', '2920', '2921', '2922', '2923', '2924', '2925', '2926', '2927', '2928', '2929', '2930', '2931', '2932', '2933', '2934', '2935', '2936', '2937', '2938', '2939', '2940', '2941', '2942', '2943', '2944', '2945', '2946', '2947', '2948', '2949', '2950', '2951', '2952', '2953', '2954', '2955', '2956', '2957', '2958', '2959', '2960', '2961', '2962', '2963', '2964', '2965', '2966', '2967', '2968', '2969', '2970', '2971', '2972', '2973', '2974', '2975', '2976', '2977', '2978', '2979', '2980', '2981', '2982', '2983', '2984', '2985', '2986', '2987', '2988', '2989', '2990', '2991', '2992', '2993', '2994', '2995', '2996', '2997', '2998', '2999', '3000', '3001', '3002', '3003', '3004', '3005', '3006', '3007', '3008', '3009', '3010', '3011', '3012', '3013', '3014', '3015', '3016', '3017', '3018', '3019', '3020', '3021', '3022', '3023', '3024', '3025', '3026', '3027', '3028', '3029', '3030', '3031', '3032', '3033', '3034', '3035', '3036', '3037', '3038', '3039', '3040', '3041', '3042', '3043', '3044', '3045', '3046', '3047', '3048', '3049', '3050', '3051', '3052', '3053', '3054', '3055', '3056', '3057', '3058', '3059', '3060', '3061', '3062', '3063', '3064', '3065', '3066', '3067', '3068', '3069', '3070', '3071', '3072', '3073', '3074', '3075', '3076', '3077', '3078', '3079', '3080', '3081', '3082', '3083', '3084', '3085', '3086', '3087', '3088', '3089', '3090', '3091', '3092', '3093', '3094', '3095', '3096', '3097', '3098', '3099', '3100', '3101', '3102', '3103', '3104', '3105', '3106', '3107', '3108', '3109', '3110', '3111', '3112', '3113', '3114', '3115', '3116', '3117', '3118', '3119', '3120', '3121', '3122', '3123', '3124', '3125', '3126', '3127', '3128', '3129', '3130', '3131', '3132', '3133', '3134', '3135', '3136', '3137', '3138', '3139', '3140', '3141', '3142', '3143', '3144', '3145', '3146', '3147', '3148', '3149', '3150', '3151', '3152', '3153', '3154', '3155', '3156', '3157', '3158', '3159', '3160', '3161', '3162', '3163', '3164', '3165', '3166', '3167', '3168', '3169', '3170', '3171', '3172', '3173', '3174', '3175', '3176', '3177', '3178', '3179', '3180', '3181', '3182', '3183', '3184', '3185', '3186', '3187', '3188', '3189', '3190', '3191', '3192', '3193', '3194', '3195', '3196', '3197', '3198', '3199', '3200', '3201', '3202', '3203', '3204', '3205', '3206', '3207', '3208', '3209', '3210', '3211', '3212', '3213', '3214', '3215', '3216', '3217', '3218', '3219', '3220', '3221', '3222', '3223', '3224', '3225', '3226', '3227', '3228', '3229', '3230', '3231', '3232', '3233', '3234', '3235', '3236', '3237', '3238', '3239', '3240', '3241', '3242', '3243', '3244', '3245', '3246', '3247', '3248', '3249', '3250', '3251', '3252', '3253', '3254', '3255', '3256', '3257', '3258', '3259', '3260', '3261', '3262', '3263', '3264', '3265', '3266', '3267', '3268', '3269', '3270', '3271', '3272', '3273', '3274', '3275', '3276', '3277', '3278', '3279', '3280', '3281', '3282', '3283', '3284', '3285', '3286', '3287', '3288', '3289', '3290', '3291', '3292', '3293', '3294', '3295', '3296', '3297', '3298', '3299', '3300', '3301', '3302', '3303', '3304', '3305', '3306', '3307', '3308', '3309', '3310', '3311', '3312', '3313', '3314', '3315', '3316', '3317', '3318', '3319', '3320', '3321', '3322', '3323', '3324', '3325', '3326', '3327', '3328', '3329', '3330', '3331', '3332', '3333', '3334', '3335', '3336', '3337', '3338', '3339', '3340', '3341', '3342', '3343', '3344', '3345', '3346', '3347', '3348', '3349', '3350', '3351', '3352', '3353', '3354', '3355', '3356', '3357', '3358', '3359', '3360', '3361', '3362', '3363', '3364', '3365', '3366', '3367', '3368', '3369', '3370', '3371', '3372', '3373', '3374', '3375', '3376', '3377', '3378', '3379', '3380', '3381', '3382', '3383', '3384', '3385', '3386', '3387', '3388', '3389', '3390', '3391', '3392', '3393', '3394', '3395', '3396', '3397', '3398', '3399', '3400', '3401', '3402', '3403', '3404', '3405', '3406', '3407', '3408', '3409', '3410', '3411', '3412', '3413', '3414', '3415', '3416', '3417', '3418', '3419', '3420', '3421', '3422', '3423', '3424', '3425', '3426', '3427', '3428', '3429', '3430', '3431', '3432', '3433', '3434', '3435', '3436', '3437', '3438', '3439', '3440', '3441', '3442', '3443', '3444', '3445', '3446', '3447', '3448', '3449', '3450', '3451', '3452', '3453', '3454', '3455', '3456', '3457', '3458', '3459', '3460', '3461', '3462', '3463', '3464', '3465', '3466', '3467', '3468', '3469', '3470', '3471', '3472', '3473', '3474', '3475', '3476', '3477', '3478', '3479', '3480', '3481', '3482', '3483', '3484', '3485', '3486', '3487', '3488', '3489', '3490', '3491', '3492', '3493', '3494', '3495', '3496', '3497', '3498', '3499', '3500', '3501', '3502', '3503', '3504', '3505', '3506', '3507', '3508', '3509', '3510', '3511', '3512', '3513', '3514', '3515', '3516', '3517', '3518', '3519', '3520', '3521', '3522', '3523', '3524', '3525', '3526', '3527', '3528', '3529', '3530', '3531', '3532', '3533', '3534', '3535', '3536', '3537', '3538', '3539', '3540', '3541', '3542', '3543', '3544', '3545', '3546', '3547', '3548', '3549', '3550', '3551', '3552', '3553', '3554', '3555', '3556', '3557', '3558', '3559', '3560', '3561', '3562', '3563', '3564', '3565', '3566', '3567', '3568', '3569', '3570', '3571', '3572', '3573', '3574', '3575', '3576', '3577', '3578', '3579', '3580', '3581', '3582', '3583', '3584', '3585', '3586', '3587', '3588', '3589', '3590', '3591', '3592', '3593', '3594', '3595', '3596', '3597', '3598', '3599', '3600', '3601', '3602', '3603', '3604', '3605', '3606', '3607', '3608', '3609', '3610', '3611', '3612', '3613', '3614', '3615', '3616', '3617', '3618', '3619', '3620', '3621', '3622', '3623', '3624', '3625', '3626', '3627', '3628', '3629', '3630', '3631', '3632', '3633', '3634', '3635', '3636', '3637', '3638', '3639', '3640', '3641', '3642', '3643', '3644', '3645', '3646', '3647', '3648', '3649', '3650', '3651', '3652', '3653', '3654', '3655', '3656', '3657', '3658', '3659', '3660', '3661', '3662', '3663', '3664', '3665', '3666', '3667', '3668', '3669', '3670', '3671', '3672', '3673', '3674', '3675', '3676', '3677', '3678', '3679', '3680', '3681', '3682', '3683', '3684', '3685', '3686', '3687', '3688', '3689', '3690', '3691', '3692', '3693', '3694', '3695', '3696', '3697', '3698', '3699', '3700', '3701', '3702', '3703', '3704', '3705', '3706', '3707', '3708', '3709', '3710', '3711', '3712', '3713', '3714', '3715', '3716', '3717', '3718', '3719', '3720', '3721', '3722', '3723', '3724', '3725', '3726', '3727', '3728', '3729', '3730', '3731', '3732', '3733', '3734', '3735', '3736', '3737', '3738', '3739', '3740', '3741', '3742', '3743', '3744', '3745', '3746', '3747', '3748', '3749', '3750', '3751', '3752', '3753', '3754', '3755', '3756', '3757', '3758', '3759', '3760', '3761', '3762', '3763', '3764', '3765', '3766', '3767', '3768', '3769', '3770', '3771', '3772', '3773', '3774', '3775', '3776', '3777', '3778', '3779', '3780', '3781', '3782', '3783', '3784', '3785', '3786', '3787', '3788', '3789', '3790', '3791', '3792', '3793', '3794', '3795', '3796', '3797', '3798', '3799', '3800', '3801', '3802', '3803', '3804', '3805', '3806', '3807', '3808', '3809', '3810', '3811', '3812', '3813', '3814', '3815', '3816', '3817', '3818', '3819', '3820', '3821', '3822', '3823', '3824', '3825', '3826', '3827', '3828', '3829', '3830', '3831', '3832', '3833', '3834', '3835', '3836', '3837', '3838', '3839', '3840', '3841', '3842', '3843', '3844', '3845', '3846', '3847', '3848', '3849', '3850', '3851', '3852', '3853', '3854', '3855', '3856', '3857', '3858', '3859', '3860', '3861', '3862', '3863', '3864', '3865', '3866', '3867', '3868', '3869', '3870', '3871', '3872', '3873', '3874', '3875', '3876', '3877', '3878', '3879', '3880', '3881', '3882', '3883', '3884', '3885', '3886', '3887', '3888', '3889', '3890', '3891', '3892', '3893', '3894', '3895', '3896', '3897', '3898', '3899', '3900', '3901', '3902', '3903', '3904', '3905', '3906', '3907', '3908', '3909', '3910', '3911', '3912', '3913', '3914', '3915', '3916', '3917', '3918', '3919', '3920', '3921', '3922', '3923', '3924', '3925', '3926', '3927', '3928', '3929', '3930', '3931', '3932', '3933', '3934', '3935', '3936', '3937', '3938', '3939', '3940', '3941', '3942', '3943', '3944', '3945', '3946', '3947', '3948', '3949', '3950', '3951', '3952', '3953', '3954', '3955', '3956', '3957', '3958', '3959', '3960', '3961', '3962', '3963', '3964', '3965', '3966', '3967', '3968', '3969', '3970', '3971', '3972', '3973', '3974', '3975', '3976', '3977', '3978', '3979', '3980', '3981', '3982', '3983', '3984', '3985', '3986', '3987', '3988', '3989', '3990', '3991', '3992', '3993', '3994', '3995', '3996', '3997', '3998', '3999', '4000', '4001', '4002', '4003', '4004', '4005', '4006', '4007', '4008', '4009', '4010', '4011', '4012', '4013', '4014', '4015', '4016', '4017', '4018', '4019', '4020', '4021', '4022', '4023', '4024', '4025', '4026', '4027', '4028', '4029', '4030', '4031', '4032', '4033', '4034', '4035', '4036', '4037', '4038', '4039', '4040', '4041', '4042', '4043', '4044', '4045', '4046', '4047', '4048', '4049', '4050', '4051', '4052', '4053', '4054', '4055', '4056', '4057', '4058', '4059', '4060', '4061', '4062', '4063', '4064', '4065', '4066', '4067', '4068', '4069', '4070', '4071', '4072', '4073', '4074', '4075', '4076', '4077', '4078', '4079', '4080', '4081', '4082', '4083', '4084', '4085', '4086', '4087', '4088', '4089', '4090', '4091', '4092', '4093', '4094', '4095', '4096', '4097', '4098', '4099', '4100', '4101', '4102', '4103', '4104', '4105', '4106', '4107', '4108', '4109', '4110', '4111', '4112', '4113', '4114', '4115', '4116', '4117', '4118', '4119', '4120', '4121', '4122', '4123', '4124', '4125', '4126', '4127', '4128', '4129', '4130', '4131', '4132', '4133', '4134', '4135', '4136', '4137', '4138', '4139', '4140', '4141', '4142', '4143', '4144', '4145', '4146', '4147', '4148', '4149', '4150', '4151', '4152', '4153', '4154', '4155', '4156', '4157', '4158', '4159', '4160', '4161', '4162', '4163', '4164', '4165', '4166', '4167', '4168', '4169', '4170', '4171', '4172', '4173', '4174', '4175', '4176', '4177', '4178', '4179', '4180', '4181', '4182', '4183', '4184', '4185', '4186', '4187', '4188', '4189', '4190', '4191', '4192', '4193', '4194', '4195', '4196', '4197', '4198', '4199', '4200', '4201', '4202', '4203', '4204', '4205', '4206', '4207', '4208', '4209', '4210', '4211', '4212', '4213', '4214', '4215', '4216', '4217', '4218', '4219', '4220', '4221', '4222', '4223', '4224', '4225', '4226', '4227', '4228', '4229', '4230', '4231', '4232', '4233', '4234', '4235', '4236', '4237', '4238', '4239', '4240', '4241', '4242', '4243', '4244', '4245', '4246', '4247', '4248', '4249', '4250', '4251', '4252', '4253', '4254', '4255', '4256', '4257', '4258', '4259', '4260', '4261', '4262', '4263', '4264', '4265', '4266', '4267', '4268', '4269', '4270', '4271', '4272', '4273', '4274', '4275', '4276', '4277', '4278', '4279', '4280', '4281', '4282', '4283', '4284', '4285', '4286', '4287', '4288', '4289', '4290', '4291', '4292', '4293', '4294', '4295', '4296', '4297', '4298', '4299', '4300', '4301', '4302', '4303', '4304', '4305', '4306', '4307', '4308', '4309', '4310', '4311', '4312', '4313', '4314', '4315', '4316', '4317', '4318', '4319', '4320', '4321', '4322', '4323', '4324', '4325', '4326"
  },
  {
    "query": "find parcels that are zoned for retail and within 300m of a subway station and not within 100m of a competitor.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter for retail-zoned parcels\nretail_zones = ['BA', 'BB', 'BC', 'BA-1', 'BA-2', 'BA-3', 'BA-4']\nretail_parcels = parcels[parcels['zoning'].isin(retail_zones)].copy()\n\n# Identify subway stations\nsubway_keywords = ['subway', 'station', 'mbta']\nsubway_poi = poi[poi['name'].str.contains('|'.join(subway_keywords), case=False, na=False)].copy()\n\n# Buffer 300m around subway stations\nsubway_buffer = subway_poi.geometry.buffer(300)\nsubway_union = gpd.GeoSeries(subway_buffer).unary_union\n\n# Filter parcels within 300m of a subway station\nnear_subway_parcels = retail_parcels[retail_parcels.geometry.intersects(subway_union)].copy()\n\n# Identify competitors\ncompetitor_keywords = ['cvs', 'walgreens', 'rite aid', 'target', 'walmart']\ncompetitors = poi[poi['name'].str.contains('|'.join(competitor_keywords), case=False, na=False)].copy()\n\n# Buffer 100m around competitors\ncompetitor_buffer = competitors.geometry.buffer(100)\ncompetitor_union = gpd.GeoSeries(competitor_buffer).unary_union\n\n# Filter parcels not within 100m of a competitor\nfinal_parcels = near_subway_parcels[~near_subway_parcels.geometry.intersects(competitor_union)].copy()\n\n# Sort by parcel ID (ml)\nfinal_parcels_sorted = final_parcels.sort_values('ml')\n\n# Extract parcel IDs\nresult_ids = final_parcels_sorted['ml'].tolist()\n\n# Print result\nprint(result_ids)"
  },
  {
    "query": "find parcels that are either office space larger than 10,000 sq ft or retail space within 500m of high-density residential areas.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter for office space larger than 10,000 sq ft\noffice_parcels = parcels[(parcels['use_code'].str.startswith('3')) & (parcels['area'] > 10000)]\n\n# Identify high-density residential areas (top 20% by population density)\ncensus['pop_density'] = census['total_pop'] / census['area']\nhigh_density_threshold = census['pop_density'].quantile(0.8)\nhigh_density_areas = census[census['pop_density'] >= high_density_threshold]\n\n# Buffer high-density areas by 500m\nhigh_density_buffer = high_density_areas.geometry.buffer(500)\nhigh_density_union = gpd.GeoSeries(high_density_buffer).unary_union\n\n# Filter for retail parcels within 500m of high-density areas\nretail_parcels = parcels[parcels['use_code'].str.startswith('4')]\nretail_near_high_density = retail_parcels[retail_parcels.geometry.intersects(high_density_union)]\n\n# Combine results\nresult_parcels = pd.concat([office_parcels, retail_near_high_density]).drop_duplicates(subset='ml')\n\n# Sort by parcel ID\nresult_parcels = result_parcels.sort_values('ml')\n\n# Extract parcel IDs\nresult_ids = result_parcels['ml'].tolist()\n\n# Print result\nprint(result_ids)"
  },
  {
    "query": "find commercial parcels that, if larger than 5000 sq ft, must be within 400m of public transit, or if smaller, must be within 200m of residential areas.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Define commercial use codes\ncommercial_use_codes = [\n    '300', '301', '302', '303', '304', '305', '306', '307', '308', '309',\n    '310', '311', '312', '313', '314', '315', '316', '317', '318', '319',\n    '320', '321', '322', '323', '324', '325', '326', '327', '328', '329',\n    '330', '331', '332', '333', '334', '335', '336', '337', '338', '339',\n    '340', '341', '342', '343', '344', '345', '346', '347', '348', '349',\n    '350', '351', '352', '353', '354', '355', '356', '357', '358', '359',\n    '360', '361', '362', '363', '364', '365', '366', '367', '368', '369',\n    '370', '371', '372', '373', '374', '375', '376', '377', '378', '379',\n    '380', '381', '382', '383', '384', '385', '386', '387', '388', '389',\n    '390', '391', '392', '393', '394', '395', '396', '397', '398', '399'\n]\n\n# Filter commercial parcels\ncommercial_parcels = parcels[parcels['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Define public transit and residential POI categories\npublic_transit_categories = ['bus_stop', 'subway_station', 'train_station']\nresidential_categories = ['residential']\n\n# Filter POI for public transit and residential\npublic_transit_poi = poi[poi['category'].isin(public_transit_categories)].copy()\nresidential_poi = poi[poi['category'].isin(residential_categories)].copy()\n\n# Function to find parcels within a certain distance of POI\ndef find_parcels_within_distance(parcels, poi, distance):\n    if poi.empty:\n        return gpd.GeoDataFrame(columns=parcels.columns, crs=parcels.crs)\n    buffered_poi = poi.geometry.buffer(distance)\n    combined_buffer = gpd.GeoSeries(buffered_poi.unary_union, crs=parcels.crs)\n    return parcels[parcels.geometry.intersects(combined_buffer.iloc[0])]\n\n# Split parcels into larger and smaller than 5000 sq ft\nlarger_parcels = commercial_parcels[commercial_parcels['land_area'] > 5000].copy()\nsmaller_parcels = commercial_parcels[commercial_parcels['land_area'] <= 5000].copy()\n\n# Find larger parcels within 400m of public transit\nlarger_near_transit = find_parcels_within_distance(larger_parcels, public_transit_poi, 400)\n\n# Find smaller parcels within 200m of residential areas\nsmaller_near_residential = find_parcels_within_distance(smaller_parcels, residential_poi, 200)\n\n# Combine results\nresult_parcels = pd.concat([larger_near_transit, smaller_near_residential]).drop_duplicates()\n\n# Sort by parcel ID (ml column)\nresult_parcels_sorted = result_parcels.sort_values('ml')\n\n# Extract and print parcel IDs\nresult_ids = result_parcels_sorted['ml'].tolist()\nprint(result_ids)"
  },
  {
    "query": "find parcels that are: if zoned for commercial, must be larger than 8000 sq ft; if zoned for residential, must have less than 2 similar properties within 1000m",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspend = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Define zoning categories\ncommercial_zones = ['C', 'O', 'B', 'MXD', 'IB', 'BA', 'BB', 'BC', 'IA', 'IB-1', 'IB-2', 'IB-3']\nresidential_zones = ['R', 'RC', 'RA', 'RB', 'RC-1', 'RC-2', 'RC-3']\n\n# Filter commercial parcels larger than 8000 sq ft\ncommercial_parcels = parcels[\n    (parcels['zoning'].isin(commercial_zones)) & \n    (parcels['land_area'] > 8000)\n]\n\n# Filter residential parcels with less than 2 similar properties within 1000m\nresidential_parcels = parcels[parcels['zoning'].isin(residential_zones)]\n\ndef count_similar_within_1000m(parcel, all_parcels):\n    similar = all_parcels[\n        (all_parcels['zoning'] == parcel['zoning']) & \n        (all_parcels['ml'] != parcel['ml'])\n    ]\n    similar = similar.to_crs(epsg=26986)\n    distances = similar.geometry.apply(lambda geom: parcel.geometry.distance(geom))\n    return (distances < 1000).sum()\n\nresidential_ids = []\nfor idx, parcel in residential_parcels.iterrows():\n    count = count_similar_within_1000m(parcel, residential_parcels)\n    if count < 2:\n        residential_ids.append(parcel['ml'])\n\n# Combine results\nresult_ids = set(commercial_parcels['ml'].tolist() + residential_ids)\n\n# Sort results\nsorted_result_ids = sorted(result_ids)\n\n# Print results\nprint(sorted_result_ids)"
  },
  {
    "query": "find mixed-use parcels that, if north of massachusetts avenue, must have retail on the ground floor, otherwise must have at least 3000 sq ft of commercial space.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to EPSG:26986 for accurate spatial operations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Define Massachusetts Avenue line (approximate)\nmass_ave_line = gpd.GeoSeries([\n    gpd.points_from_xy([-71.1189, -71.1056], [42.3736, 42.3656])\n]).to_crs(epsg=26986).unary_union\n\n# Filter mixed-use parcels\nmixed_use_codes = ['013', '031', '032', '033', '034', '035', '036', '037', '038', '039']\nmixed_use_parcels = parcels[parcels['lu'].isin(mixed_use_codes)].copy()\n\n# Determine if parcel is north of Massachusetts Avenue\ndef is_north_of_mass_ave(geom):\n    return geom.centroid.y > mass_ave_line.centroid.y\n\nmixed_use_parcels['north_of_mass_ave'] = mixed_use_parcels.geometry.apply(is_north_of_mass_ave)\n\n# Filter for retail on ground floor if north of Massachusetts Avenue\nretail_codes = ['325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339']\nretail_poi = poi[poi['naics'].astype(str).str.startswith('44') | poi['naics'].astype(str).str.startswith('45')]\n\ndef has_retail_on_ground_floor(parcel_geom):\n    buffer_geom = parcel_geom.buffer(0.1)\n    nearby_retail = retail_poi[retail_poi.geometry.intersects(buffer_geom)]\n    return not nearby_retail.empty\n\nnorth_parcels = mixed_use_parcels[mixed_use_parcels['north_of_mass_ave']]\nnorth_parcels = north_parcels[north_parcels.geometry.apply(has_retail_on_ground_floor)]\n\n# Filter for at least 3000 sq ft of commercial space if not north of Massachusetts Avenue\ndef has_sufficient_commercial_space(parcel):\n    return parcel['com_sqft'] >= 3000\n\nsouth_parcels = mixed_use_parcels[~mixed_use_parcels['north_of_mass_ave']]\nsouth_parcels = south_parcels[south_parcels.apply(has_sufficient_commercial_space, axis=1)]\n\n# Combine results\nresult_parcels = pd.concat([north_parcels, south_parcels])\n\n# Sort by parcel ID (ml)\nresult_parcels = result_parcels.sort_values('ml')\n\n# Extract and print parcel IDs\nresult_ids = result_parcels['ml'].tolist()\nprint(result_ids)"
  },
  {
    "query": "Find parcels between 1000-10000 square feet within 800 meters of Kendall/MIT station in census tracts where at least 5% of residents have advanced degrees.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter for Kendall/MIT station\nkendall_mit = poi[poi['name'] == 'Kendall/MIT']\n\n# Ensure there's exactly one Kendall/MIT point\nif len(kendall_mit) != 1:\n    raise ValueError(\"Kendall/MIT station not found or multiple found.\")\nkendall_mit_point = kendall_mit.geometry.iloc[0]\n\n# Filter parcels by size\nparcels_filtered = parcels[(parcels['land_area'] >= 1000) & (parcels['land_area'] <= 10000)]\n\n# Buffer around Kendall/MIT station\nbuffer_geom = kendall_mit_point.buffer(800)\nparcels_near_station = parcels_filtered[parcels_filtered.geometry.intersects(buffer_geom)]\n\n# Filter census tracts with at least 5% advanced degrees\ncensus_advanced = census[census['pct_advanced_degrees'] >= 5]\n\n# Join parcels with census data\nparcels_with_census = gpd.sjoin(parcels_near_station, census_advanced, how='inner', predicate='within')\n\n# Get unique parcel IDs\nresult_parcel_ids = sorted(parcels_with_census['ml'].unique())\n\n# Print result\nprint(result_parcel_ids)"
  },
  {
    "query": "Find office parcels with at least 7500 square feet that are within 400 meters of both a restaurant and a coffee shop.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250508-005341:BUxMPyLM",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter for office parcels (land_use_code starting with '3')\noffice_parcels = parcels[parcels['land_use_code'].astype(str).str.startswith('3')]\n\n# Filter for parcels with at least 7500 square feet\noffice_parcels = office_parcels[office_parcels['land_area'] >= 7500]\n\n# Define function to find parcels within distance of POI type\ndef find_parcels_near_poi(parcels, poi, poi_type, distance):\n    poi_filtered = poi[poi['poi_type'] == poi_type]\n    poi_union = poi_filtered.geometry.unary_union\n    buffer_geom = poi_union.buffer(distance)\n    return parcels[parcels.geometry.intersects(buffer_geom)]\n\n# Find parcels within 400m of a restaurant\nnear_restaurant = find_parcels_near_poi(office_parcels, poi, 'restaurant', 400)\n\n# Find parcels within 400m of a coffee shop\nnear_coffee_shop = find_parcels_near_poi(office_parcels, poi, 'coffee_shop', 400)\n\n# Find parcels that meet both criteria\nfinal_parcels = near_restaurant[near_restaurant['ml'].isin(near_coffee_shop['ml'])]\n\n# Sort by parcel ID (ml)\nfinal_parcels_sorted = final_parcels.sort_values('ml')\n\n# Extract and print the list of parcel IDs\nparcel_ids = final_parcels_sorted['ml'].tolist()\nprint(parcel_ids)"
  }
]