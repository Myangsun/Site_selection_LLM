[
  {
    "query": "find commercial parcels within 500 meters of harvard square.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "find parcels larger than 6000 square feet that are zoned for retail use.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "find all parcels that have no more than 2 competing restaurants within 800 meters.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load the POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter POI to only include restaurants\nrestaurants = poi[poi['category'] == 'restaurant']\n\n# Set the CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\nrestaurants = restaurants.to_crs(epsg=26986)\n\n# Buffer the restaurants by 800 meters\nrestaurants_buffered = restaurants.buffer(800)\n\n# Spatial join to find parcels within 800 meters of restaurants\nparcels_within_800m = gpd.sjoin(parcels, gpd.GeoDataFrame(geometry=restaurants_buffered), how='left', op='intersects')\n\n# Count the number of restaurants within 800 meters for each parcel\nparcels_within_800m['restaurant_count'] = parcels_within_800m.groupby('index_left')['index_right'].transform('count')\n\n# Filter parcels with no more than 2 competing restaurants within 800 meters\nfiltered_parcels = parcels_within_800m[parcels_within_800m['restaurant_count'] <= 2]\n\n# Get unique parcel IDs\nunique_parcel_ids = filtered_parcels['ml'].unique()\n\n# Sort the parcel IDs\nsorted_parcel_ids = sorted(unique_parcel_ids)\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find the top 20 parcels in cambridge with the most diverse mix of residential and commercial land uses within 500 meters.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "find the top 20 commercial parcels in areas with the highest percentage of residents with advanced degrees.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "\u201cfind the top 20 parcels with the highest consumer spending in surrounding areas.\u201d",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "find vacant commercial parcels larger than 3000 square feet that are within 800 meters of a subway station.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load the POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter POI for subway stations\nsubway_stations = poi[poi['type'] == 'subway_station']\n\n# Project both datasets to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\nsubway_stations = subway_stations.to_crs(epsg=26986)\n\n# Filter parcels for vacant commercial parcels larger than 3000 square feet\nvacant_commercial_parcels = parcels[(parcels['use'] == 'commercial') & \n                                    (parcels['status'] == 'vacant') & \n                                    (parcels['area'] > 3000)]\n\n# Perform spatial join to find parcels within 800 meters of a subway station\nbuffered_stations = subway_stations.buffer(800)\nparcels_within_800m = gpd.sjoin(vacant_commercial_parcels, \n                                gpd.GeoDataFrame(geometry=buffered_stations, crs=subway_stations.crs), \n                                op='intersects')\n\n# Extract and sort the list of parcel IDs\nparcel_ids = parcels_within_800m['ml'].sort_values().unique()\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "find commercial parcels zoned for retail use with fewer than 3 competing retail businesses within 300 meters.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "find the top 20 commercial parcels within 1km of massachusetts avenue, prioritizing areas with higher consumer spending.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "find commercial parcels larger than 8000 square feet in census tracts with at least 90% of residents aged 18-64.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "find commercial parcels that are between 5000-10000 square feet, within 500 meters of a subway station, and have no more than 1 competitor within 500 meters.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Project data to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter parcels by area\nfiltered_parcels = parcels[(parcels['area'] >= 5000) & (parcels['area'] <= 10000)]\n\n# Identify subway stations and competitors\nsubway_stations = poi[poi['type'] == 'subway_station']\ncompetitors = poi[poi['type'] == 'competitor']\n\n# Function to find parcels within 500 meters of subway stations\ndef within_distance(gdf, points, distance):\n    return gdf[gdf.geometry.apply(lambda x: any(points.geometry.distance(x) <= distance))]\n\n# Filter parcels within 500 meters of a subway station\nparcels_near_subway = within_distance(filtered_parcels, subway_stations, 500)\n\n# Function to count competitors within 500 meters\ndef count_competitors(parcel, competitors, distance):\n    return competitors[competitors.geometry.distance(parcel.geometry) <= distance].shape[0]\n\n# Filter parcels with no more than 1 competitor within 500 meters\nfinal_parcels = parcels_near_subway[parcels_near_subway.apply(lambda x: count_competitors(x, competitors, 500) <= 1, axis=1)]\n\n# Sort and extract parcel IDs\nsorted_parcel_ids = final_parcels.sort_values(by='ml')['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find parcels that are zoned for mixed-use, within 400 meters of public transportation, and at least 200 meters away from industrial areas.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels for mixed-use zoning\nmixed_use_parcels = parcels[parcels['zoning'] == 'mixed-use']\n\n# Filter POI for public transportation\npublic_transport = poi[poi['type'] == 'public_transport']\n\n# Buffer public transport points by 400 meters\npublic_transport_buffer = public_transport.buffer(400)\n\n# Find parcels within 400 meters of public transportation\nparcels_near_transport = mixed_use_parcels[mixed_use_parcels.geometry.apply(\n    lambda x: public_transport_buffer.intersects(x).any())]\n\n# Filter census data for industrial areas\nindustrial_areas = census[census['land_use'] == 'industrial']\n\n# Buffer industrial areas by 200 meters\nindustrial_buffer = industrial_areas.buffer(200)\n\n# Find parcels at least 200 meters away from industrial areas\nfinal_parcels = parcels_near_transport[parcels_near_transport.geometry.apply(\n    lambda x: not industrial_buffer.intersects(x).any())]\n\n# Sort and extract parcel IDs\nsorted_parcel_ids = final_parcels.sort_values(by='ml')['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find retail parcels between 2000-5000 square feet within 500m of a residential area, prioritizing locations with high foot traffic and in census tracts with median income above $30,000.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project data to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels by size and type\nretail_parcels = parcels[(parcels['land_use'] == 'Retail') & \n                         (parcels['area'] >= 2000) & \n                         (parcels['area'] <= 5000)]\n\n# Filter census tracts by median income\nhigh_income_census = census[census['median_income'] > 30000]\n\n# Spatial join to find parcels within high-income census tracts\nretail_parcels = gpd.sjoin(retail_parcels, high_income_census, how='inner', op='intersects')\n\n# Filter POIs for residential areas\nresidential_poi = poi[poi['category'] == 'Residential']\n\n# Buffer residential POIs by 500m\nresidential_buffer = residential_poi.buffer(500)\n\n# Find parcels within 500m of residential areas\nparcels_near_residential = retail_parcels[retail_parcels.geometry.apply(\n    lambda x: any(x.intersects(buffer) for buffer in residential_buffer))]\n\n# Calculate foot traffic by counting nearby POIs\nparcels_near_residential['foot_traffic'] = parcels_near_residential.geometry.apply(\n    lambda x: poi[poi.geometry.within(x.buffer(500))].shape[0])\n\n# Sort parcels by foot traffic in descending order\nsorted_parcels = parcels_near_residential.sort_values(by='foot_traffic', ascending=False)\n\n# Extract and print the list of parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\nprint(parcel_ids)"
  },
  {
    "query": "find office parcels larger than 5000 square feet with at least 2 parking spaces, prioritizing those in areas with high educational attainment.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "find parcels that are either commercial places within 100m of harvard square or residential larger than 5000 square feet and within 200m of 50 restaurants.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "find parcels that are zoned for retail and within 300m of a subway station and not within 100m of a competitor.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "find parcels that are either office space larger than 10,000 sq ft or retail space within 500m of high-density residential areas.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "find commercial parcels that, if larger than 5000 sq ft, must be within 400m of public transit, or if smaller, must be within 200m of residential areas.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Filter POI for public transit\npublic_transit = poi[poi['type'] == 'public_transit']\n\n# Filter census for residential areas\nresidential_areas = census[census['land_use'] == 'residential']\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npublic_transit = public_transit.to_crs(epsg=26986)\nresidential_areas = residential_areas.to_crs(epsg=26986)\n\n# Spatial join to find parcels within 400m of public transit\nparcels['within_400m_transit'] = parcels.geometry.apply(\n    lambda geom: public_transit.distance(geom).min() <= 400\n)\n\n# Spatial join to find parcels within 200m of residential areas\nparcels['within_200m_residential'] = parcels.geometry.apply(\n    lambda geom: residential_areas.distance(geom).min() <= 200\n)\n\n# Filter parcels based on size and proximity criteria\nselected_parcels = parcels[\n    ((parcels['area'] > 5000) & parcels['within_400m_transit']) |\n    ((parcels['area'] <= 5000) & parcels['within_200m_residential'])\n]\n\n# Sort by parcel ID\nselected_parcels_sorted = selected_parcels.sort_values(by='ml')\n\n# Extract and print the list of parcel IDs\nparcel_ids = selected_parcels_sorted['ml'].tolist()\nprint(parcel_ids)"
  },
  {
    "query": "find parcels that are: if zoned for commercial, must be larger than 8000 sq ft; if zoned for residential, must have less than 2 similar properties within 1000m",
    "method": "improved-few-shot-5",
    "success": false,
    "code": ""
  },
  {
    "query": "find mixed-use parcels that, if north of massachusetts avenue, must have retail on the ground floor, otherwise must have at least 3000 sq ft of commercial space.",
    "method": "improved-few-shot-5",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Ensure all data is in the same CRS for spatial operations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Define Massachusetts Avenue as a line for spatial filtering\nmass_ave = poi[poi['name'].str.contains('Massachusetts Avenue', case=False, na=False)]\n\n# Filter parcels north of Massachusetts Avenue\nnorth_of_mass_ave = parcels[parcels.intersects(mass_ave.unary_union)]\n\n# Filter for parcels with retail on the ground floor\nretail_poi = poi[poi['category'].str.contains('Retail', case=False, na=False)]\nnorth_with_retail = north_of_mass_ave[north_of_mass_ave.intersects(retail_poi.unary_union)]\n\n# Filter parcels south of Massachusetts Avenue\nsouth_of_mass_ave = parcels[~parcels.index.isin(north_of_mass_ave.index)]\n\n# Filter for parcels with at least 3000 sq ft of commercial space\nsouth_with_commercial = south_of_mass_ave[south_of_mass_ave['commercial_sqft'] >= 3000]\n\n# Combine the results\nselected_parcels = north_with_retail.append(south_with_commercial)\n\n# Sort by parcel ID (ml column)\nsorted_parcels = selected_parcels.sort_values(by='ml')\n\n# Extract and print the list of parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\nprint(parcel_ids)"
  }
]