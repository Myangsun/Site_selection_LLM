[
  {
    "exact_match": 0.0,
    "result_match_rate": 0.28615384615384615,
    "precision": 0.28615384615384615,
    "recall": 1.0,
    "f1_score": 0.4449760765550239,
    "generated_count": 325,
    "ground_truth_count": 93,
    "correct_count": 93,
    "query": "Find commercial parcels within 500 meters of Harvard Square.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": true,
    "code": "import geopandas as gpd\n\n# Load parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Define Harvard Square location (approximate coordinates)\nharvard_square_coords = (-71.1189, 42.3736)\n\n# Create GeoDataFrame for Harvard Square\nharvard_square_gdf = gpd.GeoDataFrame(\n    geometry=gpd.points_from_xy([harvard_square_coords[0]], [harvard_square_coords[1]]),\n    crs='EPSG:4326'\n)\n\n# Project to appropriate CRS for accurate distance measurement\nharvard_square_gdf_proj = harvard_square_gdf.to_crs(epsg=26986)\n\n# Project parcels to the same CRS\nparcels_proj = parcels.to_crs(epsg=26986)\n\n# Create 500m buffer around Harvard Square\nharvard_buffer = harvard_square_gdf_proj.buffer(500).iloc[0]\n\n# Find parcels within 500m of Harvard Square\nparcels_near_harvard = parcels_proj[parcels_proj.geometry.intersects(harvard_buffer)].copy()\n\n# Sort by parcel ID (ml column)\nresult_parcels = parcels_near_harvard.sort_values('ml')\n\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n\n# Extract parcel IDs\nresult_ids = result_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      "132-116",
      "132-118",
      "132-124",
      "132-125",
      "132-133",
      "132-137",
      "132-14",
      "132-141",
      "132-142",
      "132-143",
      "132-144",
      "132-145",
      "132-146",
      "132-148",
      "132-149",
      "132-15",
      "132-150",
      "132-151",
      "132-152",
      "132-153",
      "132-16",
      "132-17",
      "132-18",
      "132-19",
      "132-21",
      "132-23",
      "132-33",
      "132-37",
      "132-4",
      "132-6",
      "132-7",
      "132-8",
      "132-9",
      "132-99",
      "133-11",
      "133-12",
      "133-14",
      "133-15",
      "133-20",
      "133-21",
      "133-23",
      "133-26",
      "133-27",
      "133-28",
      "133-3",
      "133-36",
      "133-41",
      "133-43",
      "133-48",
      "133-49",
      "133-50",
      "133-51",
      "133-52",
      "133-53",
      "133-54",
      "133-55",
      "133-56",
      "133-60",
      "133-61",
      "133-8",
      "133-9",
      "134-1",
      "134-2",
      "134-3",
      "134-4",
      "134-5",
      "134-6",
      "134-7",
      "134-8",
      "135-123",
      "135-23",
      "136-11",
      "136-12",
      "136-13",
      "136-15",
      "136-18",
      "136-19",
      "136-2",
      "136-20",
      "136-21",
      "136-22",
      "136-23",
      "136-29",
      "136-30",
      "136-31",
      "136-32",
      "136-33",
      "136-34",
      "136-37",
      "136-39",
      "136-9",
      "137-1",
      "137-13",
      "137-16",
      "137-2",
      "137-35",
      "137-4",
      "137-42",
      "143-11",
      "143-17",
      "143-20",
      "144-1",
      "157-69",
      "158-25",
      "158-28",
      "159-1",
      "159-2",
      "160-11",
      "160-14",
      "160-24",
      "160-25",
      "160-30",
      "160-36",
      "160-37",
      "160-38",
      "160-46",
      "160-48",
      "160-53",
      "160-54",
      "160-55",
      "160-57",
      "160-58",
      "160-59",
      "160-60",
      "160-61",
      "160-63",
      "160-64",
      "160-66",
      "160-67",
      "160-69",
      "160-70",
      "160-71",
      "160-72",
      "160-74",
      "160-76",
      "160-77",
      "160-83",
      "160-84",
      "160-85",
      "161-1",
      "161-2",
      "161-3",
      "161-5",
      "161-57",
      "161-58",
      "161-73",
      "161-76",
      "161-85",
      "161-91",
      "161-92",
      "161-93",
      "161-94",
      "162-10",
      "162-11",
      "162-14",
      "162-17",
      "162-18",
      "162-19",
      "162-26",
      "162-29",
      "162-31",
      "162-32",
      "162-35",
      "162-36",
      "162-4",
      "162-47",
      "162-48",
      "162-49",
      "162-51",
      "162-52",
      "162-54",
      "162-61",
      "162-62",
      "162-63",
      "162-64",
      "162-65",
      "162-66",
      "162-67",
      "162-68",
      "162-69",
      "162-7",
      "162-72",
      "162-73",
      "162-74",
      "162-9",
      "164-5",
      "164-7",
      "165-24",
      "165-34",
      "165-40",
      "165-53",
      "165-55",
      "165-56",
      "165-57",
      "165-60",
      "166-24",
      "166-25",
      "166-26",
      "166-27",
      "166-31",
      "166-33",
      "166-35",
      "166-37",
      "166-46",
      "166-52",
      "166-53",
      "166-57",
      "166-58",
      "166-70",
      "166-73",
      "166-77",
      "166-78",
      "166-79",
      "166-80",
      "166-81",
      "167-100",
      "167-101",
      "167-102",
      "167-103",
      "167-105",
      "167-106",
      "167-107",
      "167-11",
      "167-17",
      "167-18",
      "167-20",
      "167-21",
      "167-22",
      "167-23",
      "167-28",
      "167-30",
      "167-31",
      "167-33",
      "167-50",
      "167-55",
      "167-56",
      "167-58",
      "167-65",
      "167-82",
      "167-89",
      "167-90",
      "167-92",
      "167-93",
      "167-95",
      "167-96",
      "167-97",
      "167-98",
      "167-99",
      "168-13",
      "168-16",
      "168-20",
      "168-21",
      "168-22",
      "168-25",
      "168-32",
      "168-33",
      "168-36",
      "168-38",
      "168-4",
      "168-40",
      "168-41",
      "168-45",
      "168-47",
      "168-48",
      "168-49",
      "168-5",
      "168-50",
      "168-51",
      "168-52",
      "168-53",
      "168-54",
      "168-57",
      "168-58",
      "168-59",
      "168-6",
      "168-60",
      "168-64",
      "168-7",
      "169-100",
      "169-102",
      "169-12",
      "169-14",
      "169-15",
      "169-17",
      "169-18",
      "169-19",
      "169-3",
      "169-4",
      "169-42",
      "169-46",
      "169-47",
      "169-5",
      "169-50",
      "169-67",
      "169-68",
      "169-69",
      "169-7",
      "169-79",
      "169-8",
      "169-81",
      "169-82",
      "169-84",
      "169-85",
      "169-86",
      "169-88",
      "169-91",
      "169-93",
      "169-94",
      "169-95",
      "169-96",
      "169-98",
      "169-99",
      "170-19",
      "170-27",
      "170-28",
      "170-29",
      "170-30",
      "170-35",
      "170-36",
      "170-39",
      "170-4",
      "170-5",
      "171-1",
      "172-36",
      "217-18"
    ]
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.03145631067961165,
    "precision": 0.03145631067961165,
    "recall": 1.0,
    "f1_score": 0.06099397590361446,
    "generated_count": 2575,
    "ground_truth_count": 81,
    "correct_count": 81,
    "query": "Find parcels larger than 6000 square feet that are zoned for retail use.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": true,
    "code": "import geopandas as gpd\n\n# Load parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Define retail zoning codes\nretail_zoning_codes = [\n    '1000', '1001', '1002', '1003', '1004', '1005', '1013', '1014', '1015', \n    '102', '1020', '1021', '1022', '1023', '1024', '1025', '1026', '1027', \n    '103', '1031', '1032', '1038', '104', '1040', '1041', '1042', '1044', \n    '105', '1050', '1054', '1055', '106', '1061', '107', '1074', '108', \n    '109', '1093', '1094', '1095', '1096', '1098', '111', '112', '113', \n    '114', '121', '122', '123', '124', '125', '126', '127', '128', '129', \n    '130', '131', '132', '133', '134', '135', '136', '137', '140', '141', \n    '142', '143', '144', '145', '146', '147', '148', '149', '160', '162', \n    '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', \n    '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', \n    '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', \n    '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', \n    '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', \n    '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', \n    '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', \n    '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', \n    '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', \n    '253', '254', '255', '256', '257', '258', '259', '260', '261', '262', \n    '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', \n    '273', '274', '275', '276', '277', '278', '279', '280', '281', '282', \n    '283', '284', '285', '286', '287', '288', '289', '290', '291', '292', \n    '293', '294', '295', '296', '297', '298', '299', '300', '301', '302', \n    '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', \n    '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', \n    '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', \n    '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', \n    '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', \n    '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', \n    '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', \n    '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', \n    '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', \n    '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', \n    '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', \n    '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', \n    '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', \n    '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', \n    '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', \n    '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', \n    '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', \n    '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', \n    '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', \n    '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', \n    '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', \n    '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', \n    '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', \n    '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', \n    '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', \n    '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', \n    '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', \n    '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', \n    '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', \n    '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', \n    '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', \n    '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', \n    '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', \n    '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', \n    '643', '644', '645', '646', '647', '648', '649', '650', '651', '652', \n    '653', '654', '655', '656', '657', '658', '659', '660', '661', '662', \n    '663', '664', '665', '666', '667', '668', '669', '670', '671', '672', \n    '673', '674', '675', '676', '677', '678', '679', '680', '681', '682', \n    '683', '684', '685', '686', '687', '688', '689', '690', '691', '692', \n    '693', '694', '695', '696', '697', '698', '699', '700', '701', '702', \n    '703', '704', '705', '706', '707', '708', '709', '710', '711', '712', \n    '713', '714', '715', '716', '717', '718', '719', '720', '721', '722', \n    '723', '724', '725', '726', '727', '728', '729', '730', '731', '732', \n    '733', '734', '735', '736', '737', '738', '739', '740', '741', '742', \n    '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', \n    '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', \n    '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', \n    '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', \n    '783', '784', '785', '786', '787', '788', '789', '790', '791', '792', \n    '793', '794', '795', '796', '797', '798', '799', '800', '801', '802', \n    '803', '804', '805', '806', '807', '808', '809', '810', '811', '812', \n    '813', '814', '815', '816', '817', '818', '819', '820', '821', '822', \n    '823', '824', '825', '826', '827', '828', '829', '830', '831', '832', \n    '833', '834', '835', '836', '837', '838', '839', '840', '841', '842', \n    '843', '844', '845', '846', '847', '848', '849', '850', '851', '852', \n    '853', '854', '855', '856', '857', '858', '859', '860', '861', '862', \n    '863', '864', '865', '866', '867', '868', '869', '870', '871', '872', \n    '873', '874', '875', '876', '877', '878', '879', '880', '881', '882', \n    '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', \n    '893', '894', '895', '896', '897', '898', '899', '900', '901', '902', \n    '903', '904', '905', '906', '907', '908', '909', '910', '911', '912', \n    '913', '914', '915', '916', '917', '918', '919', '920', '921', '922', \n    '923', '924', '925', '926', '927', '928', '929', '930', '931', '932', \n    '933', '934', '935', '936', '937', '938', '939', '940', '941', '942', \n    '943', '944', '945', '946', '947', '948', '949', '950', '951', '952', \n    '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', \n    '963', '964', '965', '966', '967', '968', '969', '970', '971', '972', \n    '973', '974', '975', '976', '977', '978', '979', '980', '981', '982', \n    '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', \n    '993', '994', '995', '996', '997', '998', '999'\n]\n\n# Filter for retail parcels\nretail_parcels = parcels[parcels['use_code'].astype(str).isin(retail_zoning_codes)].copy()\n\n# Filter for parcels larger than 6000 square feet\nlarge_retail_parcels = retail_parcels[retail_parcels['land_area'] > 6000].copy()\n\n# Sort by parcel ID (ml)\nresult_parcels = large_retail_parcels.sort_values('ml')\n\n# Get parcel IDs\nresult_ids = result_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)\n",
    "generated_ids": [
      "10-16",
      "10-31",
      "10-32",
      "10-33",
      "10-38",
      "100-35",
      "100-4",
      "100-49",
      "100-51",
      "100-52",
      "100-62",
      "100-68",
      "100-76",
      "100-86",
      "100-88",
      "101-143",
      "101-153",
      "101-158",
      "101-159",
      "101-160",
      "101-171",
      "101-193",
      "101-200",
      "101-210",
      "101-52",
      "101-53",
      "101-54",
      "101-68",
      "101-99",
      "102-105",
      "102-114",
      "102-115",
      "102-125",
      "102-133",
      "102-145",
      "102-2",
      "102-21",
      "102-23",
      "102-26",
      "102-33",
      "102-4",
      "102-44",
      "102-45",
      "102-65",
      "102-68",
      "102-73",
      "102-77",
      "102-78",
      "103-113",
      "103-14",
      "103-20",
      "103-21",
      "103-30",
      "103-32",
      "103-70",
      "103-72",
      "104-109",
      "104-116",
      "104-122",
      "104-130",
      "104-133",
      "104-32",
      "104-63",
      "105-103",
      "105-32",
      "105-5",
      "105-50",
      "105-53",
      "105-60",
      "105-61",
      "105-66",
      "105-67",
      "105-68",
      "105-77",
      "105-8",
      "105-81",
      "105-82",
      "105-89",
      "105-8A",
      "105-93",
      "106-108",
      "106-117",
      "106-120",
      "106-123",
      "106-124",
      "106-129",
      "106-2",
      "106-21",
      "106-28",
      "106-47",
      "106-48",
      "106-49",
      "106-60",
      "107-117",
      "107-121",
      "107-122",
      "107-127",
      "107-128",
      "107-135",
      "107-136",
      "107-137",
      "107-139",
      "107-19",
      "107-2",
      "107-21",
      "107-26",
      "107-59",
      "107-76",
      "107-77",
      "107-8",
      "107-9",
      "107-99",
      "108-15",
      "108-18",
      "108-22",
      "108-25",
      "108-32",
      "108-43",
      "108-44",
      "108-48",
      "108-49",
      "108-80",
      "108-83",
      "108-84",
      "108-85",
      "108-87",
      "108-88",
      "108-94",
      "109-2",
      "109-21",
      "109-22",
      "109-44",
      "109-50",
      "109-51",
      "109-67",
      "109-80",
      "11-145",
      "11-146",
      "11-32",
      "11-40",
      "11-47",
      "110-12",
      "110-16",
      "110-19",
      "110-45",
      "110-48",
      "110-6",
      "110-61",
      "110-63",
      "110-65",
      "110-67",
      "110-8",
      "110-87",
      "110-91",
      "110-94",
      "111-28",
      "111-30",
      "111-31",
      "111-43",
      "111-60",
      "112-102",
      "112-104",
      "112-106",
      "112-110",
      "112-111",
      "112-116",
      "112-124",
      "112-125",
      "112-137",
      "112-139",
      "112-141",
      "112-142",
      "112-21",
      "112-22",
      "112-23",
      "112-26",
      "112-27",
      "112-35",
      "112-36",
      "112-46",
      "112-47",
      "112-61",
      "112-62",
      "112-63",
      "112-66",
      "112-78",
      "112-95",
      "112-96",
      "112-97",
      "113-1",
      "113-2",
      "113-47",
      "113-5",
      "113-6",
      "113-64",
      "113-65",
      "113-67",
      "113-68",
      "113-69",
      "113-70",
      "113-73",
      "113-76",
      "113-80",
      "113-82",
      "113-85",
      "114-129",
      "114-130",
      "114-140",
      "114-4",
      "114-5",
      "114-7",
      "114-92",
      "114-94",
      "114-97",
      "114A-114",
      "114A-117",
      "114A-17",
      "114A-66",
      "114A-68",
      "115-103",
      "115-12",
      "115-16",
      "115-33",
      "115-5",
      "115-57",
      "115-58",
      "115-64",
      "115-66",
      "115-67",
      "115-70",
      "115-71",
      "115-72",
      "115-8",
      "115-86",
      "115-90",
      "115-96",
      "115-97",
      "116-100",
      "116-114",
      "116-117",
      "116-118",
      "116-119",
      "116-12",
      "116-13",
      "116-14",
      "116-16",
      "116-2",
      "116-20",
      "116-22",
      "116-23",
      "116-24",
      "116-28",
      "116-31",
      "116-34",
      "116-35",
      "116-43",
      "116-5",
      "116-62",
      "116-63",
      "116-64",
      "116-65",
      "116-75",
      "116-76",
      "116-79",
      "116-81",
      "116-82",
      "116-83",
      "116-88",
      "116-92",
      "116-99",
      "117-102",
      "117-103",
      "117-15",
      "117-20",
      "117-26",
      "117-29",
      "117-40",
      "117-41",
      "117-5",
      "117-51",
      "117-52",
      "117-53",
      "117-55",
      "117-57",
      "117-58",
      "117-64",
      "117-70",
      "117-71",
      "117-73",
      "117-76",
      "118-15",
      "118-16",
      "118-2",
      "118-25",
      "118-27",
      "118-30",
      "118-33",
      "118-34",
      "118-35",
      "118-51",
      "118-55",
      "118-64",
      "118-65",
      "118-67",
      "118-7",
      "118-8",
      "118-80",
      "118-81",
      "119-112",
      "119-23",
      "119-33",
      "119-36",
      "119-51",
      "119-53",
      "119-55",
      "119-56",
      "119-65",
      "119-82",
      "119-87",
      "119-89",
      "119-92",
      "119-94",
      "119-95",
      "12-19",
      "120-48",
      "121-113",
      "121-13",
      "121-16",
      "121-17",
      "121-2",
      "121-46",
      "121-6",
      "121-62",
      "121-94",
      "122-107",
      "122-125",
      "122-176",
      "122-184",
      "122-188",
      "122-198",
      "122-199",
      "122-25",
      "122-40",
      "123-18",
      "123-22",
      "123-27",
      "123-32",
      "123-33",
      "123-48",
      "123-9",
      "124-16",
      "124-38",
      "124-48",
      "124-63",
      "124-88",
      "124-90",
      "124-91",
      "125-73",
      "125-80",
      "125-99",
      "126-167",
      "126-172",
      "126-173",
      "126-174",
      "126-29",
      "127-119",
      "127-126",
      "127-132",
      "127-156",
      "127-164",
      "127-169",
      "127-6",
      "127-94",
      "128-63",
      "128-68",
      "128-70",
      "128-71",
      "128-72",
      "128-73",
      "129-11",
      "129-47",
      "129-54",
      "129-55",
      "129-58",
      "129-59",
      "129-9",
      "13-16",
      "13-21",
      "13-23",
      "130-121",
      "130-128",
      "130-135",
      "130-146",
      "130-16",
      "130-167",
      "131-38",
      "131-40",
      "131-47",
      "131-50",
      "131-65",
      "131-68",
      "131-70",
      "132-137",
      "132-138",
      "132-152",
      "132-156",
      "132-157",
      "132-25",
      "132-54",
      "132-55",
      "133-23",
      "133-3",
      "133-33",
      "133-36",
      "133-50",
      "133-51",
      "133-61",
      "133-9",
      "134-1",
      "134-10",
      "134-14",
      "134-15",
      "134-16",
      "134-2",
      "134-20",
      "134-21",
      "134-27",
      "134-28",
      "134-3",
      "134-32",
      "134-33",
      "134-36",
      "134-39",
      "134-4",
      "134-44",
      "134-46",
      "134-52",
      "134-54",
      "134-55",
      "134-59",
      "134-6",
      "134-7",
      "134-9",
      "135-1",
      "135-10",
      "135-102",
      "135-106",
      "135-108",
      "135-109",
      "135-111",
      "135-112",
      "135-113",
      "135-114",
      "135-12",
      "135-123",
      "135-145",
      "135-19",
      "135-2",
      "135-20",
      "135-21",
      "135-22",
      "135-23",
      "135-25",
      "135-33",
      "135-34",
      "135-39",
      "135-41",
      "135-42",
      "135-43",
      "135-44",
      "135-45",
      "135-5",
      "135-50",
      "135-51",
      "135-81",
      "135-85",
      "135-97",
      "136-11",
      "136-12",
      "136-13",
      "136-15",
      "136-19",
      "136-2",
      "136-20",
      "136-21",
      "136-22",
      "136-23",
      "136-29",
      "136-34",
      "136-37",
      "136-39",
      "136-9",
      "137-1",
      "137-16",
      "137-2",
      "137-35",
      "137-38",
      "137-39",
      "137-42",
      "138-2",
      "138-33",
      "139-1",
      "139-12",
      "139-14",
      "139-16",
      "139-197",
      "139-21",
      "139-22",
      "139-23",
      "139-25",
      "139-26",
      "139-61",
      "139-62",
      "139-78",
      "139-8",
      "139-85",
      "139-86",
      "139-95",
      "14-26",
      "14-36",
      "14-39",
      "14-41",
      "14-44",
      "14-45",
      "14-47",
      "14-50",
      "14-51",
      "14-58",
      "14-64",
      "140-10",
      "140-134",
      "140-136",
      "140-138",
      "140-144",
      "140-148",
      "140-149",
      "140-156",
      "140-157",
      "140-61",
      "140-67",
      "140-9",
      "140-90",
      "140-91",
      "141-65",
      "141-69",
      "141-76",
      "141-87",
      "141-89",
      "141-92",
      "142-11",
      "142-112",
      "142-115",
      "142-119",
      "142-128",
      "142-130",
      "142-18",
      "142-21",
      "142-29",
      "142-43",
      "142-44",
      "142-47",
      "142-48",
      "142-49",
      "142-50",
      "142-80",
      "142-85",
      "142-86",
      "142-87",
      "143-11",
      "143-13",
      "143-17",
      "143-19",
      "143-20",
      "143-4",
      "143-7",
      "144-1",
      "145-10",
      "145-11",
      "145-14",
      "145-29",
      "145-36",
      "145-37",
      "145-38",
      "145-39",
      "145-42",
      "145-45",
      "145-46",
      "145-9",
      "146-11",
      "146-14",
      "146-15",
      "146-20",
      "146-54",
      "146-7",
      "146-82",
      "146-87",
      "146-89",
      "146-9",
      "146-90",
      "146-91",
      "146A-110",
      "146A-117",
      "146A-137",
      "146A-26",
      "146A-27",
      "146A-29",
      "146A-63",
      "146A-67",
      "146A-72",
      "146A-74",
      "147-12",
      "147-24",
      "147-30",
      "147-31",
      "147-35",
      "147-36",
      "147-38",
      "147-39",
      "147-41",
      "147-46",
      "147-56",
      "147-58",
      "147-59",
      "147-60",
      "149-1",
      "149-108",
      "149-23",
      "149-24",
      "149-29",
      "149-30",
      "149-38",
      "149-41",
      "149-53",
      "149-6",
      "149-65",
      "149-8",
      "149-93",
      "149-97",
      "15-28",
      "15-29",
      "15-3",
      "15-30",
      "15-31",
      "150-110",
      "150-123",
      "150-125",
      "150-137",
      "150-146",
      "150-67",
      "150-68",
      "150-72",
      "150-76",
      "150-80",
      "150-81",
      "150-98",
      "151-13",
      "151-14",
      "151-54",
      "151-75",
      "151-87",
      "152-17",
      "152-18",
      "152-25",
      "152-52",
      "152-55",
      "153-20",
      "153-28",
      "153-3",
      "153-35",
      "153-36",
      "153-58",
      "153-59",
      "153-6",
      "153-66",
      "153-7",
      "153-71",
      "153-78",
      "153-79",
      "153-83",
      "153-84",
      "153-85",
      "153-86",
      "153-87",
      "153-88",
      "154-101",
      "154-112",
      "154-114",
      "154-130",
      "154-14",
      "154-15",
      "154-16",
      "154-29",
      "154-30",
      "154-38",
      "154-42",
      "154-46",
      "154-47",
      "154-48",
      "154-62",
      "154-91",
      "154-98",
      "155-10",
      "155-11",
      "155-13",
      "155-14",
      "155-25",
      "155-28",
      "155-29",
      "155-30",
      "155-33",
      "155-39",
      "155-4",
      "155-43",
      "155-6",
      "155-7",
      "155-8",
      "156-100",
      "156-107",
      "156-11",
      "156-12",
      "156-13",
      "156-2",
      "156-25",
      "156-30",
      "156-33",
      "156-37",
      "156-41",
      "156-45",
      "156-46",
      "156-47",
      "156-53",
      "156-63",
      "156-66",
      "156-67",
      "156-70",
      "156-83",
      "156-86",
      "156-88",
      "156-91",
      "156-97",
      "157-1",
      "157-19",
      "157-20",
      "157-23",
      "157-26",
      "157-5",
      "157-51",
      "157-6",
      "157-61",
      "157-62",
      "157-64",
      "157-66",
      "157-68",
      "157-69",
      "158-25",
      "158-28",
      "159-1",
      "16-11",
      "16-23",
      "16-24",
      "16-28",
      "16-30",
      "16-32",
      "16-34",
      "16-6",
      "160-11",
      "160-14",
      "160-30",
      "160-37",
      "160-38",
      "160-48",
      "160-55",
      "160-57",
      "160-59",
      "160-60",
      "160-69",
      "161-3",
      "161-5",
      "161-58",
      "161-73",
      "161-76",
      "161-85",
      "161-93",
      "161-94",
      "162-26",
      "162-31",
      "162-32",
      "162-36",
      "162-49",
      "162-54",
      "162-61",
      "162-66",
      "162-67",
      "162-69",
      "164-5",
      "164-7",
      "165-24",
      "165-34",
      "165-53",
      "165-55",
      "165-56",
      "165-57",
      "165-60",
      "166-1",
      "166-21",
      "166-4",
      "166-70",
      "166-71",
      "166-72",
      "166-80",
      "166-85",
      "167-11",
      "167-18",
      "167-27",
      "167-40",
      "167-45",
      "167-46",
      "167-6",
      "167-69",
      "167-96",
      "167-97",
      "168-13",
      "168-21",
      "168-22",
      "168-25",
      "168-32",
      "168-33",
      "168-36",
      "168-38",
      "168-41",
      "168-57",
      "168-59",
      "168-60",
      "168-64",
      "168-7",
      "169-100",
      "169-102",
      "169-12",
      "169-14",
      "169-3",
      "169-4",
      "169-42",
      "169-46",
      "169-47",
      "169-5",
      "169-50",
      "169-69",
      "169-79",
      "169-84",
      "169-93",
      "169-94",
      "169-98",
      "169-99",
      "17-6",
      "17-64",
      "17-74",
      "17-84",
      "17-89",
      "17-91",
      "170-19",
      "170-30",
      "170-35",
      "170-39",
      "170-4",
      "170-5",
      "171-1",
      "172-108",
      "172-109",
      "172-12",
      "172-14",
      "172-15",
      "172-16",
      "172-2",
      "172-21",
      "172-29",
      "172-3",
      "172-36",
      "172-41",
      "172-51",
      "172-59",
      "172-61",
      "172-62",
      "172-63",
      "172-65",
      "172-69",
      "172-71",
      "172-73",
      "172-99",
      "173-101",
      "173-16",
      "173-18",
      "173-19",
      "173-20",
      "173-24",
      "173-40",
      "173-41",
      "173-43",
      "173-51",
      "173-53",
      "173-60",
      "173-61",
      "173-64",
      "173-67",
      "173-71",
      "173-74",
      "173-78",
      "173-81",
      "173-91",
      "174-100",
      "174-25",
      "174-26",
      "174-35",
      "174-37",
      "174-42",
      "174-49",
      "174-51",
      "174-53",
      "174-56",
      "174-70",
      "175-10",
      "175-35",
      "175-36",
      "175-37",
      "175-56",
      "175-64",
      "175-68",
      "175-75",
      "175-78",
      "175-84",
      "176-10",
      "176-13",
      "176-15",
      "176-18",
      "176-2",
      "176-34",
      "176-38",
      "176-43",
      "176-50",
      "176-51",
      "176-53",
      "176-57",
      "176-58",
      "176-64",
      "176-66",
      "176-68",
      "176-74",
      "176-75",
      "177-15",
      "177-17",
      "177-177",
      "177-18",
      "177-19",
      "177-21",
      "177-22",
      "177-29",
      "177-3",
      "177-34",
      "177-37",
      "177-38",
      "177-41",
      "177-42",
      "177-45",
      "177-51",
      "177-6",
      "177-66",
      "177-71",
      "177-75",
      "177-78",
      "177-79",
      "177-8",
      "178-1",
      "178-106",
      "178-107",
      "178-114",
      "178-117",
      "178-118",
      "178-121",
      "178-122",
      "178-132",
      "178-133",
      "178-21",
      "178-43",
      "178-52",
      "179-2",
      "179-36",
      "179-37",
      "179-42",
      "179-73",
      "179-87",
      "179-88",
      "18-64",
      "18-65",
      "18-74",
      "18-75",
      "18-77",
      "180-1",
      "180-12",
      "180-15",
      "180-33",
      "180-43",
      "180-44",
      "180-45",
      "180-46",
      "180-57",
      "180-69",
      "180-70",
      "180-71",
      "181-189",
      "181-190",
      "181-37",
      "181-47",
      "181-52",
      "181-65",
      "181-80",
      "181-88",
      "182-13",
      "182-32",
      "182-46",
      "182-57",
      "182-84",
      "182-86",
      "182-88",
      "182-98",
      "183-100",
      "183-119",
      "183-123",
      "183-127",
      "183-128",
      "183-47",
      "183-67",
      "183-74",
      "183-92",
      "183-97",
      "183-99",
      "184-106",
      "184-107",
      "184-12",
      "184-159",
      "184-168",
      "184-172",
      "184-191",
      "184-192",
      "184-197",
      "184-198",
      "184-199",
      "184-2",
      "184-31",
      "184-35",
      "184-44",
      "185-26",
      "185-56",
      "185-57",
      "185-58",
      "185-59",
      "186-90",
      "186-96",
      "186-99",
      "187-59",
      "188-113",
      "188-122",
      "188-123",
      "188-143",
      "188-41",
      "188-69",
      "189-102",
      "189-104",
      "189-16",
      "189-52",
      "189-57",
      "189-72",
      "189-8",
      "189-88",
      "189-91",
      "189-92",
      "189-93",
      "19-10",
      "19-23",
      "19-24",
      "19-53",
      "190-102",
      "190-154",
      "190-21",
      "190-210",
      "190-229",
      "190-233",
      "190-248",
      "190-258",
      "190-267",
      "190-268",
      "190-270",
      "190-271",
      "190-272",
      "190-283",
      "190-33",
      "190-42",
      "190-48",
      "191-110",
      "191-112",
      "191-65",
      "191-85",
      "192-113",
      "192-12",
      "192-121",
      "192-125",
      "192-13",
      "192-14",
      "192-140",
      "192-141",
      "192-144",
      "192-15",
      "192-151",
      "192-156",
      "192-161",
      "192-174",
      "192-176",
      "192-177",
      "192-30",
      "192-31",
      "192-39",
      "192-5",
      "192-56",
      "192-70",
      "192-77",
      "192-8",
      "192-83",
      "192-9",
      "193-109",
      "193-123",
      "193-124",
      "193-135",
      "193-147",
      "193-17",
      "193-180",
      "193-184",
      "193-213",
      "193-8",
      "194-12",
      "194-18",
      "194-43",
      "194-67",
      "194-7",
      "194-76",
      "194-78",
      "195-115",
      "195-127",
      "195-143",
      "195-153",
      "195-156",
      "195-157",
      "195-160",
      "195-161",
      "195-169",
      "195-60",
      "195-86",
      "195-91",
      "195-94",
      "196-120",
      "196-122",
      "196-124",
      "196-129",
      "196-137",
      "196-138",
      "196-149",
      "196-154",
      "196-163",
      "196-164",
      "196-21",
      "196-3",
      "196-35",
      "196-44",
      "196-45",
      "196-46",
      "196-47",
      "196-5",
      "196-81",
      "197-3",
      "197-4",
      "197-5",
      "198-10",
      "198-15",
      "198-16",
      "198-20",
      "198-24",
      "198-25",
      "198-26",
      "198-27",
      "198-28",
      "198-40",
      "198-67",
      "198-75",
      "198-83",
      "198-9",
      "198-92",
      "199-110",
      "199-112",
      "199-158",
      "199-175",
      "199-30",
      "199-31",
      "199-33",
      "199-36",
      "199-48",
      "199-67",
      "199-73",
      "199-74",
      "199-85",
      "199-86",
      "199-89",
      "199-91",
      "199-92",
      "199-98",
      "1A-103",
      "1A-104",
      "1A-105",
      "1A-171",
      "1A-172",
      "1A-178",
      "1A-179",
      "1A-183",
      "1A-186",
      "1A-187",
      "1A-189",
      "1A-190",
      "1A-191",
      "1A-192",
      "1A-195",
      "1A-197",
      "1A-200",
      "1A-201",
      "1A-207",
      "1A-209",
      "1A-211",
      "1A-212",
      "1A-213",
      "1A-214",
      "1A-215",
      "1A-6",
      "1A-67",
      "1A-69",
      "1A-70",
      "1A-81",
      "1A-82",
      "1A-86",
      "1A-87",
      "20-104",
      "20-31",
      "20-71",
      "20-75",
      "200-100",
      "200-22",
      "200-57",
      "200-90",
      "200-91",
      "201-108",
      "201-112",
      "201-113",
      "201-121",
      "201-64",
      "201-74",
      "201-76",
      "201-77",
      "201.5-1",
      "201.5-19",
      "201.5-21",
      "201.5-27",
      "201.5-73",
      "202-107",
      "202-130",
      "202-131",
      "202-132",
      "202-17",
      "202-18",
      "202-19",
      "202-20",
      "202-21",
      "202-26",
      "202-27",
      "202-28",
      "202-48",
      "202-49",
      "202-56",
      "202-90",
      "202-95",
      "203A-10",
      "203A-15",
      "203A-69",
      "203A-7",
      "203A-74",
      "203A-76",
      "203A-77",
      "203A-8",
      "203B-25",
      "203B-52",
      "203B-57",
      "203B-66",
      "203B-69",
      "204-135",
      "204-146",
      "204-147",
      "204-150",
      "204-152",
      "204-8",
      "204-80",
      "205-40",
      "206-13",
      "206-31",
      "206-44",
      "206-45",
      "206-47",
      "206-48",
      "206-52",
      "206-70",
      "207-60",
      "207-67",
      "207-73",
      "208-15",
      "208-3",
      "209-48",
      "209-52",
      "209-61",
      "209-71",
      "21-117",
      "21-118",
      "21-120",
      "21-121",
      "21-125",
      "210-23",
      "210-27",
      "210-3",
      "210-33",
      "210-35",
      "210-4",
      "210-40",
      "210-46",
      "210-55",
      "210-57",
      "210-58",
      "210-9",
      "211-1",
      "211-15",
      "211-17",
      "211-21",
      "211-24",
      "211-33",
      "211-34",
      "211-36",
      "211-38",
      "211-54",
      "211-56",
      "211-8",
      "211-9",
      "212-1",
      "212-14",
      "212-19",
      "212-23",
      "212-24",
      "212-29",
      "212-35",
      "212-47",
      "212-49",
      "212-51",
      "212-52",
      "212-53",
      "212-55",
      "212-58",
      "212-6",
      "212-7",
      "213-2A",
      "214-1",
      "214-13",
      "214-33",
      "214-35",
      "214-37",
      "214-7",
      "214-8",
      "215-12",
      "215-13",
      "215-14",
      "215-15",
      "215-18",
      "215-19",
      "215-22",
      "215-33",
      "215-34",
      "215-50",
      "215-8",
      "216-15",
      "216-3",
      "216-32",
      "216-34",
      "216-35",
      "216-36",
      "216-6",
      "216-7",
      "216-8",
      "217-11",
      "217-12",
      "217-13",
      "217-18",
      "217-21",
      "217-22",
      "217-23",
      "217-24",
      "217-3",
      "218-11",
      "218-26",
      "218-55",
      "218-59",
      "218-60",
      "218-8",
      "219-12",
      "219-14",
      "219-22",
      "219-28",
      "219-29",
      "219-37",
      "219-7",
      "219-8",
      "22-109",
      "22-128",
      "22-132",
      "22-46",
      "22-60",
      "22-94",
      "220-107",
      "220-142",
      "220-165",
      "220-176",
      "220-177",
      "220-54",
      "220-72",
      "221-10",
      "221-114",
      "221-52",
      "221-77",
      "221-87",
      "222-2",
      "222-26",
      "222-28",
      "222-41",
      "223-1",
      "223-19",
      "223-2",
      "223-28",
      "223-29",
      "223-45",
      "223-9",
      "224-12",
      "224-13",
      "224-16",
      "224-27",
      "224-32",
      "224-37",
      "224-39",
      "224-7",
      "224-8",
      "225-3",
      "225-34",
      "225-45",
      "225-5",
      "225-55",
      "225-7",
      "225-8",
      "226-10",
      "226-23",
      "226-30",
      "226-34",
      "226-35",
      "226-46",
      "226-49",
      "226-58",
      "226-59",
      "226-65",
      "226-67",
      "227-100",
      "227-113",
      "227-22",
      "227-87",
      "227-90",
      "227-94",
      "228-1",
      "228-3",
      "229-107",
      "229-117",
      "229-12",
      "229-121",
      "229-122",
      "229-123",
      "229-124",
      "229-125",
      "229-130",
      "229-135",
      "229-164",
      "229-20",
      "229-41",
      "229-90",
      "229-91",
      "229-92",
      "229-93",
      "229-94",
      "229-95",
      "229-96",
      "229-97",
      "229-98",
      "229-99",
      "23-149",
      "23-26",
      "23-4",
      "23-69",
      "23-90",
      "230-104",
      "230-12",
      "230-127",
      "230-133",
      "230-20",
      "230-48",
      "230-49",
      "230-5",
      "230-60",
      "230-71",
      "230-94",
      "231-14",
      "231-44",
      "231-5",
      "231-51",
      "231-9",
      "232-120",
      "232-125",
      "232-57",
      "232-71",
      "233-107",
      "233-109",
      "233-125",
      "233-168",
      "233-169",
      "233-172",
      "233-173",
      "233-174",
      "233-189",
      "233-198",
      "233-204",
      "234-124",
      "234-125",
      "234-126",
      "234-127",
      "234-129",
      "234-130",
      "234-131",
      "234-132",
      "234-133",
      "234-134",
      "234-136",
      "234-137",
      "234-138",
      "234-139",
      "234-141",
      "234-142",
      "234-143",
      "234-144",
      "234-145",
      "234-146",
      "234-147",
      "234-150",
      "234-165",
      "234-173",
      "234-178",
      "234-185",
      "234-191",
      "234-192",
      "234-38",
      "235-2",
      "235-26",
      "235-27",
      "235-31",
      "235-34",
      "235-35",
      "235-65",
      "235-76",
      "235-77",
      "235-82",
      "235-84",
      "235-85",
      "235-88",
      "235-89",
      "235-9",
      "236-107",
      "236-11",
      "236-130",
      "236-135",
      "236-136",
      "236-147",
      "236-148",
      "236-24",
      "236-27",
      "236-3",
      "236-37",
      "236-45",
      "236-60",
      "236-95",
      "236-98",
      "236-99",
      "237-49",
      "237-56",
      "237-57",
      "237-77",
      "237-79",
      "238-10",
      "238-44",
      "238-6",
      "238-63",
      "238-73",
      "238-78",
      "238-82",
      "238-85",
      "239-2",
      "239-21",
      "239-27",
      "239-48",
      "239-55",
      "239-69",
      "24-123",
      "24-13",
      "24-133",
      "24-139",
      "24-32",
      "24-90",
      "24-94",
      "240-23",
      "240-42",
      "240-50",
      "240-52",
      "241-10",
      "241-12",
      "241-13",
      "241-14",
      "242-33",
      "242-34",
      "242-36",
      "242-38",
      "242A-100",
      "242A-102",
      "242A-115",
      "242A-134",
      "242A-141",
      "242A-158",
      "242A-23",
      "242A-75",
      "242B-49",
      "242B-52",
      "242B-56",
      "243-1",
      "245-1",
      "246-15",
      "246-26",
      "246-9",
      "246A-13",
      "246A-14",
      "246A-59",
      "247-10",
      "247-11",
      "247-113",
      "247-114",
      "247-126",
      "247-130",
      "247-131",
      "247-136",
      "247-143",
      "247-144",
      "247-145",
      "247-146",
      "247-147",
      "247-149",
      "247-150",
      "247-151",
      "247-152",
      "247-153",
      "247-160",
      "247-162",
      "247-163",
      "247-164",
      "247-173",
      "247-174",
      "247-185",
      "247-207",
      "247-208",
      "247-211",
      "247-212",
      "247-214",
      "247-220",
      "247-221",
      "247-222",
      "247-223",
      "247-224",
      "247-226",
      "247-59",
      "247-78",
      "247-79",
      "247-85",
      "247-91",
      "248-18",
      "248-79",
      "248-82",
      "248-86",
      "248-90",
      "249-14",
      "249-15",
      "249-16",
      "249-17",
      "249-18",
      "249-199",
      "249-57",
      "25-152",
      "25-27",
      "25-36",
      "250-224",
      "251-113",
      "251-203",
      "251-221",
      "251-251",
      "251-255",
      "252-114",
      "252-160",
      "252-169",
      "252-171",
      "252-172",
      "252A-122",
      "252A-136",
      "252A-137",
      "252A-138",
      "252A-152",
      "252A-153",
      "252A-154",
      "252A-155",
      "252A-157",
      "253-119",
      "253-157",
      "253-167",
      "253-69",
      "253-71",
      "253-72",
      "253-73",
      "253-74",
      "253-75",
      "253-8",
      "253-85",
      "254-10",
      "254-100",
      "254-102",
      "254-11",
      "254-12",
      "254-13",
      "254-16",
      "254-19",
      "254-23",
      "254-24",
      "254-26",
      "254-29",
      "254-30",
      "254-31",
      "254-32",
      "254-34",
      "254-35",
      "254-4",
      "254-53",
      "254-54",
      "254-65",
      "254-86",
      "255-100",
      "255-104",
      "255-106",
      "255-107",
      "255-17",
      "255-64",
      "255-82",
      "256-103",
      "256-106",
      "256-11",
      "256-12",
      "256-34",
      "256-35",
      "256-80",
      "256-84",
      "256-85",
      "256-92",
      "256-97",
      "257-24",
      "257-37",
      "257-42",
      "257-47",
      "257-53",
      "257-56",
      "257-60",
      "257-8",
      "258-34",
      "258-57",
      "258-64",
      "258-68",
      "259-1",
      "259-38",
      "259-6",
      "26-180",
      "26-27",
      "26-64",
      "26-76",
      "26-77",
      "260-32",
      "260-46",
      "260-54",
      "260-63",
      "260-73",
      "260-74",
      "260-76",
      "260-77",
      "260-80",
      "261-124",
      "261-132",
      "261-167",
      "261-69",
      "261-74",
      "261-77",
      "261-85",
      "262-133",
      "262-2",
      "263-111",
      "263-131",
      "264-102",
      "264-105",
      "264-106",
      "264-34",
      "264-97",
      "265A-29",
      "265A-31",
      "265A-39",
      "265A-43",
      "265A-7",
      "265B-26",
      "265B-28",
      "265B-34",
      "265B-56",
      "265B-57",
      "265B-59",
      "265B-60",
      "265B-61",
      "265C-25",
      "265D-52",
      "265D-53",
      "265D-55",
      "265D-57",
      "266-26",
      "266-31",
      "266-32",
      "266-33",
      "266-34",
      "266-39",
      "266-4",
      "266-40",
      "267.1-240",
      "267.1-267",
      "267.1-276",
      "267.1-277",
      "267.1-278",
      "267.1-279",
      "267.1-281",
      "267.1-282",
      "267.2-263",
      "267.2-264",
      "267.2-267",
      "267.2-270",
      "267.2-272",
      "267.2-273",
      "267.3-226",
      "267.3-228",
      "267.3-253",
      "267.3-254",
      "267.3-268",
      "267.3-275",
      "267.3-276",
      "267.3-277",
      "267.3-278",
      "267.3-279",
      "267.3-280",
      "267.3-285",
      "267.4-176",
      "267.4-209",
      "267.4-218",
      "267.4-221",
      "267.4-247",
      "267.4-254",
      "267.4-264",
      "267.4-284",
      "267.4-285",
      "267.4-288",
      "267.4-295",
      "267.4-296",
      "267.4-305",
      "267.4-307",
      "267.4-310",
      "267.4-311",
      "267.4-312",
      "267.4-313",
      "267.4-315",
      "267.4-316",
      "267.4-319",
      "267.4-320",
      "267.4-322",
      "267.4-323",
      "267A-168",
      "267A-209",
      "267A-250",
      "267B-147",
      "267B-203",
      "267B-216",
      "267C-46",
      "267C-56",
      "267C-62",
      "267C-65",
      "267C-66",
      "267C-70",
      "267C-71",
      "267C-73",
      "267C-86",
      "267C-91",
      "267C-92",
      "267C-95",
      "267D-256",
      "267D-282",
      "267D-285",
      "267D-286",
      "267D-289",
      "267D-293",
      "267D-294",
      "267D-299",
      "267D-300",
      "267D-303",
      "267D-305",
      "267D-307",
      "267D-310",
      "267D-311",
      "267D-312",
      "267D-313",
      "267D-315",
      "267D-316",
      "267D-319",
      "267D-322",
      "267D-325",
      "267D-329",
      "267D-332",
      "267D-333",
      "267D-334",
      "267D-339",
      "267D-340",
      "267E-17",
      "267E-234",
      "267E-242",
      "267E-244",
      "267E-269",
      "267E-279",
      "267E-280",
      "267E-282",
      "267E-283",
      "267E-284",
      "267E-285",
      "267E-290",
      "267E-291",
      "267E-292",
      "267E-293",
      "267F-274",
      "267F-275",
      "267F-279",
      "267F-281",
      "267F-283",
      "267F-284",
      "267F-286",
      "267F-291",
      "267F-293",
      "267F-295",
      "267F-296",
      "267F-298",
      "267F-301",
      "267F-391",
      "267F-392",
      "267F-393",
      "268A-40",
      "268A-53",
      "268B-15",
      "268B-16",
      "268B-41",
      "268B-46",
      "268B-47",
      "268B-8",
      "268C-30",
      "268C-32",
      "268C-35",
      "268C-36",
      "268C-37",
      "269-117",
      "269-127",
      "269-136",
      "269-138",
      "269-20",
      "269-71",
      "269.5-101",
      "27-6",
      "27-69",
      "27-70",
      "27-81",
      "27-82",
      "27-86",
      "27-88",
      "27-93",
      "27-97",
      "271-16",
      "271-20",
      "271-22",
      "271-23",
      "271-44",
      "271-45",
      "271-52",
      "271-6",
      "271-72",
      "271-77",
      "271-8",
      "272-10",
      "272-12",
      "272-17",
      "273-1",
      "273-2",
      "273-20",
      "273-29",
      "273-35",
      "273-40",
      "273-42",
      "273-43",
      "273-48",
      "273-51",
      "274-1F",
      "274-1G",
      "274-1H",
      "274-2",
      "28-23",
      "28-31",
      "28-33",
      "28-39",
      "29-39",
      "29-45",
      "29-49",
      "29-50",
      "30-35",
      "30-38",
      "30-40",
      "30-41",
      "30-42",
      "30-43",
      "30-44",
      "31-15",
      "31-20",
      "31-21",
      "31-22",
      "32-37",
      "32-52",
      "32-53",
      "33-105",
      "33-113",
      "33-65",
      "33-88",
      "33-93",
      "34-110",
      "34-111",
      "34-133",
      "34-136",
      "34-137",
      "34-138",
      "34-141",
      "34-61",
      "34-8",
      "35-100",
      "35-101",
      "35-36",
      "35-87",
      "35-88",
      "35-89",
      "35-92",
      "35-95",
      "36-110",
      "36-124",
      "36-164",
      "36-218",
      "36-247",
      "36-73",
      "36-79",
      "36-96",
      "37-127",
      "37-128",
      "37-35",
      "37-47",
      "37-48",
      "37-68",
      "37-82",
      "38-1",
      "39-169",
      "39-173",
      "39-174",
      "39-179",
      "39-181",
      "39-88",
      "39-96",
      "40-171",
      "40-197",
      "40-243",
      "40-253",
      "40-258",
      "40-75",
      "40-8",
      "41-26",
      "41-28",
      "41-29",
      "41-36",
      "41-37",
      "41-38",
      "42-11",
      "42-33",
      "42-68",
      "42-70",
      "42-86",
      "42-87",
      "42-88",
      "42-97",
      "42-98",
      "43-63",
      "43-70",
      "43-71",
      "43-73",
      "43-76",
      "43-77",
      "43-78",
      "43A-16",
      "43A-19",
      "43A-21",
      "43A-24",
      "43A-28",
      "43A-29",
      "44-100",
      "44-101",
      "44-102",
      "44-104",
      "44-105",
      "44-106",
      "44-107",
      "44-71",
      "44-93",
      "44-95",
      "44-99",
      "46-12",
      "47-83",
      "47-88",
      "47-90",
      "47-94",
      "47-97",
      "48-129",
      "48-154",
      "48-156",
      "48-157",
      "48-158",
      "48-159",
      "52A-21",
      "52A-22",
      "52A-31",
      "53-54",
      "53-59",
      "53-60",
      "53-61",
      "53-63",
      "53-64",
      "53-71",
      "53-72",
      "54-10",
      "54-16",
      "54-19",
      "54-25",
      "54-7",
      "55-16",
      "55-18",
      "55-22",
      "55-23",
      "55-26",
      "55-9",
      "56-4",
      "56-5",
      "56-7",
      "56-8",
      "56-9",
      "57-169",
      "57-170",
      "57-173",
      "58-120",
      "58-158",
      "58-161",
      "58-162",
      "58-163",
      "58-165",
      "58-74",
      "58-95",
      "59-34",
      "59-37",
      "59-39",
      "59-40",
      "60-6",
      "61-14",
      "62-18",
      "62-39",
      "62-40",
      "62-41",
      "62-42",
      "63-1",
      "63-118",
      "63-128",
      "63-131",
      "63-132",
      "63-134",
      "63-135",
      "64-6",
      "64-7",
      "65-10",
      "65-12",
      "65-13",
      "65-14",
      "65-3",
      "65-45",
      "65-47",
      "65-48",
      "65-5",
      "65-52",
      "66-10",
      "66-11",
      "66-12",
      "66-124",
      "66-125",
      "66-152",
      "66-153",
      "66-29",
      "66-73",
      "66-74",
      "66-82",
      "66-99",
      "67-14",
      "67-47",
      "67-48",
      "67-55",
      "67-56",
      "67-61",
      "67-65",
      "67-66",
      "67-67",
      "68-47",
      "68-50",
      "68-56",
      "68-57",
      "68-58",
      "68-59",
      "68-60",
      "68-74",
      "68-75",
      "68-76",
      "68-77",
      "69-110",
      "69-113",
      "69-115",
      "69-148",
      "69-159",
      "69-165",
      "69-173",
      "69-179",
      "69-180",
      "69-182",
      "69-183",
      "69-62",
      "7-113",
      "7-115",
      "7-29",
      "7-31",
      "7-34",
      "7-35",
      "7-37",
      "70-12",
      "70-22",
      "70-34",
      "70-74",
      "70-84",
      "70-85",
      "70-86",
      "70-88",
      "70-90",
      "70-91",
      "70-92",
      "70-98",
      "70-99",
      "71-55",
      "71-56",
      "71-57",
      "72A-1",
      "73-124",
      "74-1",
      "74-127",
      "74-25",
      "75-112",
      "75-118",
      "75-130",
      "75-168",
      "75-170",
      "75-172",
      "75-33",
      "75-37",
      "75-39",
      "75-4",
      "75-72",
      "75-84",
      "75-89",
      "75-91",
      "75-99",
      "76-11",
      "76-116",
      "76-126",
      "76-13",
      "76-130",
      "76-134",
      "76-135",
      "76-19",
      "76-24",
      "76-4",
      "76-6",
      "76-7",
      "76-85",
      "76-89",
      "76-96",
      "77-19",
      "77-31",
      "77-59",
      "77-64",
      "77-65",
      "77-66",
      "77-69",
      "77-76",
      "77-77",
      "77-92",
      "78-103",
      "78-249",
      "78-47",
      "78-96",
      "79-1",
      "79-112",
      "79-137",
      "79-59",
      "79-72",
      "8-70",
      "8-75",
      "8-76",
      "8-88",
      "8-90",
      "8-91",
      "80-110",
      "80-142",
      "80-165",
      "80-175",
      "80-178",
      "80-7",
      "80-87",
      "81-100",
      "81-103",
      "81-105",
      "81-106",
      "81-107",
      "81-20",
      "81-21",
      "81-3",
      "81-50",
      "82-107",
      "82-47",
      "82-8",
      "83-1",
      "83-13",
      "83-48",
      "83-52",
      "83-80",
      "83-92",
      "84-1",
      "84-101",
      "84-85",
      "84-91",
      "84-97",
      "85-1",
      "85-13",
      "85-63",
      "85-76",
      "85-92",
      "86-105",
      "86-107",
      "86-19",
      "86-23",
      "86-31",
      "86-45",
      "87-103",
      "87-106",
      "87-108",
      "87-112",
      "87-116",
      "87-127",
      "87-14",
      "87-153",
      "87-156",
      "87-157",
      "87-158",
      "87-19",
      "87-37",
      "87-69",
      "87-71",
      "87-8",
      "87-88",
      "87-9",
      "87-94",
      "88-10",
      "88-11",
      "88-12",
      "88-13",
      "88-14",
      "88-47",
      "88-49",
      "88-50",
      "88-52",
      "88-53",
      "88-54",
      "88-67",
      "89-21",
      "89-28",
      "89-46",
      "89-56",
      "9-31",
      "9-40",
      "9-41",
      "9-61",
      "9-89",
      "9-90",
      "90-11",
      "90-122",
      "90-13",
      "90-131",
      "90-133",
      "90-14",
      "90-146",
      "90-155",
      "90-161",
      "90-162",
      "90-169",
      "90-170",
      "90-171",
      "90-175",
      "90-183",
      "90-184",
      "90-193",
      "90-20",
      "90-36",
      "90-42",
      "90-55",
      "90-71",
      "90-95",
      "90-96",
      "91-117",
      "91-118",
      "91-119",
      "91-17",
      "91-195",
      "91-200",
      "91-205",
      "91-208",
      "91-23",
      "91-29",
      "91-7",
      "91-70",
      "91-72",
      "91-79",
      "91-87",
      "91-98",
      "91-99",
      "92-117",
      "92-118",
      "92-119",
      "92-123",
      "92-124",
      "92-125",
      "92-127",
      "92-128",
      "92-130",
      "92-57",
      "92-88",
      "93-100",
      "93-115",
      "93-135",
      "93-18",
      "93-19",
      "93-64",
      "93-67",
      "93-73",
      "93-75",
      "93-78",
      "93-99",
      "94-141",
      "94-151",
      "94-158",
      "94-172",
      "94-175",
      "94-181",
      "94-217",
      "94-25",
      "94-38",
      "94-39",
      "94-40",
      "94-58",
      "94-7",
      "94-87",
      "95-57",
      "95-58",
      "95-60",
      "95-70",
      "95-71",
      "95-72",
      "95-73",
      "95-74",
      "95-75",
      "95-76",
      "95-77",
      "95-78",
      "95-79",
      "96-102",
      "96-103",
      "96-109",
      "96-117",
      "96-118",
      "96-124",
      "96-127",
      "96-149",
      "96-20",
      "96-67",
      "96-7",
      "96-98",
      "97-130",
      "97-135",
      "97-14",
      "97-21",
      "97-27",
      "97-28",
      "97-31",
      "97-32",
      "97-35",
      "97-40",
      "97-60",
      "97-67",
      "97-7",
      "97-73",
      "97-85",
      "97-93",
      "98-24",
      "98-32",
      "98-33",
      "98-38",
      "98-51",
      "98-52",
      "98-67",
      "98-82",
      "99-21",
      "99-27",
      "99-39",
      "99-40",
      "99-42",
      "99-59",
      "99-77",
      "99-81"
    ]
  },
  {
    "exact_match": 1.0,
    "result_match_rate": 1.0,
    "precision": 1.0,
    "recall": 1.0,
    "f1_score": 1.0,
    "generated_count": 57,
    "ground_truth_count": 57,
    "correct_count": 57,
    "query": "Find all parcels that have no more than 2 competing restaurants within 800 meters.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": true,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter restaurant POIs\nrestaurants = poi[poi['business_type'] == 'restaurant']\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\nrestaurants_proj = restaurants.to_crs(epsg=26986)\n\n# Function to count competing restaurants within 800m\ndef count_competing_restaurants(parcel_geom, restaurants_geom, buffer_distance=800):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    count = sum(1 for geom in restaurants_geom if geom is not None and geom.intersects(buffered_geom))\n    return count\n\n# Get restaurant geometries\nrestaurants_geoms = restaurants_proj['geometry'].tolist()\n\n# Calculate competing restaurant count for each parcel\nparcels_proj['competing_restaurants'] = parcels_proj['geometry'].apply(\n    lambda geom: count_competing_restaurants(geom, restaurants_geoms)\n)\n\n# Filter parcels with no more than 2 competing restaurants\nfiltered_parcels = parcels_proj[parcels_proj['competing_restaurants'] <= 2]\n\n# Sort by parcel ID (ml column)\nresult_parcels = filtered_parcels.sort_values('ml')\n\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n\n# Get parcel IDs\nresult_ids = result_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      "242-33",
      "242-34",
      "242-36",
      "242-38",
      "242A-100",
      "242A-102",
      "242A-105",
      "242A-107",
      "242A-109",
      "242A-110",
      "242A-111",
      "242A-112",
      "242A-113",
      "242A-115",
      "242A-116",
      "242A-126",
      "242A-127",
      "242A-131",
      "242A-148",
      "242A-158",
      "242A-159",
      "242A-160",
      "242A-161",
      "242A-162",
      "242A-59",
      "242A-68",
      "242A-72",
      "242A-73",
      "242A-75",
      "242A-91",
      "242A-99",
      "242B-999",
      "243-1",
      "266-1",
      "266-10",
      "266-12",
      "266-13",
      "266-14",
      "266-15",
      "266-16",
      "266-17",
      "266-18",
      "266-19",
      "266-2",
      "266-20",
      "266-21",
      "266-3",
      "266-35",
      "266-36",
      "266-37",
      "266-38",
      "266-4",
      "266-5",
      "266-6",
      "266-7",
      "266-8",
      "266-9"
    ]
  },
  {
    "query": "Find the top 20 parcels in Cambridge with the most diverse mix of residential and commercial land uses within 500 meters.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define commercial and residential use codes\ncommercial_use_codes = ['300', '302', '316', '323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '353', '362', '375', '404', '406', '0340', '0406']\nresidential_use_codes = ['101', '1013', '102', '1020', '1021', '1022', '1023', '1024', '1025', '1026', '103', '1031', '1038', '104', '1044', '105', '1050', '1051', '1054', '1055', '1056', '1058', '106', '1060', '107', '109', '1094', '1095', '1096', '1098', '1099', '1099', '121', '1210', '970', '9700', '940', '9400']\n\n# Filter commercial and residential parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\nresidential_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(residential_use_codes)].copy()\n\n# Function to calculate land use diversity\ndef calculate_diversity(parcel_geom, poi_geoms, buffer_distance=500):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    poi_within_buffer = poi_geoms[poi_geoms.geometry.apply(lambda x: x.intersects(buffered_geom))]\n    \n    poi_types = poi_within_buffer['business_type'].tolist()\n    unique_types = len(set(poi_types))\n    \n    return unique_types\n\n# Get POI geometries\npoi_geoms = poi_proj['geometry']\n\n# Calculate diversity for each parcel\ncommercial_parcels['diversity_index'] = commercial_parcels.geometry.apply(lambda geom: calculate_diversity(geom, poi_geoms))\n\n# Sort by diversity index\ntop_diverse_commercial = commercial_parcels.sort_values('diversity_index', ascending=False).head(20)\n\n# Get parcel IDs\ntop_parcel_ids = top_diverse_commercial['ml'].tolist()\n\n# Print results\nprint(top_parcel_ids)\n"
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.0,
    "precision": 0.0,
    "recall": 0.0,
    "f1_score": 0.0,
    "generated_count": 20,
    "ground_truth_count": 20,
    "correct_count": 0,
    "query": "Find the top 20 commercial parcels in areas with the highest percentage of residents with advanced degrees.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": true,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Filter for commercial parcels\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', \n    '330', '332', '334', '340', '341', '343', '345', '346', \n    '353', '362', '375', '404', '406', '0346', '0406'\n]\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Join with census data to get education percentage\ncensus_buffered = census_proj.geometry.buffer(100).union_all()\ncommercial_parcels_with_census = gpd.sjoin(\n    commercial_parcels,\n    census_proj,\n    how='left',\n    predicate='intersects',\n    lsuffix='ml',\n    rsuffix='census'\n)\n\n# Calculate percentage of residents with advanced degrees\nif 'pct_advanced_degree' in commercial_parcels_with_census.columns:\n    commercial_parcels_with_census['pct_advanced_degree'] = commercial_parcels_with_census['pct_advanced_degree'].fillna(0)\nelse:\n    commercial_parcels_with_census['pct_advanced_degree'] = 0\n\n# Sort by percentage of residents with advanced degrees\nresult_parcels = commercial_parcels_with_census.sort_values('pct_advanced_degree', ascending=False)\n\n# Get top 20 parcels\ntop_parcels = result_parcels.head(20)\n\n# Sort by parcel ID for consistent output\ntop_parcels_sorted = top_parcels.sort_values('ml')\n\n# Convert back to original CRS\ntop_parcels_sorted = top_parcels_sorted.to_crs(parcels.crs)\n\n# Print parcel IDs\nparcel_ids = top_parcels_sorted['ml'].tolist()\nprint(parcel_ids)",
    "generated_ids": [
      "10-16",
      "108-80",
      "11-146",
      "14-45",
      "168-41",
      "174-33",
      "178-118",
      "196-153",
      "1A-201",
      "1A-209",
      "1A-70",
      "228-33",
      "24-133",
      "262-116",
      "265A-31",
      "267E-244",
      "267E-285",
      "41-36",
      "46-12",
      "83-80"
    ]
  },
  {
    "query": "Find the top 20 parcels with the highest consumer spending in surrounding areas.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": false,
    "code": "import pandas as pd\nimport geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspend_data = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Process spending data\nspend_data['ml'] = spend_data['ml'].astype(str)\nparcels['ml'] = parcels['ml'].astype(str)\nspend_data = spend_data.merge(parcels[['ml']], on='ml', how='inner')\nspend_data['total_spend'] = spend_data[['spend_2020', 'spend_2021', 'spend_2022']].sum(axis=1)\nspend_data = spend_data[spend_data['total_spend'].notnull()]\n\n# Project to appropriate CRS\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define function to calculate spending\ndef calculate_surrounding_spending(parcel_geom, poi_geoms, spend_data, buffer_distance=200):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    nearby_poi = poi_geoms[poi_geoms.intersects(buffered_geom)]\n    \n    if nearby_poi.empty:\n        return 0\n    \n    poi_ids = nearby_poi['place_id'].tolist()\n    poi_spend = spend_data[spend_data['place_id'].isin(poi_ids)]\n    \n    if poi_spend.empty:\n        return 0\n    \n    return poi_spend['total_spend'].sum()\n\n# Calculate spending for each parcel\npoi_geoms = poi_proj.geometry\nparcels_proj['surrounding_spending'] = parcels_proj.geometry.apply(\n    lambda geom: calculate_surrounding_spending(geom, poi_geoms, spend_data)\n)\n\n# Filter and sort parcels\nresult_parcels = parcels_proj[parcels_proj['surrounding_spending'] > 0]\ntop_parcels = result_parcels.nlargest(20, 'surrounding_spending')\n\n# Get parcel IDs\ntop_parcel_ids = top_parcels['ml'].tolist()\n\n# Print results\nprint(top_parcel_ids)\n"
  },
  {
    "query": "Find vacant commercial parcels larger than 3000 square feet that are within 800 meters of a subway station.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Load census data\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Load spending data\nspend = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Define projected CRS for Cambridge, MA\ncambridge_crs = 26986\n\n# Project to accurate CRS\nparcels_proj = parcels.to_crs(epsg=cambridge_crs)\n\n# Filter for commercial parcels\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '330', \n    '332', '334', '340', '341', '343', '345', '346', '353', '362', \n    '375', '404', '406', '0340', '0406'\n]\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)]\n\n# Filter for vacant commercial parcels\nvacant_codes = ['300', '302', '323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '353', '362', '375', '404', '406']\nvacant_commercial_parcels = commercial_parcels[commercial_parcels['use_code'].astype(str).isin(vacant_codes)]\n\n# Filter by size > 3000 sq ft\nlarge_vacant_commercial_parcels = vacant_commercial_parcels[vacant_commercial_parcels['land_area'] > 3000]\n\n# Load subway station data from POI\nsubway_stations = poi[poi['business_type'] == 'Subway']\nsubway_stations = subway_stations.to_crs(epsg=cambridge_crs)\n\n# Create 800m buffer around subway stations\nsubway_buffers = [geom.buffer(800) for geom in subway_stations.geometry]\nsubway_union_buffer = gpd.GeoSeries(subway_buffers).union_all()\n\n# Find parcels within 800m of subway stations\nparcels_near_subway = large_vacant_commercial_parcels[large_vacant_commercial_parcels.geometry.intersects(subway_union_buffer)]\n\n# Sort by ml (parcel ID)\nresult_parcels = parcels_near_subway.sort_values('ml')\n\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n\n# Extract parcel IDs\nresult_ids = result_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)"
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.32,
    "precision": 0.32,
    "recall": 1.0,
    "f1_score": 0.48484848484848486,
    "generated_count": 25,
    "ground_truth_count": 8,
    "correct_count": 8,
    "query": "Find commercial parcels zoned for retail use with fewer than 3 competing retail businesses within 300 meters.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": true,
    "code": "import pandas as pd\nimport geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter retail parcels\nretail_use_codes = ['323', '324', '325', '326', '327', '330', '331', '332', '334', '340', '341', '343', '345', '346', '353', '354', '355', '356', '357', '362', '375', '376', '393']\nretail_parcels = parcels[parcels['use_code'].astype(str).isin(retail_use_codes)].copy()\n\n# Project to appropriate CRS\nretail_parcels_proj = retail_parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter retail POI\nretail_poi_types = ['restaurant', 'clothing_store', 'department_store', 'grocery_store', 'convenience_store', 'furniture_store', 'hardware_store', 'electronics_store', 'drugstore']\nretail_poi = poi_proj[poi_proj['business_type'].isin(retail_poi_types)].copy()\n\n# Count competitors\ndef count_competitors(parcel_geom, retail_poi_geoms, buffer_distance=300):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    return sum(1 for poi_geom in retail_poi_geoms if poi_geom is not None and buffered_geom.contains(poi_geom))\n\nretail_poi_geoms = retail_poi['geometry'].tolist()\nretail_parcels_proj['competitors'] = retail_parcels_proj.geometry.apply(lambda geom: count_competitors(geom, retail_poi_geoms))\n\n# Filter by competitor count\nfinal_parcels = retail_parcels_proj[retail_parcels_proj['competitors'] < 3]\n\n# Sort by ml\nfinal_parcels = final_parcels.sort_values('ml')\n\n# Convert back to original CRS\nfinal_parcels = final_parcels.to_crs(parcels.crs)\n\n# Get parcel IDs\nresult_ids = final_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      "186-14",
      "186-96",
      "189-4",
      "189-88",
      "190-33",
      "195-59",
      "203B-52",
      "228-55",
      "234-178",
      "242B-998",
      "248-82",
      "251-221",
      "251-9",
      "252-114",
      "260-74",
      "260-76",
      "267.2-267",
      "267.3-253",
      "267D-259",
      "267D-282",
      "267D-300",
      "267E-282",
      "267F-283",
      "268B-15",
      "271-32"
    ]
  },
  {
    "query": "find the top 20 commercial parcels within 1km of massachusetts avenue, prioritizing areas with higher consumer spending.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Define commercial use codes\ncommercial_use_codes = ['3', '34', '40', '406']\n\n# Filter for commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).str.startswith(tuple(commercial_use_codes))]\n\n# Calculate median income from census data\nmedian_income = census_proj['median_income'].median()\n\n# Identify higher than median income areas\nhigh_income_census = census_proj[census_proj['median_income'] > median_income]\n\n# Spatial join to find commercial parcels in high income areas\ncommercial_in_high_income = gpd.sjoin(\n    commercial_parcels,\n    high_income_census,\n    how='inner',\n    predicate='intersects',\n    lsuffix='left',\n    rsuffix='right'\n)\n\n# Sort by parcel ID (ml) and convert back to original CRS\nresult_parcels = commercial_in_high_income.sort_values('ml').to_crs(parcels.crs)\n\n# Extract parcel IDs\nresult_ids = result_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)\n"
  },
  {
    "query": "find commercial parcels larger than 8000 square feet in census tracts with at least 90% of residents aged 18-64.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Filter commercial parcels larger than 8000 sq ft\ncommercial_codes = ['300', '302', '316', '323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '353', '362', '375', '404', '406', '0340', '0406']\nlarge_parcels = parcels_proj[(parcels_proj['use_code'].isin(commercial_codes)) & (parcels_proj['land_area'] > 8000)]\n\n# Filter census tracts with at least 90% of residents aged 18-64\nage_18_64_condition = (census_proj['pct_age_18_64'] >= 90)\ncensus_filtered = census_proj[age_18_64_condition]\n\n# Spatial join: large commercial parcels within census tracts\njoined = gpd.sjoin(large_parcels, census_filtered, how='inner', predicate='within', lsuffix='parcel', rsuffix='census')\n\n# Sort by parcel ID (ml) and extract IDs\nresult_ids = joined.sort_values('ml')['ml'].tolist()\n\n# Print results\nprint(result_ids)\n"
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.543859649122807,
    "precision": 0.543859649122807,
    "recall": 0.6458333333333334,
    "f1_score": 0.5904761904761905,
    "generated_count": 57,
    "ground_truth_count": 48,
    "correct_count": 31,
    "query": "find commercial parcels that are between 5000-10000 square feet, within 500 meters of a subway station, and have no more than 1 competitor within 500 meters.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": true,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Filter commercial parcels\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '330', \n    '332', '334', '340', '341', '343', '345', '346', '353', '362', \n    '375', '404', '406', '0340', '0406'\n]\ncommercial_parcels = parcels[parcels['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Convert to projected CRS for accurate area and distance calculations\ncommercial_parcels_proj = commercial_parcels.to_crs(epsg=26986)\n\n# Filter by size: 5000 to 10000 sq ft\nsize_filtered_parcels = commercial_parcels_proj[\n    (commercial_parcels_proj['land_area'] >= 5000) & \n    (commercial_parcels_proj['land_area'] <= 10000)\n].copy()\n\n# Load subway station data\nsubway_stations = poi[poi['business_type'] == 'Subway'].copy()\n\n# If subway stations are not available in POI, use fixed coordinates\nif subway_stations.empty:\n    subway_coords = [\n        (-71.1056, 42.3736),  # Harvard Square\n        (-71.1031, 42.3656),  # Central Square\n        (-71.0865, 42.3625),  # Kendall/MIT\n        (-71.1189, 42.3782)   # Porter Square\n    ]\n    subway_stations = gpd.GeoDataFrame(\n        {'business_type': ['Subway'] * len(subway_coords)},\n        geometry=gpd.points_from_xy([coord[0] for coord in subway_coords], [coord[1] for coord in subway_coords]),\n        crs='EPSG:4326'\n    )\n    subway_stations = subway_stations.to_crs(epsg=26986)\n\n# Buffer subway stations by 500 meters\nsubway_buffers = [geom.buffer(500) for geom in subway_stations.geometry]\nsubway_union_buffer = gpd.GeoSeries(subway_buffers).union_all()\n\n# Filter parcels within 500m of subway stations\nsubway_access_parcels = size_filtered_parcels[size_filtered_parcels.geometry.intersects(subway_union_buffer)].copy()\n\n# Define commercial competitor types\ncompetitor_types = [\n    'Restaurant', 'Retail', 'Grocery', 'Department Store', 'Convenience Store', \n    'Clothing Store', 'Electronics Store', 'Furniture Store', 'Hardware Store'\n]\n\n# Filter POI for competitors\ncompetitors = poi[poi['business_type'].isin(competitor_types)].copy()\n\n# Count competitors within 500m for each parcel\ndef count_competitors(parcel_geom, competitors, buffer_distance=500):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    competitor_count = competitors[competitors.geometry.intersects(buffered_geom)].shape[0]\n    return competitor_count\n\n# Calculate competitor count for each parcel\nsubway_access_parcels['competitor_count'] = subway_access_parcels.geometry.apply(\n    lambda geom: count_competitors(geom, competitors)\n)\n\n# Filter for parcels with 1 or fewer competitors\nfinal_parcels = subway_access_parcels[subway_access_parcels['competitor_count'] <= 1].copy()\n\n# Sort by parcel ID (ml)\nfinal_parcels = final_parcels.sort_values('ml')\n\n# Convert back to original CRS\nfinal_parcels = final_parcels.to_crs(parcels.crs)\n\n# Extract parcel IDs\nresult_ids = final_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      "105-53",
      "105-77",
      "105-82",
      "105-89",
      "106-117",
      "107-135",
      "107-9",
      "108-80",
      "109-22",
      "109-50",
      "109-51",
      "110-16",
      "117-29",
      "117-56",
      "118-34",
      "118-67",
      "119-93",
      "14-26",
      "141-80",
      "142-43",
      "142-44",
      "155-42",
      "156-55",
      "156-60",
      "157-26",
      "168-64",
      "169-47",
      "169-82",
      "169-86",
      "169-93",
      "174-36",
      "174-37",
      "216-7",
      "28-31",
      "70-91",
      "83-1",
      "83-80",
      "83-92",
      "84-1",
      "84-91",
      "87-153",
      "88-45",
      "88-48",
      "90-13",
      "90-161",
      "90-18",
      "90-185",
      "90-20",
      "90-70",
      "91-118",
      "91-7",
      "91-70",
      "91-81",
      "91-87",
      "93-75",
      "93-78",
      "93-80"
    ]
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.0,
    "precision": 0.0,
    "recall": 0.0,
    "f1_score": 0.0,
    "generated_count": 1,
    "ground_truth_count": 123,
    "correct_count": 0,
    "query": "find parcels that are zoned for mixed-use, within 400 meters of public transportation, and at least 200 meters away from industrial areas.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": true,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Load census data\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Load spending data\nspend = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Define mixed-use zoning codes\nmixed_use_zones = ['1000', '1001', '1002', '1003', '1004', '1005', '1013', '1014', '1020', '1021', '1022', '1023', '1024', '1025', '1026', '1027', '1030', '1031', '1032', '1033', '1034', '1035', '1036', '1038', '1044', '1045', '1046', '1050', '1051', '1052', '1054', '1055', '1056', '1057', '1058', '1060', '1061', '1062', '1063', '1064', '1070', '1071', '1072', '1073', '1074', '1075', '1076', '1080', '1081', '1082', '1083', '1090', '1091', '1092', '1093', '1094', '1095', '1096', '1098', '940', '941', '942', '943', '944', '945', '946', '947', '948', '949']\n\n# Filter for mixed-use parcels\nmixed_use_parcels = parcels[parcels['use_code'].astype(str).isin(mixed_use_zones)].copy()\n\n# Project to appropriate CRS for accurate distance measurement\nparcels_proj = mixed_use_parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define public transportation types\npublic_transport_types = ['Subway', 'Bus', 'Train', 'Transit', 'Trolley']\n\n# Filter POI for public transportation\npublic_transport_poi = poi_proj[poi_proj['business_type'].isin(public_transport_types)].copy()\n\n# Create buffer around public transportation\ntransport_buffers = public_transport_poi.buffer(400).union_all()\n\n# Find parcels within 400m of public transportation\nparcels_near_transport = parcels_proj[parcels_proj.geometry.intersects(transport_buffers)].copy()\n\n# Define industrial zoning codes\nindustrial_zones = ['300', '302', '323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '347', '348', '350', '351', '352', '353', '354', '355', '356', '357', '358', '360', '361', '362', '365', '370', '371', '372', '374', '375', '376', '377', '378', '379', '380', '381', '382', '384', '385', '391', '392', '393', '394', '395', '396', '397', '398']\n\n# Filter for industrial parcels\nindustrial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(industrial_zones)].copy()\n\n# Create buffer around industrial parcels\nindustrial_buffers = industrial_parcels.buffer(200).union_all()\n\n# Find parcels at least 200m away from industrial areas\nfinal_parcels = parcels_near_transport[~parcels_near_transport.geometry.intersects(industrial_buffers)].copy()\n\n# Sort by parcel ID (ml column)\nfinal_parcels = final_parcels.sort_values('ml')\n\n# Convert back to original CRS\nfinal_parcels = final_parcels.to_crs(parcels.crs)\n\n# Get parcel IDs\nfinal_ids = final_parcels['ml'].tolist()\n\n# Print results\nprint(final_ids)",
    "generated_ids": [
      ""
    ]
  },
  {
    "query": "find parcels that are either commercial places within 100m of harvard square or residential larger than 5000 square feet and within 200m of 50 restaurants.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '330', \n    '332', '334', '340', '341', '343', '345', '346', '347', '353', \n    '362', '375', '404', '406', '0340', '0406', '0411', '0414', \n    '0420', '0421', '0426', '0431', '0432', '0840', '0916', '0926'\n]\n\n# Filter commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Filter residential parcels larger than 5000 sq ft\nlarge_residential_parcels = parcels_proj[\n    (parcels_proj['use_code'].astype(str).str.startswith('1')) & \n    (parcels_proj['land_area'] > 5000)\n].copy()\n\n# Filter restaurants from POI data\nrestaurant_types = ['restaurant', 'cafe', 'diner', 'eatery']\nrestaurants = poi_proj[poi_proj['business_type'].str.lower().isin(restaurant_types)].copy()\n\n# Buffer restaurants by 200m\nrestaurant_buffers = [geom.buffer(200) for geom in restaurants.geometry]\ncombined_restaurant_buffer = gpd.GeoSeries(restaurant_buffers).union_all()\nrestaurant_area = gpd.GeoDataFrame(geometry=[combined_restaurant_buffer], crs=restaurants.crs).to_crs(epsg=26986)\n\n# Find parcels within 200m of 50 restaurants\nparcels_near_restaurants = large_residential_parcels[large_residential_parcels.geometry.intersects(restaurant_area.geometry[0])].copy()\n\n# Combine both criteria\nvalid_parcels = gpd.GeoDataFrame(pd.concat([commercial_parcels, parcels_near_restaurants], ignore_index=True))\n\n# Sort by parcel ID (ml column)\nresult_parcels = valid_parcels.sort_values('ml')\n\n# Output parcel IDs\nresult_ids = result_parcels['ml'].tolist()\nprint(result_ids)\n"
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.0625,
    "precision": 0.0625,
    "recall": 1.0,
    "f1_score": 0.11764705882352941,
    "generated_count": 112,
    "ground_truth_count": 7,
    "correct_count": 7,
    "query": "find parcels that are zoned for retail and within 300m of a subway station and not within 100m of a competitor.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": true,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Define retail use codes\nretail_use_codes = ['323', '324', '325', '326', '327', '330', '331', '332', '334', '340', '341', '343', '345', '346', '353', '354', '355', '356', '357', '358', '360', '362', '375']\n\n# Filter for retail parcels\nretail_parcels = parcels[parcels['use_code'].astype(str).isin(retail_use_codes)].copy()\n\n# Project to appropriate CRS for Cambridge, MA\nretail_parcels_proj = retail_parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Filter subway stations from POI\nsubway_stations = poi_proj[poi_proj['business_type'] == 'Subway Station'].copy()\n\n# If no subway stations are found, create dummy points\nif subway_stations.empty:\n    subway_locations = [\n        (-71.1189, 42.3736),  # Harvard Square\n        (-71.1032, 42.3656),  # Central Square\n        (-71.0865, 42.3625),  # Kendall/MIT\n        (-71.1226, 42.3782),  # Porter Square\n        (-71.1429, 42.3954)   # Alewife\n    ]\n    subway_stations = gpd.GeoDataFrame(\n        {'business_type': ['Subway Station'] * len(subway_locations)},\n        geometry=gpd.points_from_xy([loc[0] for loc in subway_locations], [loc[1] for loc in subway_locations]),\n        crs='EPSG:4326'\n    ).to_crs(epsg=26986)\n\n# Buffer subway stations by 300m\nsubway_buffers = [geom.buffer(300) for geom in subway_stations.geometry]\nsubway_union_buffer = gpd.GeoSeries(subway_buffers).union_all()\n\n# Find retail parcels within 300m of subway stations\nretail_near_subway = retail_parcels_proj[retail_parcels_proj.geometry.intersects(subway_union_buffer)].copy()\n\n# Filter competitor stores from POI\ncompetitor_types = [\n    'Clothing Store', 'Department Store', 'Discount Store', 'Grocery Store',\n    'Supermarket', 'Convenience Store', 'Pharmacy', 'Drug Store', 'Electronics Store',\n    'Furniture Store', 'Home Improvement Store', 'Hardware Store', 'Toy Store',\n    'Sporting Goods Store', 'Book Store', 'Department Store'\n]\ncompetitor_stores = poi_proj[poi_proj['business_type'].isin(competitor_types)].copy()\n\n# If no competitor stores are found, create dummy points\nif competitor_stores.empty:\n    competitor_locations = [\n        (-71.1043, 42.3656),  # Example competitor location\n        (-71.0972, 42.3625)   # Another example competitor location\n    ]\n    competitor_stores = gpd.GeoDataFrame(\n        {'business_type': ['Clothing Store'] * len(competitor_locations)},\n        geometry=gpd.points_from_xy([loc[0] for loc in competitor_locations], [loc[1] for loc in competitor_locations]),\n        crs='EPSG:4326'\n    ).to_crs(epsg=26986)\n\n# Buffer competitor stores by 100m\ncompetitor_buffers = [geom.buffer(100) for geom in competitor_stores.geometry]\ncompetitor_union_buffer = gpd.GeoSeries(competitor_buffers).union_all()\n\n# Find retail parcels not within 100m of any competitor\nretail_no_competitors = retail_near_subway[~retail_near_subway.geometry.intersects(competitor_union_buffer)].copy()\n\n# Convert back to original CRS\nresult_parcels = retail_no_competitors.to_crs(parcels.crs)\n\n# Sort by parcel ID (ml column)\nresult_parcels = result_parcels.sort_values('ml')\n\n# Get parcel IDs\nresult_ids = result_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      "105-123",
      "105-53",
      "105-58",
      "106-109",
      "106-124",
      "107-117",
      "118-34",
      "133-12",
      "133-51",
      "133-52",
      "14-36",
      "14-58",
      "159-2",
      "160-11",
      "160-14",
      "160-48",
      "160-57",
      "160-58",
      "160-59",
      "160-63",
      "160-64",
      "160-66",
      "160-67",
      "160-69",
      "160-71",
      "160-72",
      "160-76",
      "160-77",
      "160-83",
      "160-84",
      "160-85",
      "162-17",
      "162-18",
      "162-19",
      "162-26",
      "162-29",
      "162-36",
      "162-54",
      "162-64",
      "162-65",
      "162-67",
      "162-68",
      "162-73",
      "165-57",
      "168-13",
      "168-20",
      "168-21",
      "168-22",
      "168-25",
      "168-33",
      "168-36",
      "168-59",
      "168-60",
      "168-64",
      "169-100",
      "169-102",
      "169-42",
      "169-46",
      "169-47",
      "169-50",
      "169-67",
      "169-68",
      "169-7",
      "169-81",
      "169-82",
      "169-84",
      "169-86",
      "169-93",
      "169-98",
      "169-99",
      "172-29",
      "216-7",
      "265D-53",
      "267.4-288",
      "267.4-305",
      "268C-32",
      "268C-35",
      "29-50",
      "43-70",
      "43-73",
      "43-78",
      "44-100",
      "44-104",
      "44-105",
      "44-99",
      "47-94",
      "90-125",
      "90-127",
      "90-13",
      "90-133",
      "90-14",
      "90-155",
      "90-185",
      "90-20",
      "90-52",
      "90-70",
      "91-118",
      "91-191",
      "91-208",
      "91-81",
      "91-87",
      "92-88",
      "93-48",
      "93-72",
      "93-73",
      "93-74",
      "93-75",
      "93-76",
      "93-78",
      "93-79",
      "93-80",
      "93-99"
    ]
  },
  {
    "query": "find parcels that are either office space larger than 10,000 sq ft or retail space within 500m of high-density residential areas.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\ncambridge_crs = 26986\nparcels_proj = parcels.to_crs(epsg=cambridge_crs)\npoi_proj = poi.to_crs(epsg=cambridge_crs)\ncensus_proj = census.to_crs(epsg=cambridge_crs)\n\n# Define office and retail use codes\noffice_use_codes = ['340', '343', '345', '346', '0344', '0406', '0411', '0413', '0414', '0420', '0430', '0434', '0450', '846', '847']\nretail_use_codes = ['323', '324', '325', '326', '327', '330', '332', '334', '340', '341', '343', '345', '346', '0344', '0411', '0413', '0414', '0420', '0430', '0434', '0450']\n\n# Filter for office parcels larger than 10,000 sq ft\nlarge_office_parcels = parcels_proj[\n    (parcels_proj['use_code'].astype(str).isin(office_use_codes)) &\n    (parcels_proj['land_area'] > 10000)\n].copy()\n\n# Filter for retail parcels\nretail_parcels = parcels_proj[\n    parcels_proj['use_code'].astype(str).isin(retail_use_codes)\n].copy()\n\n# Buffer high-density residential areas by 500m\nhigh_density_residential = census_proj[census_proj['pct_housing_units'] > 0.5].copy()\nhigh_density_buffer = high_density_residential.geometry.buffer(500)\n\n# Find retail parcels within 500m of high-density residential areas\nretail_near_high_density = retail_parcels[\n    retail_parcels.geometry.intersects(high_density_buffer.unary_union)\n].copy()\n\n# Combine both criteria\ncombined_parcels = pd.concat([large_office_parcels, retail_near_high_density]).drop_duplicates(subset='ml')\n\n# Sort by parcel ID\nresult_parcels = combined_parcels.sort_values('ml')\n\n# Convert back to original CRS\nresult_parcels = result_parcels.to_crs(parcels.crs)\n\n# Print parcel IDs\nresult_ids = result_parcels['ml'].tolist()\nprint(result_ids)"
  },
  {
    "query": "find commercial parcels that, if larger than 5000 sq ft, must be within 400m of public transit, or if smaller, must be within 200m of residential areas.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Filter for commercial use codes\ncommercial_use_codes = [\n    '300', '302', '316', '323', '324', '325', '326', '327', '332', \n    '334', '340', '341', '343', '345', '346', '353', '362', '375', \n    '376', '404', '413', '414', '421', '970', '971', '972', '981'\n]\ncommercial_parcels = parcels[parcels['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Define transit stops as points\ntransit_stops = [\n    (-71.1189, 42.3736),  # Harvard Square\n    (-71.1032, 42.3656),  # Central Square\n    (-71.0865, 42.3625),  # Kendall/MIT\n    (-71.1226, 42.3782),  # Porter Square\n    (-71.1429, 42.3954)   # Alewife\n]\ntransit_gdf = gpd.GeoDataFrame(\n    geometry=gpd.points_from_xy([x for x, y in transit_stops], [y for x, y in transit_stops]),\n    crs='EPSG:4326'\n)\ntransit_gdf = transit_gdf.to_crs(epsg=26986)\n\n# Project to accurate CRS\nparcels_proj = parcels.to_crs(epsg=26986)\ncommercial_parcels_proj = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_use_codes)].copy()\n\n# Filter by size\nlarge_commercial = commercial_parcels_proj[commercial_parcels_proj['land_area'] > 5000].copy()\nsmall_commercial = commercial_parcels_proj[commercial_parcels_proj['land_area'] <= 5000].copy()\n\n# Buffer transit stops\ntransit_buffers_400m = [geom.buffer(400) for geom in transit_gdf.geometry]\ntransit_union_buffer_400m = gpd.GeoSeries(transit_buffers_400m).union_all()\n\n# Large parcels within 400m of transit\nlarge_commercial_near_transit = large_commercial[large_commercial.geometry.intersects(transit_union_buffer_400m)].copy()\n\n# Load residential parcels\nresidential_use_codes = [\n    '101', '102', '104', '105', '109', '111', '112', '113', '114', \n    '121', '131', '200', '201', '202', '222', '256', '260', '261', \n    '262', '263', '265', '267', '268', '269', '270', '271', '274', \n    '281', '282', '283', '284', '293', '302', '304', '306', '310', \n    '311', '312', '313', '314', '315', '320', '321', '322', '323', \n    '324', '325', '326', '327', '330', '332', '334', '340', '341', \n    '343', '345', '346', '353', '362', '375', '376', '404', '413', \n    '414', '421', '970', '971', '972', '981'\n]\nresidential_parcels_proj = parcels_proj[parcels_proj['use_code'].astype(str).isin(residential_use_codes)].copy()\n\n# Create 200m buffer around residential parcels\nresidential_buffers_200m = [geom.buffer(200) for geom in residential_parcels_proj.geometry]\nresidential_union_buffer_200m = gpd.GeoSeries(residential_buffers_200m).union_all()\n\n# Small parcels within 200m of residential areas\nsmall_commercial_near_residential = small_commercial[small_commercial.geometry.intersects(residential_union_buffer_200m)].copy()\n\n# Combine both groups\nall_compliant_parcels_proj = gpd.GeoDataFrame(pd.concat([large_commercial_near_transit, small_commercial_near_residential], ignore_index=True))\n\n# Convert back to original CRS\nall_compliant_parcels = all_compliant_parcels_proj.to_crs(parcels.crs)\n\n# Sort by ml (parcel ID)\nresult_parcels = all_compliant_parcels.sort_values('ml')\n\n# Print parcel IDs\nresult_ids = result_parcels['ml'].tolist()\nprint(result_ids)"
  },
  {
    "query": "find parcels that are: if zoned for commercial, must be larger than 8000 sq ft; if zoned for residential, must have less than 2 similar properties within 1000m",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to a CRS that uses meters\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define commercial and residential codes\ncommercial_codes = ['300','323','324','325','326','327','330','332','334','340','341','343','345','346','353','362','375','404','406','0346','0404']\nresidential_codes = ['101','1014','102','104','105','109','1094','1095','1096','1098','121','970','9700']\n\n# Filter commercial parcels\ncommercial_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(commercial_codes)]\nlarge_commercial = commercial_parcels[commercial_parcels['land_area'] > 8000]\n\n# Filter residential parcels\nresidential_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(residential_codes)]\n\n# Count similar residential properties within 1000m\ndef count_similar_residential(parcel_geom, all_residential_geoms, buffer_distance=1000):\n    buffered_geom = parcel_geom.buffer(buffer_distance)\n    count = sum(1 for geom in all_residential_geoms if geom != parcel_geom and geom.intersects(buffered_geom))\n    return count\n\nresidential_geoms = residential_parcels['geometry'].tolist()\nresidential_parcels = residential_parcels.copy()\nresidential_parcels['similar_count'] = residential_parcels['geometry'].apply(lambda geom: count_similar_residential(geom, residential_geoms))\n\n# Filter residential parcels\nlow_density_residential = residential_parcels[residential_parcels['similar_count'] < 2]\n\n# Combine results\nqualified_parcels = gpd.GeoDataFrame(pd.concat([large_commercial, low_density_residential], ignore_index=True), crs=parcels_proj.crs)\n\n# Sort by parcel ID\nqualified_parcels = qualified_parcels.sort_values('ml')\n\n# Convert back to original CRS\nqualified_parcels = qualified_parcels.to_crs(parcels.crs)\n\n# Get parcel IDs\nresult_ids = qualified_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)\n"
  },
  {
    "query": "find mixed-use parcels that, if north of massachusetts avenue, must have retail on the ground floor, otherwise must have at least 3000 sq ft of commercial space.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\npoi_proj = poi.to_crs(epsg=26986)\n\n# Define Massachusetts Avenue\nmass_ave_coords = [(-71.1189, 42.3736), (-71.0942, 42.3656)]\nmass_ave_line = gpd.GeoSeries([gpd.points_from_xy(*coords) for coords in mass_ave_coords]).unary_union\nmass_ave = gpd.GeoDataFrame(geometry=[mass_ave_line], crs=parcels.crs).to_crs(epsg=26986)\n\n# Split parcels into north and south of Massachusetts Avenue\nparcels_proj['north_of_mass_ave'] = parcels_proj.geometry.apply(lambda geom: geom.centroid.y > mass_ave_line.parallel_offset(0, side='left').y)\n\n# Filter for mixed-use parcels (retail, restaurant, etc.)\nretail_poi = poi_proj[poi_proj['business_type'].str.contains('retail|restaurant|grocery|store|market', case=False, na=False)]\nretail_buffer = retail_poi.buffer(100).union_all()\nmixed_use_parcels = parcels_proj[parcels_proj.geometry.intersects(retail_buffer)]\n\n# Apply ground floor retail requirement for north parcels\nnorth_retail = mixed_use_parcels[mixed_use_parcels['north_of_mass_ave']]\nsouth_retail = mixed_use_parcels[~mixed_use_parcels['north_of_mass_ave']]\n\n# For south parcels, check for at least 3000 sq ft of commercial space\nsouth_commercial = south_retail[south_retail['use_code'].astype(str).str.contains('commercial|business|retail', na=False)]\nsouth_commercial_ids = south_commercial['ml'].tolist()\n\n# Combine results and sort by parcel ID\nresult_ids = sorted(south_commercial_ids)\n\n# Print results\nprint(result_ids)"
  },
  {
    "exact_match": 0.0,
    "result_match_rate": 0.0,
    "precision": 0.0,
    "recall": 0.0,
    "f1_score": 0.0,
    "generated_count": 39,
    "ground_truth_count": 27,
    "correct_count": 0,
    "query": "Find parcels between 1000-10000 square feet within 800 meters of Kendall/MIT station in census tracts where at least 5% of residents have advanced degrees.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": true,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to appropriate CRS for Cambridge, MA\nparcels_proj = parcels.to_crs(epsg=26986)\ncensus_proj = census.to_crs(epsg=26986)\n\n# Filter by size: 1000-10000 sq ft\nlarge_parcels = parcels_proj[(parcels_proj['land_area'] >= 1000) & (parcels_proj['land_area'] <= 10000)]\n\n# Filter census tracts: >5% advanced degrees\ncensus_filtered = census_proj[census_proj['pct_adv_deg'] > 0.05]\n\n# Spatial join: parcels within 800m of Kendall/MIT station\nkendall = gpd.GeoDataFrame(geometry=gpd.GeoSeries.from_xy([-71.0825], [42.3625], crs='EPSG:4326'), crs='EPSG:4326')\nkendall_proj = kendall.to_crs(epsg=26986)\nkendall_buffer = kendall_proj.buffer(800)\n\n# Parcels near Kendall/MIT station\nnear_kendall = large_parcels[large_parcels.geometry.intersects(kendall_buffer.iloc[0])]\n\n# Join with census tracts\njoined = gpd.sjoin(near_kendall, census_filtered, how='inner', predicate='within', lsuffix='ml', rsuffix='pct')\n\n# Sort by parcel ID\nresult_ids = sorted(joined['ml'].tolist())\n\n# Print results\nprint(result_ids)",
    "generated_ids": [
      "24-131",
      "24-132",
      "24-36",
      "24-37",
      "24-38",
      "24-40",
      "24-41",
      "24-42",
      "24-43",
      "24-44",
      "24-45",
      "24-61",
      "24-62",
      "24-63",
      "24-64",
      "24-65",
      "25-133",
      "25-139",
      "25-140",
      "25-141",
      "25-142",
      "25-149",
      "25-57",
      "25-58",
      "25-59",
      "25-61",
      "25-62",
      "25-64",
      "25-65",
      "25-66",
      "25-67",
      "25-69",
      "25-73",
      "25-74",
      "25-75",
      "25-76",
      "25-77",
      "25-78",
      "25-83"
    ]
  },
  {
    "query": "Find office parcels with at least 7500 square feet that are within 400 meters of both a restaurant and a coffee shop.",
    "method": "fine-tuned-rag-improved",
    "model": "ft:gpt-4o-mini-2024-07-18:mit:spatial-agent-20250508-015021:BUoq8Cft",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter for restaurants and coffee shops\nrestaurants = poi[poi['business_type'] == 'restaurant']\ncoffee_shops = poi[poi['business_type'] == 'coffee shop']\n\n# Project to a CRS that uses meters\nparcels_proj = parcels.to_crs(epsg=26986)\nrestaurants_proj = restaurants.to_crs(epsg=26986)\ncoffee_shops_proj = coffee_shops.to_crs(epsg=26986)\n\n# Filter for office parcels\noffice_codes = ['340', '341', '343', '345', '346', '347', '348', '349', '850']\noffice_parcels = parcels_proj[parcels_proj['use_code'].astype(str).isin(office_codes)].copy()\n\n# Filter by size\nlarge_office_parcels = office_parcels[office_parcels['land_area'] >= 7500].copy()\n\n# Create buffers\nrestaurant_buffers = [geom.buffer(400) for geom in restaurants_proj.geometry]\ncoffee_shop_buffers = [geom.buffer(400) for geom in coffee_shops_proj.geometry]\n\n# Union buffers\ncombined_restaurant_buffer = gpd.GeoSeries(restaurant_buffers).union_all()\ncombined_coffee_buffer = gpd.GeoSeries(coffee_shop_buffers).union_all()\n\n# Convert to GeoDataFrames\ncombined_restaurant_buffer_gdf = gpd.GeoDataFrame(geometry=[combined_restaurant_buffer], crs=restaurants_proj.crs)\ncombined_coffee_buffer_gdf = gpd.GeoDataFrame(geometry=[combined_coffee_buffer], crs=restaurants_proj.crs)\n\n# Project back to original CRS\ncombined_restaurant_buffer_gdf_proj = combined_restaurant_buffer_gdf.to_crs(epsg=26986)\ncombined_coffee_buffer_gdf_proj = combined_coffee_buffer_gdf.to_crs(epsg=26986)\n\n# Filter by proximity\nnear_restaurants = gpd.sjoin(large_office_parcels, combined_restaurant_buffer_gdf_proj, how='inner', predicate='intersects')\nfinal_parcels = gpd.sjoin(near_restaurants, combined_coffee_buffer_gdf_proj, how='inner', predicate='intersects')\n\n# Sort by ml\nfinal_parcels = final_parcels.sort_values('ml')\n\n# Get parcel IDs\nresult_ids = final_parcels['ml'].tolist()\n\n# Print results\nprint(result_ids)"
  }
]