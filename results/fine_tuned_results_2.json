[
  {
    "query": "find commercial parcels within 500 meters of harvard square.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load the POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter POI for Harvard Square\nharvard_square = poi[poi['name'].str.contains('Harvard Square', case=False, na=False)]\n\n# Ensure both GeoDataFrames use the same projected CRS for distance calculations\nparcels = parcels.to_crs(epsg=26986)\nharvard_square = harvard_square.to_crs(epsg=26986)\n\n# Buffer Harvard Square by 500 meters\nbuffered_harvard_square = harvard_square.buffer(500)\n\n# Find parcels within 500 meters of Harvard Square\ncommercial_parcels = parcels[parcels['land_use'] == 'commercial']\nselected_parcels = commercial_parcels[commercial_parcels.intersects(buffered_harvard_square.unary_union)]\n\n# Sort the selected parcels by 'ml' column\nsorted_parcels = selected_parcels.sort_values(by='ml')\n\n# Extract and print the list of parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\nprint(parcel_ids)"
  },
  {
    "query": "find parcels larger than 6000 square feet that are zoned for retail use.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Set CRS to EPSG:26986 for accurate area calculations\nparcels = parcels.to_crs(epsg=26986)\n\n# Filter parcels larger than 6000 square feet and zoned for retail use\nfiltered_parcels = parcels[(parcels['geometry'].area > 6000) & (parcels['zoning'] == 'Retail')]\n\n# Sort by parcel ID (assuming 'ml' is the parcel ID column)\nsorted_parcels = filtered_parcels.sort_values(by='ml')\n\n# Extract and print the list of parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\nprint(parcel_ids)"
  },
  {
    "query": "find all parcels that have no more than 2 competing restaurants within 800 meters.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter for restaurants in POI data\nrestaurants = poi[poi['category'] == 'restaurant']\n\n# Set the CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\nrestaurants = restaurants.to_crs(epsg=26986)\n\n# Buffer restaurants by 800 meters\nrestaurants_buffered = restaurants.buffer(800)\n\n# Spatial join to find parcels within 800 meters of restaurants\nparcels_within_buffer = gpd.sjoin(parcels, gpd.GeoDataFrame(geometry=restaurants_buffered), how='inner', op='intersects')\n\n# Count the number of restaurants within 800 meters for each parcel\nparcel_restaurant_counts = parcels_within_buffer.groupby('ml').size()\n\n# Filter parcels with no more than 2 restaurants within 800 meters\nsuitable_parcels = parcel_restaurant_counts[parcel_restaurant_counts <= 2].index\n\n# Sort the parcel IDs\nsorted_parcel_ids = sorted(suitable_parcels)\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find the top 20 parcels in cambridge with the most diverse mix of residential and commercial land uses within 500 meters.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson').to_crs(epsg=26986)\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson').to_crs(epsg=26986)\n\n# Filter POIs for residential and commercial categories\nresidential_poi = poi[poi['category'] == 'residential']\ncommercial_poi = poi[poi['category'] == 'commercial']\n\n# Function to calculate diversity score\ndef calculate_diversity(parcel, residential_poi, commercial_poi, buffer_distance=500):\n    buffer = parcel.geometry.buffer(buffer_distance)\n    residential_count = residential_poi[residential_poi.intersects(buffer)].shape[0]\n    commercial_count = commercial_poi[commercial_poi.intersects(buffer)].shape[0]\n    return min(residential_count, commercial_count)\n\n# Calculate diversity scores for each parcel\nparcels['diversity_score'] = parcels.apply(\n    calculate_diversity, args=(residential_poi, commercial_poi), axis=1\n)\n\n# Sort parcels by diversity score and select top 20\ntop_parcels = parcels.nlargest(20, 'diversity_score')\n\n# Print the list of parcel IDs\nprint(top_parcels['ml'].tolist())"
  },
  {
    "query": "find the top 20 commercial parcels in areas with the highest percentage of residents with advanced degrees.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Ensure all data is in the same CRS\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter for commercial parcels\ncommercial_parcels = parcels[parcels['land_use'] == 'commercial']\n\n# Join parcels with census data to get percentage of residents with advanced degrees\nparcels_with_census = gpd.sjoin(commercial_parcels, census, how='left', op='intersects')\n\n# Sort parcels by percentage of residents with advanced degrees\nsorted_parcels = parcels_with_census.sort_values(by='pct_advanced_degrees', ascending=False)\n\n# Select top 20 parcels\ntop_20_parcels = sorted_parcels.head(20)\n\n# Extract parcel IDs\ntop_20_parcel_ids = top_20_parcels['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(top_20_parcel_ids)"
  },
  {
    "query": "\u201cfind the top 20 parcels with the highest consumer spending in surrounding areas.\u201d",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Merge spending data with census data\ncensus = census.merge(spending, on='census_id')\n\n# Calculate total spending in surrounding areas for each parcel\ndef calculate_surrounding_spending(parcel):\n    buffer = parcel.geometry.buffer(500)  # 500 meters buffer\n    surrounding_census = census[census.intersects(buffer)]\n    return surrounding_census['spending'].sum()\n\nparcels['surrounding_spending'] = parcels.apply(calculate_surrounding_spending, axis=1)\n\n# Sort parcels by surrounding spending and get top 20\ntop_parcels = parcels.nlargest(20, 'surrounding_spending')\n\n# Extract and print the list of parcel IDs\ntop_parcel_ids = top_parcels['ml'].tolist()\nprint(top_parcel_ids)"
  },
  {
    "query": "find vacant commercial parcels larger than 3000 square feet that are within 800 meters of a subway station.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the parcel data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\n\n# Load the POI data\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Filter POI for subway stations\nsubway_stations = poi[poi['type'] == 'subway_station']\n\n# Project both GeoDataFrames to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\nsubway_stations = subway_stations.to_crs(epsg=26986)\n\n# Filter parcels for vacant commercial parcels larger than 3000 square feet\nvacant_commercial_parcels = parcels[\n    (parcels['use'] == 'commercial') &\n    (parcels['status'] == 'vacant') &\n    (parcels['area'] > 3000)\n]\n\n# Buffer subway stations by 800 meters\nsubway_buffer = subway_stations.buffer(800)\n\n# Find parcels within 800 meters of any subway station\nparcels_within_800m = vacant_commercial_parcels[\n    vacant_commercial_parcels.intersects(subway_buffer.unary_union)\n]\n\n# Extract and sort the parcel IDs\nparcel_ids = parcels_within_800m['ml'].sort_values().tolist()\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "find commercial parcels zoned for retail use with fewer than 3 competing retail businesses within 300 meters.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter parcels for commercial parcels zoned for retail use\ncommercial_parcels = parcels[parcels['zoning'] == 'Retail']\n\n# Filter POI for retail businesses\nretail_poi = poi[poi['category'] == 'Retail']\n\n# Function to count competing businesses within 300 meters\ndef count_competing_retail(parcel):\n    buffer = parcel.geometry.buffer(300)\n    competing_retail = retail_poi[retail_poi.intersects(buffer)]\n    return len(competing_retail)\n\n# Apply function to count competing businesses\ncommercial_parcels['competing_retail_count'] = commercial_parcels.apply(count_competing_retail, axis=1)\n\n# Filter parcels with fewer than 3 competing retail businesses\nsuitable_parcels = commercial_parcels[commercial_parcels['competing_retail_count'] < 3]\n\n# Sort parcels by parcel ID (ml column)\nsorted_parcels = suitable_parcels.sort_values(by='ml')\n\n# Extract and print the list of parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\nprint(parcel_ids)"
  },
  {
    "query": "find the top 20 commercial parcels within 1km of massachusetts avenue, prioritizing areas with higher consumer spending.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Ensure all GeoDataFrames use the same CRS\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter POI for Massachusetts Avenue\nmass_ave_poi = poi[poi['name'].str.contains('Massachusetts Avenue', case=False, na=False)]\n\n# Buffer POI by 1km\nmass_ave_buffer = mass_ave_poi.buffer(1000)\n\n# Filter parcels within 1km of Massachusetts Avenue\nparcels_within_1km = parcels[parcels.geometry.apply(lambda x: any(x.intersects(buffer) for buffer in mass_ave_buffer))]\n\n# Merge parcels with spending data\nparcels_with_spending = parcels_within_1km.merge(spending, left_on='census_tract', right_on='tract_id')\n\n# Sort parcels by consumer spending\nsorted_parcels = parcels_with_spending.sort_values(by='consumer_spending', ascending=False)\n\n# Select top 20 commercial parcels\ntop_20_parcels = sorted_parcels[sorted_parcels['land_use'] == 'commercial'].head(20)\n\n# Print the list of parcel IDs\nprint(top_20_parcels['ml'].tolist())"
  },
  {
    "query": "find commercial parcels larger than 8000 square feet in census tracts with at least 90% of residents aged 18-64.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load the data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Set the CRS to EPSG:26986 for accurate spatial operations\nparcels = parcels.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter census tracts with at least 90% of residents aged 18-64\ncensus_filtered = census[census['pct_18_64'] >= 90]\n\n# Spatial join to find parcels in the filtered census tracts\nparcels_in_census = gpd.sjoin(parcels, census_filtered, how='inner', op='intersects')\n\n# Filter parcels that are commercial and larger than 8000 square feet\ncommercial_parcels = parcels_in_census[(parcels_in_census['land_use'] == 'Commercial') &\n                                       (parcels_in_census['area'] > 8000)]\n\n# Sort the parcels by their ID (ml column)\nsorted_parcel_ids = commercial_parcels['ml'].sort_values().tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find commercial parcels that are between 5000-10000 square feet, within 500 meters of a subway station, and have no more than 1 competitor within 500 meters.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Project to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter commercial parcels between 5000-10000 square feet\ncommercial_parcels = parcels[(parcels['land_use'] == 'commercial') & \n                             (parcels['area'] >= 5000) & \n                             (parcels['area'] <= 10000)]\n\n# Identify subway stations\nsubway_stations = poi[poi['type'] == 'subway_station']\n\n# Buffer subway stations by 500 meters\nsubway_buffer = subway_stations.buffer(500)\n\n# Find parcels within 500 meters of a subway station\nparcels_near_subway = commercial_parcels[commercial_parcels.intersects(subway_buffer.unary_union)]\n\n# Identify competitors\ncompetitors = poi[poi['type'] == 'competitor']\n\n# Function to count competitors within 500 meters\ndef count_competitors(parcel):\n    buffer = parcel.geometry.buffer(500)\n    return competitors[competitors.intersects(buffer)].shape[0]\n\n# Filter parcels with no more than 1 competitor within 500 meters\nsuitable_parcels = parcels_near_subway[parcels_near_subway.apply(count_competitors, axis=1) <= 1]\n\n# Sort by parcel ID (ml column)\nsorted_parcels = suitable_parcels.sort_values('ml')\n\n# Print the final list of parcel IDs\nprint(sorted_parcels['ml'].tolist())"
  },
  {
    "query": "find parcels that are zoned for mixed-use, within 400 meters of public transportation, and at least 200 meters away from industrial areas.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels for mixed-use zoning\nmixed_use_parcels = parcels[parcels['zoning'] == 'Mixed-Use']\n\n# Filter POI for public transportation\npublic_transport = poi[poi['type'] == 'Public Transport']\n\n# Buffer public transport points by 400 meters\npublic_transport_buffer = public_transport.buffer(400)\n\n# Find parcels within 400 meters of public transport\nparcels_near_transport = mixed_use_parcels[mixed_use_parcels.intersects(public_transport_buffer.unary_union)]\n\n# Filter census data for industrial areas\nindustrial_areas = census[census['land_use'] == 'Industrial']\n\n# Buffer industrial areas by 200 meters\nindustrial_buffer = industrial_areas.buffer(200)\n\n# Find parcels at least 200 meters away from industrial areas\nparcels_far_from_industrial = parcels_near_transport[~parcels_near_transport.intersects(industrial_buffer.unary_union)]\n\n# Extract and sort parcel IDs\nparcel_ids = sorted(parcels_far_from_industrial['ml'].tolist())\n\n# Print the final list of parcel IDs\nprint(parcel_ids)"
  },
  {
    "query": "find retail parcels between 2000-5000 square feet within 500m of a residential area, prioritizing locations with high foot traffic and in census tracts with median income above $30,000.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\nspending = pd.read_csv('../data/cambridge_spend_processed.csv')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels by area\nfiltered_parcels = parcels[(parcels['land_use'] == 'retail') & \n                           (parcels['area'] >= 2000) & \n                           (parcels['area'] <= 5000)]\n\n# Filter POIs for residential areas\nresidential_poi = poi[poi['category'] == 'residential']\n\n# Buffer residential POIs by 500m\nresidential_buffer = residential_poi.buffer(500)\n\n# Find parcels within 500m of residential areas\nparcels_within_500m = filtered_parcels[filtered_parcels.intersects(residential_buffer.unary_union)]\n\n# Join parcels with census data\nparcels_with_census = parcels_within_500m.sjoin(census, how='inner', predicate='intersects')\n\n# Filter parcels by median income\nparcels_high_income = parcels_with_census[parcels_with_census['median_income'] > 30000]\n\n# Join with spending data to prioritize high foot traffic\nparcels_high_income = parcels_high_income.merge(spending, left_on='ml', right_on='parcel_id')\n\n# Sort parcels by foot traffic\nsorted_parcels = parcels_high_income.sort_values(by='foot_traffic', ascending=False)\n\n# Get sorted list of parcel IDs\nsorted_parcel_ids = sorted_parcels['ml'].tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find office parcels larger than 5000 square feet with at least 2 parking spaces, prioritizing those in areas with high educational attainment.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\nimport pandas as pd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project to EPSG:26986 for accurate spatial operations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels larger than 5000 square feet with at least 2 parking spaces\nfiltered_parcels = parcels[(parcels['area'] > 5000) & (parcels['parking_spaces'] >= 2)]\n\n# Merge parcels with census data to get educational attainment\nmerged = gpd.sjoin(filtered_parcels, census, how='left', op='intersects')\n\n# Sort by educational attainment (assuming 'education_attainment' is the column name)\nsorted_parcels = merged.sort_values(by='education_attainment', ascending=False)\n\n# Extract and print the sorted list of parcel IDs\nparcel_ids = sorted_parcels['ml'].tolist()\nprint(parcel_ids)"
  },
  {
    "query": "find parcels that are either commercial places within 100m of harvard square or residential larger than 5000 square feet and within 200m of 50 restaurants.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\nfrom shapely.geometry import Point\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Define Harvard Square location\nharvard_square = Point(-71.1189, 42.3736)\nharvard_square = gpd.GeoSeries([harvard_square], crs='EPSG:4326').to_crs(epsg=26986)\n\n# Filter POI for restaurants\nrestaurants = poi[poi['category'] == 'restaurant']\n\n# Buffer operations\nharvard_buffer = harvard_square.buffer(100)\nrestaurants_buffer = restaurants.buffer(200)\n\n# Filter parcels\ncommercial_near_harvard = parcels[(parcels['land_use'] == 'commercial') & \n                                  (parcels.intersects(harvard_buffer.unary_union))]\n\nresidential_large_near_restaurants = parcels[(parcels['land_use'] == 'residential') & \n                                             (parcels['area'] > 5000) & \n                                             (parcels.intersects(restaurants_buffer.unary_union))]\n\n# Combine results\nselected_parcels = commercial_near_harvard['ml'].append(residential_large_near_restaurants['ml']).unique()\n\n# Sort and print parcel IDs\nsorted_parcel_ids = sorted(selected_parcels)\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find parcels that are zoned for retail and within 300m of a subway station and not within 100m of a competitor.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter POI for subway stations and competitors\nsubway_stations = poi[poi['type'] == 'subway_station']\ncompetitors = poi[poi['type'] == 'competitor']\n\n# Filter parcels for retail zoning\nretail_parcels = parcels[parcels['zoning'] == 'retail']\n\n# Find parcels within 300m of a subway station\nretail_near_subway = retail_parcels[retail_parcels.geometry.apply(\n    lambda geom: subway_stations.distance(geom).min() <= 300\n)]\n\n# Exclude parcels within 100m of a competitor\nfinal_parcels = retail_near_subway[retail_near_subway.geometry.apply(\n    lambda geom: competitors.distance(geom).min() > 100\n)]\n\n# Sort and extract parcel IDs\nsorted_parcel_ids = final_parcels['ml'].sort_values().tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find parcels that are either office space larger than 10,000 sq ft or retail space within 500m of high-density residential areas.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter parcels for office space larger than 10,000 sq ft\noffice_parcels = parcels[(parcels['land_use'] == 'office') & (parcels['area'] > 10000)]\n\n# Filter census data for high-density residential areas\nhigh_density_residential = census[census['density'] > 1000]  # Assuming density threshold\n\n# Buffer high-density residential areas by 500m\nhigh_density_buffer = high_density_residential.buffer(500)\n\n# Filter parcels for retail space within 500m of high-density residential areas\nretail_parcels = parcels[parcels['land_use'] == 'retail']\nretail_near_high_density = retail_parcels[retail_parcels.intersects(high_density_buffer.unary_union)]\n\n# Combine both criteria\nselected_parcels = office_parcels.append(retail_near_high_density).drop_duplicates()\n\n# Sort by parcel ID (ml column)\nsorted_parcel_ids = selected_parcels['ml'].sort_values().tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find commercial parcels that, if larger than 5000 sq ft, must be within 400m of public transit, or if smaller, must be within 200m of residential areas.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Project data to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\ncensus = census.to_crs(epsg=26986)\n\n# Filter POI for public transit\npublic_transit = poi[poi['type'] == 'public_transit']\n\n# Filter census for residential areas\nresidential_areas = census[census['land_use'] == 'residential']\n\n# Spatial join to find parcels within distance criteria\nparcels_large = parcels[parcels['area'] > 5000]\nparcels_small = parcels[parcels['area'] <= 5000]\n\n# Buffer and spatial join for large parcels\nbuffer_large = public_transit.buffer(400)\nlarge_near_transit = gpd.sjoin(parcels_large, buffer_large, op='intersects')\n\n# Buffer and spatial join for small parcels\nbuffer_small = residential_areas.buffer(200)\nsmall_near_residential = gpd.sjoin(parcels_small, buffer_small, op='intersects')\n\n# Combine results\nselected_parcels = large_near_transit['ml'].append(small_near_residential['ml']).unique()\n\n# Sort and print parcel IDs\nsorted_parcel_ids = sorted(selected_parcels)\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find parcels that are: if zoned for commercial, must be larger than 8000 sq ft; if zoned for residential, must have less than 2 similar properties within 1000m",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\ncensus = gpd.read_file('../data/cambridge_census_cambridge_pct.geojson')\n\n# Set CRS to EPSG:26986 for accurate distance calculations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Filter parcels based on zoning and size\ncommercial_parcels = parcels[(parcels['zoning'] == 'commercial') & (parcels['area'] > 8000)]\n\n# Filter residential parcels based on proximity to similar properties\nresidential_parcels = parcels[parcels['zoning'] == 'residential']\n\n# Spatial join to find nearby similar residential parcels\nresidential_buffer = residential_parcels.copy()\nresidential_buffer['geometry'] = residential_buffer.geometry.buffer(1000)\n\n# Spatial join to count similar properties within 1000m\njoined = gpd.sjoin(residential_buffer, residential_parcels, how='inner', op='intersects')\nsimilar_counts = joined.groupby('index_left').size()\n\n# Filter residential parcels with less than 2 similar properties within 1000m\nfiltered_residential = residential_parcels[similar_counts < 2]\n\n# Combine results\nresult_parcels = commercial_parcels.append(filtered_residential)\n\n# Sort and extract parcel IDs\nsorted_parcel_ids = result_parcels['ml'].sort_values().tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  },
  {
    "query": "find mixed-use parcels that, if north of massachusetts avenue, must have retail on the ground floor, otherwise must have at least 3000 sq ft of commercial space.",
    "method": "fine-tuned",
    "model": "ft:gpt-4o-2024-08-06:mit:spatial-agent-20250505-213242:BU8HJW5s",
    "success": false,
    "code": "import geopandas as gpd\n\n# Load data\nparcels = gpd.read_file('../data/cambridge_parcels.geojson')\npoi = gpd.read_file('../data/cambridge_poi_processed.geojson')\n\n# Set CRS for spatial operations\nparcels = parcels.to_crs(epsg=26986)\npoi = poi.to_crs(epsg=26986)\n\n# Define Massachusetts Avenue line (approximate)\nmass_ave_line = gpd.GeoSeries.from_wkt([\n    \"LINESTRING (298000 4690000, 299000 4691000)\"\n], crs=epsg=26986)\n\n# Filter parcels north of Massachusetts Avenue\nnorth_parcels = parcels[parcels.intersects(mass_ave_line.unary_union.buffer(0))]\n\n# Filter parcels with retail on the ground floor\nretail_poi = poi[poi['category'] == 'Retail']\nnorth_retail_parcels = north_parcels[north_parcels.intersects(retail_poi.unary_union)]\n\n# Filter parcels south of Massachusetts Avenue with at least 3000 sq ft commercial space\nsouth_parcels = parcels[~parcels.index.isin(north_parcels.index)]\nsouth_commercial_parcels = south_parcels[south_parcels['commercial_sqft'] >= 3000]\n\n# Combine results\nselected_parcels = north_retail_parcels.append(south_commercial_parcels)\n\n# Sort by parcel ID\nsorted_parcel_ids = selected_parcels['ml'].sort_values().tolist()\n\n# Print the final list of parcel IDs\nprint(sorted_parcel_ids)"
  }
]